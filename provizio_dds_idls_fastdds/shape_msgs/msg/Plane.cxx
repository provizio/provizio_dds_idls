// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Plane.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Plane.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


#define shape_msgs_msg_Plane_max_cdr_typesize 40ULL;

#define shape_msgs_msg_Plane_max_key_cdr_typesize 0ULL;


shape_msgs::msg::Plane::Plane()
{
    // shape_msgs::msg::double__4 m_coef
    memset(&m_coef, 0, (4) * 8);

}

shape_msgs::msg::Plane::~Plane()
{
}

shape_msgs::msg::Plane::Plane(
        const Plane& x)
{
    m_coef = x.m_coef;
}

shape_msgs::msg::Plane::Plane(
        Plane&& x) noexcept 
{
    m_coef = std::move(x.m_coef);
}

shape_msgs::msg::Plane& shape_msgs::msg::Plane::operator =(
        const Plane& x)
{

    m_coef = x.m_coef;

    return *this;
}

shape_msgs::msg::Plane& shape_msgs::msg::Plane::operator =(
        Plane&& x) noexcept
{

    m_coef = std::move(x.m_coef);

    return *this;
}

bool shape_msgs::msg::Plane::operator ==(
        const Plane& x) const
{

    return (m_coef == x.m_coef);
}

bool shape_msgs::msg::Plane::operator !=(
        const Plane& x) const
{
    return !(*this == x);
}

size_t shape_msgs::msg::Plane::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return shape_msgs_msg_Plane_max_cdr_typesize;
}

size_t shape_msgs::msg::Plane::getCdrSerializedSize(
        const shape_msgs::msg::Plane& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    if ((4) > 0)
    {
        current_alignment += ((4) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void shape_msgs::msg::Plane::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_coef;


}

void shape_msgs::msg::Plane::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_coef;

}

/*!
 * @brief This function copies the value in member coef
 * @param _coef New value to be copied in member coef
 */
void shape_msgs::msg::Plane::coef(
        const shape_msgs::msg::double__4& _coef)
{
    m_coef = _coef;
}

/*!
 * @brief This function moves the value in member coef
 * @param _coef New value to be moved in member coef
 */
void shape_msgs::msg::Plane::coef(
        shape_msgs::msg::double__4&& _coef)
{
    m_coef = std::move(_coef);
}

/*!
 * @brief This function returns a constant reference to member coef
 * @return Constant reference to member coef
 */
const shape_msgs::msg::double__4& shape_msgs::msg::Plane::coef() const
{
    return m_coef;
}

/*!
 * @brief This function returns a reference to member coef
 * @return Reference to member coef
 */
shape_msgs::msg::double__4& shape_msgs::msg::Plane::coef()
{
    return m_coef;
}


size_t shape_msgs::msg::Plane::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return shape_msgs_msg_Plane_max_key_cdr_typesize;
}

bool shape_msgs::msg::Plane::isKeyDefined()
{
    return false;
}

void shape_msgs::msg::Plane::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


