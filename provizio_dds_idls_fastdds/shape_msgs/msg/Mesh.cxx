// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Mesh.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Mesh.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define shape_msgs_msg_Mesh_max_cdr_typesize 4008ULL;
#define geometry_msgs_msg_Point_max_cdr_typesize 24ULL;

#define shape_msgs_msg_MeshTriangle_max_cdr_typesize 16ULL;
#define shape_msgs_msg_Mesh_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Point_max_key_cdr_typesize 0ULL;

#define shape_msgs_msg_MeshTriangle_max_key_cdr_typesize 0ULL;

shape_msgs::msg::Mesh::Mesh()
{
    // sequence<shape_msgs::msg::MeshTriangle> m_triangles

    // sequence<geometry_msgs::msg::Point> m_vertices


}

shape_msgs::msg::Mesh::~Mesh()
{


}

shape_msgs::msg::Mesh::Mesh(
        const Mesh& x)
{
    m_triangles = x.m_triangles;
    m_vertices = x.m_vertices;
}

shape_msgs::msg::Mesh::Mesh(
        Mesh&& x) noexcept 
{
    m_triangles = std::move(x.m_triangles);
    m_vertices = std::move(x.m_vertices);
}

shape_msgs::msg::Mesh& shape_msgs::msg::Mesh::operator =(
        const Mesh& x)
{

    m_triangles = x.m_triangles;
    m_vertices = x.m_vertices;

    return *this;
}

shape_msgs::msg::Mesh& shape_msgs::msg::Mesh::operator =(
        Mesh&& x) noexcept
{

    m_triangles = std::move(x.m_triangles);
    m_vertices = std::move(x.m_vertices);

    return *this;
}

bool shape_msgs::msg::Mesh::operator ==(
        const Mesh& x) const
{

    return (m_triangles == x.m_triangles && m_vertices == x.m_vertices);
}

bool shape_msgs::msg::Mesh::operator !=(
        const Mesh& x) const
{
    return !(*this == x);
}

size_t shape_msgs::msg::Mesh::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return shape_msgs_msg_Mesh_max_cdr_typesize;
}

size_t shape_msgs::msg::Mesh::getCdrSerializedSize(
        const shape_msgs::msg::Mesh& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.triangles().size(); ++a)
    {
        current_alignment += shape_msgs::msg::MeshTriangle::getCdrSerializedSize(data.triangles().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.vertices().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.vertices().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void shape_msgs::msg::Mesh::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_triangles;
    scdr << m_vertices;
}

void shape_msgs::msg::Mesh::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_triangles;
    dcdr >> m_vertices;
}

/*!
 * @brief This function copies the value in member triangles
 * @param _triangles New value to be copied in member triangles
 */
void shape_msgs::msg::Mesh::triangles(
        const std::vector<shape_msgs::msg::MeshTriangle>& _triangles)
{
    m_triangles = _triangles;
}

/*!
 * @brief This function moves the value in member triangles
 * @param _triangles New value to be moved in member triangles
 */
void shape_msgs::msg::Mesh::triangles(
        std::vector<shape_msgs::msg::MeshTriangle>&& _triangles)
{
    m_triangles = std::move(_triangles);
}

/*!
 * @brief This function returns a constant reference to member triangles
 * @return Constant reference to member triangles
 */
const std::vector<shape_msgs::msg::MeshTriangle>& shape_msgs::msg::Mesh::triangles() const
{
    return m_triangles;
}

/*!
 * @brief This function returns a reference to member triangles
 * @return Reference to member triangles
 */
std::vector<shape_msgs::msg::MeshTriangle>& shape_msgs::msg::Mesh::triangles()
{
    return m_triangles;
}
/*!
 * @brief This function copies the value in member vertices
 * @param _vertices New value to be copied in member vertices
 */
void shape_msgs::msg::Mesh::vertices(
        const std::vector<geometry_msgs::msg::Point>& _vertices)
{
    m_vertices = _vertices;
}

/*!
 * @brief This function moves the value in member vertices
 * @param _vertices New value to be moved in member vertices
 */
void shape_msgs::msg::Mesh::vertices(
        std::vector<geometry_msgs::msg::Point>&& _vertices)
{
    m_vertices = std::move(_vertices);
}

/*!
 * @brief This function returns a constant reference to member vertices
 * @return Constant reference to member vertices
 */
const std::vector<geometry_msgs::msg::Point>& shape_msgs::msg::Mesh::vertices() const
{
    return m_vertices;
}

/*!
 * @brief This function returns a reference to member vertices
 * @return Reference to member vertices
 */
std::vector<geometry_msgs::msg::Point>& shape_msgs::msg::Mesh::vertices()
{
    return m_vertices;
}


size_t shape_msgs::msg::Mesh::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return shape_msgs_msg_Mesh_max_key_cdr_typesize;
}

bool shape_msgs::msg::Mesh::isKeyDefined()
{
    return false;
}

void shape_msgs::msg::Mesh::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


