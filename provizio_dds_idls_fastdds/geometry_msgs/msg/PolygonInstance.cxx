// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PolygonInstance.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PolygonInstance.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


geometry_msgs::msg::PolygonInstance::PolygonInstance()
{

}

geometry_msgs::msg::PolygonInstance::~PolygonInstance()
{
}

geometry_msgs::msg::PolygonInstance::PolygonInstance(
        const PolygonInstance& x)
{
    m_polygon = x.m_polygon;
    m_id = x.m_id;
}

geometry_msgs::msg::PolygonInstance::PolygonInstance(
        PolygonInstance&& x) noexcept
{
    m_polygon = std::move(x.m_polygon);
    m_id = x.m_id;
}

geometry_msgs::msg::PolygonInstance& geometry_msgs::msg::PolygonInstance::operator =(
        const PolygonInstance& x)
{

    m_polygon = x.m_polygon;
    m_id = x.m_id;

    return *this;
}

geometry_msgs::msg::PolygonInstance& geometry_msgs::msg::PolygonInstance::operator =(
        PolygonInstance&& x) noexcept
{

    m_polygon = std::move(x.m_polygon);
    m_id = x.m_id;

    return *this;
}

bool geometry_msgs::msg::PolygonInstance::operator ==(
        const PolygonInstance& x) const
{
    return (m_polygon == x.m_polygon &&
           m_id == x.m_id);
}

bool geometry_msgs::msg::PolygonInstance::operator !=(
        const PolygonInstance& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member polygon
 * @param _polygon New value to be copied in member polygon
 */
void geometry_msgs::msg::PolygonInstance::polygon(
        const geometry_msgs::msg::Polygon& _polygon)
{
    m_polygon = _polygon;
}

/*!
 * @brief This function moves the value in member polygon
 * @param _polygon New value to be moved in member polygon
 */
void geometry_msgs::msg::PolygonInstance::polygon(
        geometry_msgs::msg::Polygon&& _polygon)
{
    m_polygon = std::move(_polygon);
}

/*!
 * @brief This function returns a constant reference to member polygon
 * @return Constant reference to member polygon
 */
const geometry_msgs::msg::Polygon& geometry_msgs::msg::PolygonInstance::polygon() const
{
    return m_polygon;
}

/*!
 * @brief This function returns a reference to member polygon
 * @return Reference to member polygon
 */
geometry_msgs::msg::Polygon& geometry_msgs::msg::PolygonInstance::polygon()
{
    return m_polygon;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void geometry_msgs::msg::PolygonInstance::id(
        int64_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int64_t geometry_msgs::msg::PolygonInstance::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int64_t& geometry_msgs::msg::PolygonInstance::id()
{
    return m_id;
}




// Include auxiliary functions like for serializing/deserializing.
#include "PolygonInstanceCdrAux.ipp"
