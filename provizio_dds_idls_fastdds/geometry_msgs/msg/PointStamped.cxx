// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PointStamped.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PointStamped.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


geometry_msgs::msg::PointStamped::PointStamped()
{

}

geometry_msgs::msg::PointStamped::~PointStamped()
{
}

geometry_msgs::msg::PointStamped::PointStamped(
        const PointStamped& x)
{
    m_header = x.m_header;
    m_point = x.m_point;
}

geometry_msgs::msg::PointStamped::PointStamped(
        PointStamped&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_point = std::move(x.m_point);
}

geometry_msgs::msg::PointStamped& geometry_msgs::msg::PointStamped::operator =(
        const PointStamped& x)
{

    m_header = x.m_header;
    m_point = x.m_point;

    return *this;
}

geometry_msgs::msg::PointStamped& geometry_msgs::msg::PointStamped::operator =(
        PointStamped&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_point = std::move(x.m_point);

    return *this;
}

bool geometry_msgs::msg::PointStamped::operator ==(
        const PointStamped& x) const
{
    return (m_header == x.m_header &&
           m_point == x.m_point);
}

bool geometry_msgs::msg::PointStamped::operator !=(
        const PointStamped& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void geometry_msgs::msg::PointStamped::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void geometry_msgs::msg::PointStamped::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& geometry_msgs::msg::PointStamped::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& geometry_msgs::msg::PointStamped::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member point
 * @param _point New value to be copied in member point
 */
void geometry_msgs::msg::PointStamped::point(
        const geometry_msgs::msg::Point& _point)
{
    m_point = _point;
}

/*!
 * @brief This function moves the value in member point
 * @param _point New value to be moved in member point
 */
void geometry_msgs::msg::PointStamped::point(
        geometry_msgs::msg::Point&& _point)
{
    m_point = std::move(_point);
}

/*!
 * @brief This function returns a constant reference to member point
 * @return Constant reference to member point
 */
const geometry_msgs::msg::Point& geometry_msgs::msg::PointStamped::point() const
{
    return m_point;
}

/*!
 * @brief This function returns a reference to member point
 * @return Reference to member point
 */
geometry_msgs::msg::Point& geometry_msgs::msg::PointStamped::point()
{
    return m_point;
}




// Include auxiliary functions like for serializing/deserializing.
#include "PointStampedCdrAux.ipp"
