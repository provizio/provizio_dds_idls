// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DisparityImage.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_STEREO_MSGS_MSG_DISPARITYIMAGE_H_
#define _FAST_DDS_GENERATED_STEREO_MSGS_MSG_DISPARITYIMAGE_H_

#include "sensor_msgs/msg/RegionOfInterest.h"
#include "sensor_msgs/msg/Image.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DisparityImage_SOURCE)
#define DisparityImage_DllAPI __declspec( dllexport )
#else
#define DisparityImage_DllAPI __declspec( dllimport )
#endif // DisparityImage_SOURCE
#else
#define DisparityImage_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DisparityImage_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace stereo_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure DisparityImage defined by the user in the IDL file.
         * @ingroup DISPARITYIMAGE
         */
        class DisparityImage
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport DisparityImage();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~DisparityImage();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object stereo_msgs::msg::DisparityImage that will be copied.
             */
            eProsima_user_DllExport DisparityImage(
                    const DisparityImage& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object stereo_msgs::msg::DisparityImage that will be copied.
             */
            eProsima_user_DllExport DisparityImage(
                    DisparityImage&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object stereo_msgs::msg::DisparityImage that will be copied.
             */
            eProsima_user_DllExport DisparityImage& operator =(
                    const DisparityImage& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object stereo_msgs::msg::DisparityImage that will be copied.
             */
            eProsima_user_DllExport DisparityImage& operator =(
                    DisparityImage&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x stereo_msgs::msg::DisparityImage object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const DisparityImage& x) const;

            /*!
             * @brief Comparison operator.
             * @param x stereo_msgs::msg::DisparityImage object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const DisparityImage& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member image
             * @param _image New value to be copied in member image
             */
            eProsima_user_DllExport void image(
                    const sensor_msgs::msg::Image& _image);

            /*!
             * @brief This function moves the value in member image
             * @param _image New value to be moved in member image
             */
            eProsima_user_DllExport void image(
                    sensor_msgs::msg::Image&& _image);

            /*!
             * @brief This function returns a constant reference to member image
             * @return Constant reference to member image
             */
            eProsima_user_DllExport const sensor_msgs::msg::Image& image() const;

            /*!
             * @brief This function returns a reference to member image
             * @return Reference to member image
             */
            eProsima_user_DllExport sensor_msgs::msg::Image& image();
            /*!
             * @brief This function sets a value in member f
             * @param _f New value for member f
             */
            eProsima_user_DllExport void f(
                    float _f);

            /*!
             * @brief This function returns the value of member f
             * @return Value of member f
             */
            eProsima_user_DllExport float f() const;

            /*!
             * @brief This function returns a reference to member f
             * @return Reference to member f
             */
            eProsima_user_DllExport float& f();

            /*!
             * @brief This function sets a value in member t
             * @param _t New value for member t
             */
            eProsima_user_DllExport void t(
                    float _t);

            /*!
             * @brief This function returns the value of member t
             * @return Value of member t
             */
            eProsima_user_DllExport float t() const;

            /*!
             * @brief This function returns a reference to member t
             * @return Reference to member t
             */
            eProsima_user_DllExport float& t();

            /*!
             * @brief This function copies the value in member valid_window
             * @param _valid_window New value to be copied in member valid_window
             */
            eProsima_user_DllExport void valid_window(
                    const sensor_msgs::msg::RegionOfInterest& _valid_window);

            /*!
             * @brief This function moves the value in member valid_window
             * @param _valid_window New value to be moved in member valid_window
             */
            eProsima_user_DllExport void valid_window(
                    sensor_msgs::msg::RegionOfInterest&& _valid_window);

            /*!
             * @brief This function returns a constant reference to member valid_window
             * @return Constant reference to member valid_window
             */
            eProsima_user_DllExport const sensor_msgs::msg::RegionOfInterest& valid_window() const;

            /*!
             * @brief This function returns a reference to member valid_window
             * @return Reference to member valid_window
             */
            eProsima_user_DllExport sensor_msgs::msg::RegionOfInterest& valid_window();
            /*!
             * @brief This function sets a value in member min_disparity
             * @param _min_disparity New value for member min_disparity
             */
            eProsima_user_DllExport void min_disparity(
                    float _min_disparity);

            /*!
             * @brief This function returns the value of member min_disparity
             * @return Value of member min_disparity
             */
            eProsima_user_DllExport float min_disparity() const;

            /*!
             * @brief This function returns a reference to member min_disparity
             * @return Reference to member min_disparity
             */
            eProsima_user_DllExport float& min_disparity();

            /*!
             * @brief This function sets a value in member max_disparity
             * @param _max_disparity New value for member max_disparity
             */
            eProsima_user_DllExport void max_disparity(
                    float _max_disparity);

            /*!
             * @brief This function returns the value of member max_disparity
             * @return Value of member max_disparity
             */
            eProsima_user_DllExport float max_disparity() const;

            /*!
             * @brief This function returns a reference to member max_disparity
             * @return Reference to member max_disparity
             */
            eProsima_user_DllExport float& max_disparity();

            /*!
             * @brief This function sets a value in member delta_d
             * @param _delta_d New value for member delta_d
             */
            eProsima_user_DllExport void delta_d(
                    float _delta_d);

            /*!
             * @brief This function returns the value of member delta_d
             * @return Value of member delta_d
             */
            eProsima_user_DllExport float delta_d() const;

            /*!
             * @brief This function returns a reference to member delta_d
             * @return Reference to member delta_d
             */
            eProsima_user_DllExport float& delta_d();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const stereo_msgs::msg::DisparityImage& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            sensor_msgs::msg::Image m_image;
            float m_f;
            float m_t;
            sensor_msgs::msg::RegionOfInterest m_valid_window;
            float m_min_disparity;
            float m_max_disparity;
            float m_delta_d;

        };
    } // namespace msg
} // namespace stereo_msgs

#endif // _FAST_DDS_GENERATED_STEREO_MSGS_MSG_DISPARITYIMAGE_H_