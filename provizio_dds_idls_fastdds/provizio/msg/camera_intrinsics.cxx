// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file camera_intrinsics.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "camera_intrinsics.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


provizio::msg::camera_intrinsics_precise_model::camera_intrinsics_precise_model()
{

}

provizio::msg::camera_intrinsics_precise_model::~camera_intrinsics_precise_model()
{
}

provizio::msg::camera_intrinsics_precise_model::camera_intrinsics_precise_model(
        const camera_intrinsics_precise_model& x)
{
    m_camera_matrix = x.m_camera_matrix;
    m_distortion_coefficients = x.m_distortion_coefficients;
}

provizio::msg::camera_intrinsics_precise_model::camera_intrinsics_precise_model(
        camera_intrinsics_precise_model&& x) noexcept
{
    m_camera_matrix = std::move(x.m_camera_matrix);
    m_distortion_coefficients = std::move(x.m_distortion_coefficients);
}

provizio::msg::camera_intrinsics_precise_model& provizio::msg::camera_intrinsics_precise_model::operator =(
        const camera_intrinsics_precise_model& x)
{

    m_camera_matrix = x.m_camera_matrix;
    m_distortion_coefficients = x.m_distortion_coefficients;

    return *this;
}

provizio::msg::camera_intrinsics_precise_model& provizio::msg::camera_intrinsics_precise_model::operator =(
        camera_intrinsics_precise_model&& x) noexcept
{

    m_camera_matrix = std::move(x.m_camera_matrix);
    m_distortion_coefficients = std::move(x.m_distortion_coefficients);

    return *this;
}

bool provizio::msg::camera_intrinsics_precise_model::operator ==(
        const camera_intrinsics_precise_model& x) const
{
    return (m_camera_matrix == x.m_camera_matrix &&
           m_distortion_coefficients == x.m_distortion_coefficients);
}

bool provizio::msg::camera_intrinsics_precise_model::operator !=(
        const camera_intrinsics_precise_model& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member camera_matrix
 * @param _camera_matrix New value to be copied in member camera_matrix
 */
void provizio::msg::camera_intrinsics_precise_model::camera_matrix(
        const std::array<float, 9>& _camera_matrix)
{
    m_camera_matrix = _camera_matrix;
}

/*!
 * @brief This function moves the value in member camera_matrix
 * @param _camera_matrix New value to be moved in member camera_matrix
 */
void provizio::msg::camera_intrinsics_precise_model::camera_matrix(
        std::array<float, 9>&& _camera_matrix)
{
    m_camera_matrix = std::move(_camera_matrix);
}

/*!
 * @brief This function returns a constant reference to member camera_matrix
 * @return Constant reference to member camera_matrix
 */
const std::array<float, 9>& provizio::msg::camera_intrinsics_precise_model::camera_matrix() const
{
    return m_camera_matrix;
}

/*!
 * @brief This function returns a reference to member camera_matrix
 * @return Reference to member camera_matrix
 */
std::array<float, 9>& provizio::msg::camera_intrinsics_precise_model::camera_matrix()
{
    return m_camera_matrix;
}


/*!
 * @brief This function copies the value in member distortion_coefficients
 * @param _distortion_coefficients New value to be copied in member distortion_coefficients
 */
void provizio::msg::camera_intrinsics_precise_model::distortion_coefficients(
        const std::array<float, 8>& _distortion_coefficients)
{
    m_distortion_coefficients = _distortion_coefficients;
}

/*!
 * @brief This function moves the value in member distortion_coefficients
 * @param _distortion_coefficients New value to be moved in member distortion_coefficients
 */
void provizio::msg::camera_intrinsics_precise_model::distortion_coefficients(
        std::array<float, 8>&& _distortion_coefficients)
{
    m_distortion_coefficients = std::move(_distortion_coefficients);
}

/*!
 * @brief This function returns a constant reference to member distortion_coefficients
 * @return Constant reference to member distortion_coefficients
 */
const std::array<float, 8>& provizio::msg::camera_intrinsics_precise_model::distortion_coefficients() const
{
    return m_distortion_coefficients;
}

/*!
 * @brief This function returns a reference to member distortion_coefficients
 * @return Reference to member distortion_coefficients
 */
std::array<float, 8>& provizio::msg::camera_intrinsics_precise_model::distortion_coefficients()
{
    return m_distortion_coefficients;
}


provizio::msg::camera_intrinsics_perspective::camera_intrinsics_perspective()
{

}

provizio::msg::camera_intrinsics_perspective::~camera_intrinsics_perspective()
{
}

provizio::msg::camera_intrinsics_perspective::camera_intrinsics_perspective(
        const camera_intrinsics_perspective& x)
{
    m_hfov = x.m_hfov;
    m_precise_model = x.m_precise_model;
}

provizio::msg::camera_intrinsics_perspective::camera_intrinsics_perspective(
        camera_intrinsics_perspective&& x) noexcept
{
    m_hfov = x.m_hfov;
    m_precise_model = std::move(x.m_precise_model);
}

provizio::msg::camera_intrinsics_perspective& provizio::msg::camera_intrinsics_perspective::operator =(
        const camera_intrinsics_perspective& x)
{

    m_hfov = x.m_hfov;
    m_precise_model = x.m_precise_model;

    return *this;
}

provizio::msg::camera_intrinsics_perspective& provizio::msg::camera_intrinsics_perspective::operator =(
        camera_intrinsics_perspective&& x) noexcept
{

    m_hfov = x.m_hfov;
    m_precise_model = std::move(x.m_precise_model);

    return *this;
}

bool provizio::msg::camera_intrinsics_perspective::operator ==(
        const camera_intrinsics_perspective& x) const
{
    return (m_hfov == x.m_hfov &&
           m_precise_model == x.m_precise_model);
}

bool provizio::msg::camera_intrinsics_perspective::operator !=(
        const camera_intrinsics_perspective& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member hfov
 * @param _hfov New value for member hfov
 */
void provizio::msg::camera_intrinsics_perspective::hfov(
        float _hfov)
{
    m_hfov = _hfov;
}

/*!
 * @brief This function returns the value of member hfov
 * @return Value of member hfov
 */
float provizio::msg::camera_intrinsics_perspective::hfov() const
{
    return m_hfov;
}

/*!
 * @brief This function returns a reference to member hfov
 * @return Reference to member hfov
 */
float& provizio::msg::camera_intrinsics_perspective::hfov()
{
    return m_hfov;
}


/*!
 * @brief This function copies the value in member precise_model
 * @param _precise_model New value to be copied in member precise_model
 */
void provizio::msg::camera_intrinsics_perspective::precise_model(
        const provizio::msg::camera_intrinsics_precise_model& _precise_model)
{
    m_precise_model = _precise_model;
}

/*!
 * @brief This function moves the value in member precise_model
 * @param _precise_model New value to be moved in member precise_model
 */
void provizio::msg::camera_intrinsics_perspective::precise_model(
        provizio::msg::camera_intrinsics_precise_model&& _precise_model)
{
    m_precise_model = std::move(_precise_model);
}

/*!
 * @brief This function returns a constant reference to member precise_model
 * @return Constant reference to member precise_model
 */
const provizio::msg::camera_intrinsics_precise_model& provizio::msg::camera_intrinsics_perspective::precise_model() const
{
    return m_precise_model;
}

/*!
 * @brief This function returns a reference to member precise_model
 * @return Reference to member precise_model
 */
provizio::msg::camera_intrinsics_precise_model& provizio::msg::camera_intrinsics_perspective::precise_model()
{
    return m_precise_model;
}


provizio::msg::camera_intrinsics_orthographic::camera_intrinsics_orthographic()
{

}

provizio::msg::camera_intrinsics_orthographic::~camera_intrinsics_orthographic()
{
}

provizio::msg::camera_intrinsics_orthographic::camera_intrinsics_orthographic(
        const camera_intrinsics_orthographic& x)
{
    m_width = x.m_width;
    m_height = x.m_height;
}

provizio::msg::camera_intrinsics_orthographic::camera_intrinsics_orthographic(
        camera_intrinsics_orthographic&& x) noexcept
{
    m_width = x.m_width;
    m_height = x.m_height;
}

provizio::msg::camera_intrinsics_orthographic& provizio::msg::camera_intrinsics_orthographic::operator =(
        const camera_intrinsics_orthographic& x)
{

    m_width = x.m_width;
    m_height = x.m_height;

    return *this;
}

provizio::msg::camera_intrinsics_orthographic& provizio::msg::camera_intrinsics_orthographic::operator =(
        camera_intrinsics_orthographic&& x) noexcept
{

    m_width = x.m_width;
    m_height = x.m_height;

    return *this;
}

bool provizio::msg::camera_intrinsics_orthographic::operator ==(
        const camera_intrinsics_orthographic& x) const
{
    return (m_width == x.m_width &&
           m_height == x.m_height);
}

bool provizio::msg::camera_intrinsics_orthographic::operator !=(
        const camera_intrinsics_orthographic& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void provizio::msg::camera_intrinsics_orthographic::width(
        float _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
float provizio::msg::camera_intrinsics_orthographic::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
float& provizio::msg::camera_intrinsics_orthographic::width()
{
    return m_width;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void provizio::msg::camera_intrinsics_orthographic::height(
        float _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
float provizio::msg::camera_intrinsics_orthographic::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
float& provizio::msg::camera_intrinsics_orthographic::height()
{
    return m_height;
}


provizio::msg::camera_intrinsics::camera_intrinsics()
{

}

provizio::msg::camera_intrinsics::~camera_intrinsics()
{
}

provizio::msg::camera_intrinsics::camera_intrinsics(
        const camera_intrinsics& x)
{
    m_header = x.m_header;
    m_perspective = x.m_perspective;
    m_orthographic = x.m_orthographic;
}

provizio::msg::camera_intrinsics::camera_intrinsics(
        camera_intrinsics&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_perspective = std::move(x.m_perspective);
    m_orthographic = std::move(x.m_orthographic);
}

provizio::msg::camera_intrinsics& provizio::msg::camera_intrinsics::operator =(
        const camera_intrinsics& x)
{

    m_header = x.m_header;
    m_perspective = x.m_perspective;
    m_orthographic = x.m_orthographic;

    return *this;
}

provizio::msg::camera_intrinsics& provizio::msg::camera_intrinsics::operator =(
        camera_intrinsics&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_perspective = std::move(x.m_perspective);
    m_orthographic = std::move(x.m_orthographic);

    return *this;
}

bool provizio::msg::camera_intrinsics::operator ==(
        const camera_intrinsics& x) const
{
    return (m_header == x.m_header &&
           m_perspective == x.m_perspective &&
           m_orthographic == x.m_orthographic);
}

bool provizio::msg::camera_intrinsics::operator !=(
        const camera_intrinsics& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void provizio::msg::camera_intrinsics::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void provizio::msg::camera_intrinsics::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& provizio::msg::camera_intrinsics::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& provizio::msg::camera_intrinsics::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member perspective
 * @param _perspective New value to be copied in member perspective
 */
void provizio::msg::camera_intrinsics::perspective(
        const provizio::msg::camera_intrinsics_perspective& _perspective)
{
    m_perspective = _perspective;
}

/*!
 * @brief This function moves the value in member perspective
 * @param _perspective New value to be moved in member perspective
 */
void provizio::msg::camera_intrinsics::perspective(
        provizio::msg::camera_intrinsics_perspective&& _perspective)
{
    m_perspective = std::move(_perspective);
}

/*!
 * @brief This function returns a constant reference to member perspective
 * @return Constant reference to member perspective
 */
const provizio::msg::camera_intrinsics_perspective& provizio::msg::camera_intrinsics::perspective() const
{
    return m_perspective;
}

/*!
 * @brief This function returns a reference to member perspective
 * @return Reference to member perspective
 */
provizio::msg::camera_intrinsics_perspective& provizio::msg::camera_intrinsics::perspective()
{
    return m_perspective;
}


/*!
 * @brief This function copies the value in member orthographic
 * @param _orthographic New value to be copied in member orthographic
 */
void provizio::msg::camera_intrinsics::orthographic(
        const provizio::msg::camera_intrinsics_orthographic& _orthographic)
{
    m_orthographic = _orthographic;
}

/*!
 * @brief This function moves the value in member orthographic
 * @param _orthographic New value to be moved in member orthographic
 */
void provizio::msg::camera_intrinsics::orthographic(
        provizio::msg::camera_intrinsics_orthographic&& _orthographic)
{
    m_orthographic = std::move(_orthographic);
}

/*!
 * @brief This function returns a constant reference to member orthographic
 * @return Constant reference to member orthographic
 */
const provizio::msg::camera_intrinsics_orthographic& provizio::msg::camera_intrinsics::orthographic() const
{
    return m_orthographic;
}

/*!
 * @brief This function returns a reference to member orthographic
 * @return Reference to member orthographic
 */
provizio::msg::camera_intrinsics_orthographic& provizio::msg::camera_intrinsics::orthographic()
{
    return m_orthographic;
}




// Include auxiliary functions like for serializing/deserializing.
#include "camera_intrinsicsCdrAux.ipp"
