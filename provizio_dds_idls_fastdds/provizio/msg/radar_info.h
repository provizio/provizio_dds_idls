// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file radar_info.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_PROVIZIO_MSG_RADAR_INFO_H_
#define _FAST_DDS_GENERATED_PROVIZIO_MSG_RADAR_INFO_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "std_msgs/msg/Header.h"
#include "radar_range.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RADAR_INFO_SOURCE)
#define RADAR_INFO_DllAPI __declspec( dllexport )
#else
#define RADAR_INFO_DllAPI __declspec( dllimport )
#endif // RADAR_INFO_SOURCE
#else
#define RADAR_INFO_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define RADAR_INFO_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace provizio {
    namespace msg {
        /*!
         * @brief This class represents the structure radar_info defined by the user in the IDL file.
         * @ingroup radar_info
         */
        class radar_info
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport radar_info();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~radar_info();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object provizio::msg::radar_info that will be copied.
             */
            eProsima_user_DllExport radar_info(
                    const radar_info& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object provizio::msg::radar_info that will be copied.
             */
            eProsima_user_DllExport radar_info(
                    radar_info&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object provizio::msg::radar_info that will be copied.
             */
            eProsima_user_DllExport radar_info& operator =(
                    const radar_info& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object provizio::msg::radar_info that will be copied.
             */
            eProsima_user_DllExport radar_info& operator =(
                    radar_info&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x provizio::msg::radar_info object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const radar_info& x) const;

            /*!
             * @brief Comparison operator.
             * @param x provizio::msg::radar_info object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const radar_info& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();


            /*!
             * @brief This function copies the value in member serial_number
             * @param _serial_number New value to be copied in member serial_number
             */
            eProsima_user_DllExport void serial_number(
                    const std::string& _serial_number);

            /*!
             * @brief This function moves the value in member serial_number
             * @param _serial_number New value to be moved in member serial_number
             */
            eProsima_user_DllExport void serial_number(
                    std::string&& _serial_number);

            /*!
             * @brief This function returns a constant reference to member serial_number
             * @return Constant reference to member serial_number
             */
            eProsima_user_DllExport const std::string& serial_number() const;

            /*!
             * @brief This function returns a reference to member serial_number
             * @return Reference to member serial_number
             */
            eProsima_user_DllExport std::string& serial_number();


            /*!
             * @brief This function copies the value in member supported_ranges
             * @param _supported_ranges New value to be copied in member supported_ranges
             */
            eProsima_user_DllExport void supported_ranges(
                    const std::vector<provizio::msg::radar_range>& _supported_ranges);

            /*!
             * @brief This function moves the value in member supported_ranges
             * @param _supported_ranges New value to be moved in member supported_ranges
             */
            eProsima_user_DllExport void supported_ranges(
                    std::vector<provizio::msg::radar_range>&& _supported_ranges);

            /*!
             * @brief This function returns a constant reference to member supported_ranges
             * @return Constant reference to member supported_ranges
             */
            eProsima_user_DllExport const std::vector<provizio::msg::radar_range>& supported_ranges() const;

            /*!
             * @brief This function returns a reference to member supported_ranges
             * @return Reference to member supported_ranges
             */
            eProsima_user_DllExport std::vector<provizio::msg::radar_range>& supported_ranges();


            /*!
             * @brief This function sets a value in member current_range
             * @param _current_range New value for member current_range
             */
            eProsima_user_DllExport void current_range(
                    provizio::msg::radar_range _current_range);

            /*!
             * @brief This function returns the value of member current_range
             * @return Value of member current_range
             */
            eProsima_user_DllExport provizio::msg::radar_range current_range() const;

            /*!
             * @brief This function returns a reference to member current_range
             * @return Reference to member current_range
             */
            eProsima_user_DllExport provizio::msg::radar_range& current_range();

        private:

            std_msgs::msg::Header m_header;
            std::string m_serial_number;
            std::vector<provizio::msg::radar_range> m_supported_ranges;
            provizio::msg::radar_range m_current_range{provizio::msg::short_range};

        };
    } // namespace msg
} // namespace provizio

#endif // _FAST_DDS_GENERATED_PROVIZIO_MSG_RADAR_INFO_H_

