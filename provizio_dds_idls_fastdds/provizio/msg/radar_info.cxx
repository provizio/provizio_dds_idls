// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file radar_info.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "radar_info.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


provizio::msg::radar_info::radar_info()
{

}

provizio::msg::radar_info::~radar_info()
{
}

provizio::msg::radar_info::radar_info(
        const radar_info& x)
{
    m_header = x.m_header;
    m_serial_number = x.m_serial_number;
    m_supported_ranges = x.m_supported_ranges;
    m_current_range = x.m_current_range;
}

provizio::msg::radar_info::radar_info(
        radar_info&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_serial_number = std::move(x.m_serial_number);
    m_supported_ranges = std::move(x.m_supported_ranges);
    m_current_range = x.m_current_range;
}

provizio::msg::radar_info& provizio::msg::radar_info::operator =(
        const radar_info& x)
{

    m_header = x.m_header;
    m_serial_number = x.m_serial_number;
    m_supported_ranges = x.m_supported_ranges;
    m_current_range = x.m_current_range;

    return *this;
}

provizio::msg::radar_info& provizio::msg::radar_info::operator =(
        radar_info&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_serial_number = std::move(x.m_serial_number);
    m_supported_ranges = std::move(x.m_supported_ranges);
    m_current_range = x.m_current_range;

    return *this;
}

bool provizio::msg::radar_info::operator ==(
        const radar_info& x) const
{
    return (m_header == x.m_header &&
           m_serial_number == x.m_serial_number &&
           m_supported_ranges == x.m_supported_ranges &&
           m_current_range == x.m_current_range);
}

bool provizio::msg::radar_info::operator !=(
        const radar_info& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void provizio::msg::radar_info::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void provizio::msg::radar_info::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& provizio::msg::radar_info::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& provizio::msg::radar_info::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member serial_number
 * @param _serial_number New value to be copied in member serial_number
 */
void provizio::msg::radar_info::serial_number(
        const std::string& _serial_number)
{
    m_serial_number = _serial_number;
}

/*!
 * @brief This function moves the value in member serial_number
 * @param _serial_number New value to be moved in member serial_number
 */
void provizio::msg::radar_info::serial_number(
        std::string&& _serial_number)
{
    m_serial_number = std::move(_serial_number);
}

/*!
 * @brief This function returns a constant reference to member serial_number
 * @return Constant reference to member serial_number
 */
const std::string& provizio::msg::radar_info::serial_number() const
{
    return m_serial_number;
}

/*!
 * @brief This function returns a reference to member serial_number
 * @return Reference to member serial_number
 */
std::string& provizio::msg::radar_info::serial_number()
{
    return m_serial_number;
}


/*!
 * @brief This function copies the value in member supported_ranges
 * @param _supported_ranges New value to be copied in member supported_ranges
 */
void provizio::msg::radar_info::supported_ranges(
        const std::vector<provizio::msg::radar_range>& _supported_ranges)
{
    m_supported_ranges = _supported_ranges;
}

/*!
 * @brief This function moves the value in member supported_ranges
 * @param _supported_ranges New value to be moved in member supported_ranges
 */
void provizio::msg::radar_info::supported_ranges(
        std::vector<provizio::msg::radar_range>&& _supported_ranges)
{
    m_supported_ranges = std::move(_supported_ranges);
}

/*!
 * @brief This function returns a constant reference to member supported_ranges
 * @return Constant reference to member supported_ranges
 */
const std::vector<provizio::msg::radar_range>& provizio::msg::radar_info::supported_ranges() const
{
    return m_supported_ranges;
}

/*!
 * @brief This function returns a reference to member supported_ranges
 * @return Reference to member supported_ranges
 */
std::vector<provizio::msg::radar_range>& provizio::msg::radar_info::supported_ranges()
{
    return m_supported_ranges;
}


/*!
 * @brief This function sets a value in member current_range
 * @param _current_range New value for member current_range
 */
void provizio::msg::radar_info::current_range(
        provizio::msg::radar_range _current_range)
{
    m_current_range = _current_range;
}

/*!
 * @brief This function returns the value of member current_range
 * @return Value of member current_range
 */
provizio::msg::radar_range provizio::msg::radar_info::current_range() const
{
    return m_current_range;
}

/*!
 * @brief This function returns a reference to member current_range
 * @return Reference to member current_range
 */
provizio::msg::radar_range& provizio::msg::radar_info::current_range()
{
    return m_current_range;
}




// Include auxiliary functions like for serializing/deserializing.
#include "radar_infoCdrAux.ipp"
