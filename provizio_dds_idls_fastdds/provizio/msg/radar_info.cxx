// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file radar_info.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "radar_info.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define provizio_msg_set_radar_mode_max_cdr_typesize 532ULL;
#define provizio_msg_radar_info_max_cdr_typesize 936ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;

#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define provizio_msg_set_radar_mode_max_key_cdr_typesize 0ULL;
#define provizio_msg_radar_info_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;


provizio::msg::radar_info::radar_info()
{
    // std_msgs::msg::Header m_header

    // string m_serial_number
    m_serial_number ="";
    // sequence<provizio::msg::radar_mode> m_supported_modes

    // provizio::msg::radar_mode m_current_mode
    m_current_mode = provizio::msg::short_range;

}

provizio::msg::radar_info::~radar_info()
{




}

provizio::msg::radar_info::radar_info(
        const radar_info& x)
{
    m_header = x.m_header;
    m_serial_number = x.m_serial_number;
    m_supported_modes = x.m_supported_modes;
    m_current_mode = x.m_current_mode;
}

provizio::msg::radar_info::radar_info(
        radar_info&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_serial_number = std::move(x.m_serial_number);
    m_supported_modes = std::move(x.m_supported_modes);
    m_current_mode = x.m_current_mode;
}

provizio::msg::radar_info& provizio::msg::radar_info::operator =(
        const radar_info& x)
{

    m_header = x.m_header;
    m_serial_number = x.m_serial_number;
    m_supported_modes = x.m_supported_modes;
    m_current_mode = x.m_current_mode;

    return *this;
}

provizio::msg::radar_info& provizio::msg::radar_info::operator =(
        radar_info&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_serial_number = std::move(x.m_serial_number);
    m_supported_modes = std::move(x.m_supported_modes);
    m_current_mode = x.m_current_mode;

    return *this;
}

bool provizio::msg::radar_info::operator ==(
        const radar_info& x) const
{

    return (m_header == x.m_header && m_serial_number == x.m_serial_number && m_supported_modes == x.m_supported_modes && m_current_mode == x.m_current_mode);
}

bool provizio::msg::radar_info::operator !=(
        const radar_info& x) const
{
    return !(*this == x);
}

size_t provizio::msg::radar_info::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return provizio_msg_radar_info_max_cdr_typesize;
}

size_t provizio::msg::radar_info::getCdrSerializedSize(
        const provizio::msg::radar_info& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.serial_number().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.supported_modes().size() > 0)
    {
        current_alignment += (data.supported_modes().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void provizio::msg::radar_info::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_serial_number.c_str();
    scdr << static_cast<uint32_t>(m_supported_modes.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_supported_modes.data()), m_supported_modes.size());

    scdr << (uint32_t)m_current_mode;

}

void provizio::msg::radar_info::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_serial_number;
    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_supported_modes.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_supported_modes.data()), seq_length);
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_current_mode = (provizio::msg::radar_mode)enum_value;
    }

}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void provizio::msg::radar_info::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void provizio::msg::radar_info::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& provizio::msg::radar_info::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& provizio::msg::radar_info::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member serial_number
 * @param _serial_number New value to be copied in member serial_number
 */
void provizio::msg::radar_info::serial_number(
        const std::string& _serial_number)
{
    m_serial_number = _serial_number;
}

/*!
 * @brief This function moves the value in member serial_number
 * @param _serial_number New value to be moved in member serial_number
 */
void provizio::msg::radar_info::serial_number(
        std::string&& _serial_number)
{
    m_serial_number = std::move(_serial_number);
}

/*!
 * @brief This function returns a constant reference to member serial_number
 * @return Constant reference to member serial_number
 */
const std::string& provizio::msg::radar_info::serial_number() const
{
    return m_serial_number;
}

/*!
 * @brief This function returns a reference to member serial_number
 * @return Reference to member serial_number
 */
std::string& provizio::msg::radar_info::serial_number()
{
    return m_serial_number;
}
/*!
 * @brief This function copies the value in member supported_modes
 * @param _supported_modes New value to be copied in member supported_modes
 */
void provizio::msg::radar_info::supported_modes(
        const std::vector<provizio::msg::radar_mode>& _supported_modes)
{
    m_supported_modes = _supported_modes;
}

/*!
 * @brief This function moves the value in member supported_modes
 * @param _supported_modes New value to be moved in member supported_modes
 */
void provizio::msg::radar_info::supported_modes(
        std::vector<provizio::msg::radar_mode>&& _supported_modes)
{
    m_supported_modes = std::move(_supported_modes);
}

/*!
 * @brief This function returns a constant reference to member supported_modes
 * @return Constant reference to member supported_modes
 */
const std::vector<provizio::msg::radar_mode>& provizio::msg::radar_info::supported_modes() const
{
    return m_supported_modes;
}

/*!
 * @brief This function returns a reference to member supported_modes
 * @return Reference to member supported_modes
 */
std::vector<provizio::msg::radar_mode>& provizio::msg::radar_info::supported_modes()
{
    return m_supported_modes;
}
/*!
 * @brief This function sets a value in member current_mode
 * @param _current_mode New value for member current_mode
 */
void provizio::msg::radar_info::current_mode(
        provizio::msg::radar_mode _current_mode)
{
    m_current_mode = _current_mode;
}

/*!
 * @brief This function returns the value of member current_mode
 * @return Value of member current_mode
 */
provizio::msg::radar_mode provizio::msg::radar_info::current_mode() const
{
    return m_current_mode;
}

/*!
 * @brief This function returns a reference to member current_mode
 * @return Reference to member current_mode
 */
provizio::msg::radar_mode& provizio::msg::radar_info::current_mode()
{
    return m_current_mode;
}



size_t provizio::msg::radar_info::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return provizio_msg_radar_info_max_key_cdr_typesize;
}

bool provizio::msg::radar_info::isKeyDefined()
{
    return false;
}

void provizio::msg::radar_info::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


