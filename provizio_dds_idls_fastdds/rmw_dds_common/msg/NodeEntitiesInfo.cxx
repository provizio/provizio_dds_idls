// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NodeEntitiesInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NodeEntitiesInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define rmw_dds_common_msg_NodeEntitiesInfo_max_cdr_typesize 5536ULL;

#define rmw_dds_common_msg_Gid_max_cdr_typesize 25ULL;
#define rmw_dds_common_msg_NodeEntitiesInfo_max_key_cdr_typesize 0ULL;

#define rmw_dds_common_msg_Gid_max_key_cdr_typesize 0ULL;

rmw_dds_common::msg::NodeEntitiesInfo::NodeEntitiesInfo()
{
    // string m_node_namespace
    m_node_namespace ="";
    // string m_node_name
    m_node_name ="";
    // sequence<rmw_dds_common::msg::Gid> m_reader_gid_seq

    // sequence<rmw_dds_common::msg::Gid> m_writer_gid_seq


}

rmw_dds_common::msg::NodeEntitiesInfo::~NodeEntitiesInfo()
{




}

rmw_dds_common::msg::NodeEntitiesInfo::NodeEntitiesInfo(
        const NodeEntitiesInfo& x)
{
    m_node_namespace = x.m_node_namespace;
    m_node_name = x.m_node_name;
    m_reader_gid_seq = x.m_reader_gid_seq;
    m_writer_gid_seq = x.m_writer_gid_seq;
}

rmw_dds_common::msg::NodeEntitiesInfo::NodeEntitiesInfo(
        NodeEntitiesInfo&& x) noexcept 
{
    m_node_namespace = std::move(x.m_node_namespace);
    m_node_name = std::move(x.m_node_name);
    m_reader_gid_seq = std::move(x.m_reader_gid_seq);
    m_writer_gid_seq = std::move(x.m_writer_gid_seq);
}

rmw_dds_common::msg::NodeEntitiesInfo& rmw_dds_common::msg::NodeEntitiesInfo::operator =(
        const NodeEntitiesInfo& x)
{

    m_node_namespace = x.m_node_namespace;
    m_node_name = x.m_node_name;
    m_reader_gid_seq = x.m_reader_gid_seq;
    m_writer_gid_seq = x.m_writer_gid_seq;

    return *this;
}

rmw_dds_common::msg::NodeEntitiesInfo& rmw_dds_common::msg::NodeEntitiesInfo::operator =(
        NodeEntitiesInfo&& x) noexcept
{

    m_node_namespace = std::move(x.m_node_namespace);
    m_node_name = std::move(x.m_node_name);
    m_reader_gid_seq = std::move(x.m_reader_gid_seq);
    m_writer_gid_seq = std::move(x.m_writer_gid_seq);

    return *this;
}

bool rmw_dds_common::msg::NodeEntitiesInfo::operator ==(
        const NodeEntitiesInfo& x) const
{

    return (m_node_namespace == x.m_node_namespace && m_node_name == x.m_node_name && m_reader_gid_seq == x.m_reader_gid_seq && m_writer_gid_seq == x.m_writer_gid_seq);
}

bool rmw_dds_common::msg::NodeEntitiesInfo::operator !=(
        const NodeEntitiesInfo& x) const
{
    return !(*this == x);
}

size_t rmw_dds_common::msg::NodeEntitiesInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return rmw_dds_common_msg_NodeEntitiesInfo_max_cdr_typesize;
}

size_t rmw_dds_common::msg::NodeEntitiesInfo::getCdrSerializedSize(
        const rmw_dds_common::msg::NodeEntitiesInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.node_namespace().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.node_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.reader_gid_seq().size(); ++a)
    {
        current_alignment += rmw_dds_common::msg::Gid::getCdrSerializedSize(data.reader_gid_seq().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.writer_gid_seq().size(); ++a)
    {
        current_alignment += rmw_dds_common::msg::Gid::getCdrSerializedSize(data.writer_gid_seq().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void rmw_dds_common::msg::NodeEntitiesInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_node_namespace.c_str();
    scdr << m_node_name.c_str();
    scdr << m_reader_gid_seq;
    scdr << m_writer_gid_seq;

}

void rmw_dds_common::msg::NodeEntitiesInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        std::string aux;
        dcdr >> aux;
        m_node_namespace = aux.c_str();
    }
    {
        std::string aux;
        dcdr >> aux;
        m_node_name = aux.c_str();
    }
    dcdr >> m_reader_gid_seq;
    dcdr >> m_writer_gid_seq;
}

/*!
 * @brief This function copies the value in member node_namespace
 * @param _node_namespace New value to be copied in member node_namespace
 */
void rmw_dds_common::msg::NodeEntitiesInfo::node_namespace(
        const eprosima::fastrtps::fixed_string<256>& _node_namespace)
{
    m_node_namespace = _node_namespace;
}

/*!
 * @brief This function moves the value in member node_namespace
 * @param _node_namespace New value to be moved in member node_namespace
 */
void rmw_dds_common::msg::NodeEntitiesInfo::node_namespace(
        eprosima::fastrtps::fixed_string<256>&& _node_namespace)
{
    m_node_namespace = std::move(_node_namespace);
}

/*!
 * @brief This function returns a constant reference to member node_namespace
 * @return Constant reference to member node_namespace
 */
const eprosima::fastrtps::fixed_string<256>& rmw_dds_common::msg::NodeEntitiesInfo::node_namespace() const
{
    return m_node_namespace;
}

/*!
 * @brief This function returns a reference to member node_namespace
 * @return Reference to member node_namespace
 */
eprosima::fastrtps::fixed_string<256>& rmw_dds_common::msg::NodeEntitiesInfo::node_namespace()
{
    return m_node_namespace;
}
/*!
 * @brief This function copies the value in member node_name
 * @param _node_name New value to be copied in member node_name
 */
void rmw_dds_common::msg::NodeEntitiesInfo::node_name(
        const eprosima::fastrtps::fixed_string<256>& _node_name)
{
    m_node_name = _node_name;
}

/*!
 * @brief This function moves the value in member node_name
 * @param _node_name New value to be moved in member node_name
 */
void rmw_dds_common::msg::NodeEntitiesInfo::node_name(
        eprosima::fastrtps::fixed_string<256>&& _node_name)
{
    m_node_name = std::move(_node_name);
}

/*!
 * @brief This function returns a constant reference to member node_name
 * @return Constant reference to member node_name
 */
const eprosima::fastrtps::fixed_string<256>& rmw_dds_common::msg::NodeEntitiesInfo::node_name() const
{
    return m_node_name;
}

/*!
 * @brief This function returns a reference to member node_name
 * @return Reference to member node_name
 */
eprosima::fastrtps::fixed_string<256>& rmw_dds_common::msg::NodeEntitiesInfo::node_name()
{
    return m_node_name;
}
/*!
 * @brief This function copies the value in member reader_gid_seq
 * @param _reader_gid_seq New value to be copied in member reader_gid_seq
 */
void rmw_dds_common::msg::NodeEntitiesInfo::reader_gid_seq(
        const std::vector<rmw_dds_common::msg::Gid>& _reader_gid_seq)
{
    m_reader_gid_seq = _reader_gid_seq;
}

/*!
 * @brief This function moves the value in member reader_gid_seq
 * @param _reader_gid_seq New value to be moved in member reader_gid_seq
 */
void rmw_dds_common::msg::NodeEntitiesInfo::reader_gid_seq(
        std::vector<rmw_dds_common::msg::Gid>&& _reader_gid_seq)
{
    m_reader_gid_seq = std::move(_reader_gid_seq);
}

/*!
 * @brief This function returns a constant reference to member reader_gid_seq
 * @return Constant reference to member reader_gid_seq
 */
const std::vector<rmw_dds_common::msg::Gid>& rmw_dds_common::msg::NodeEntitiesInfo::reader_gid_seq() const
{
    return m_reader_gid_seq;
}

/*!
 * @brief This function returns a reference to member reader_gid_seq
 * @return Reference to member reader_gid_seq
 */
std::vector<rmw_dds_common::msg::Gid>& rmw_dds_common::msg::NodeEntitiesInfo::reader_gid_seq()
{
    return m_reader_gid_seq;
}
/*!
 * @brief This function copies the value in member writer_gid_seq
 * @param _writer_gid_seq New value to be copied in member writer_gid_seq
 */
void rmw_dds_common::msg::NodeEntitiesInfo::writer_gid_seq(
        const std::vector<rmw_dds_common::msg::Gid>& _writer_gid_seq)
{
    m_writer_gid_seq = _writer_gid_seq;
}

/*!
 * @brief This function moves the value in member writer_gid_seq
 * @param _writer_gid_seq New value to be moved in member writer_gid_seq
 */
void rmw_dds_common::msg::NodeEntitiesInfo::writer_gid_seq(
        std::vector<rmw_dds_common::msg::Gid>&& _writer_gid_seq)
{
    m_writer_gid_seq = std::move(_writer_gid_seq);
}

/*!
 * @brief This function returns a constant reference to member writer_gid_seq
 * @return Constant reference to member writer_gid_seq
 */
const std::vector<rmw_dds_common::msg::Gid>& rmw_dds_common::msg::NodeEntitiesInfo::writer_gid_seq() const
{
    return m_writer_gid_seq;
}

/*!
 * @brief This function returns a reference to member writer_gid_seq
 * @return Reference to member writer_gid_seq
 */
std::vector<rmw_dds_common::msg::Gid>& rmw_dds_common::msg::NodeEntitiesInfo::writer_gid_seq()
{
    return m_writer_gid_seq;
}


size_t rmw_dds_common::msg::NodeEntitiesInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return rmw_dds_common_msg_NodeEntitiesInfo_max_key_cdr_typesize;
}

bool rmw_dds_common::msg::NodeEntitiesInfo::isKeyDefined()
{
    return false;
}

void rmw_dds_common::msg::NodeEntitiesInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


