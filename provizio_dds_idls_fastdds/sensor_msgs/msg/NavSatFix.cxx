// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavSatFix.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NavSatFix.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


sensor_msgs::msg::NavSatFix::NavSatFix()
{

}

sensor_msgs::msg::NavSatFix::~NavSatFix()
{
}

sensor_msgs::msg::NavSatFix::NavSatFix(
        const NavSatFix& x)
{
    m_header = x.m_header;
    m_status = x.m_status;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;
    m_position_covariance = x.m_position_covariance;
    m_position_covariance_type = x.m_position_covariance_type;
}

sensor_msgs::msg::NavSatFix::NavSatFix(
        NavSatFix&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_status = std::move(x.m_status);
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;
    m_position_covariance = std::move(x.m_position_covariance);
    m_position_covariance_type = x.m_position_covariance_type;
}

sensor_msgs::msg::NavSatFix& sensor_msgs::msg::NavSatFix::operator =(
        const NavSatFix& x)
{

    m_header = x.m_header;
    m_status = x.m_status;
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;
    m_position_covariance = x.m_position_covariance;
    m_position_covariance_type = x.m_position_covariance_type;

    return *this;
}

sensor_msgs::msg::NavSatFix& sensor_msgs::msg::NavSatFix::operator =(
        NavSatFix&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_status = std::move(x.m_status);
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;
    m_position_covariance = std::move(x.m_position_covariance);
    m_position_covariance_type = x.m_position_covariance_type;

    return *this;
}

bool sensor_msgs::msg::NavSatFix::operator ==(
        const NavSatFix& x) const
{
    return (m_header == x.m_header &&
           m_status == x.m_status &&
           m_latitude == x.m_latitude &&
           m_longitude == x.m_longitude &&
           m_altitude == x.m_altitude &&
           m_position_covariance == x.m_position_covariance &&
           m_position_covariance_type == x.m_position_covariance_type);
}

bool sensor_msgs::msg::NavSatFix::operator !=(
        const NavSatFix& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::NavSatFix::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::NavSatFix::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::NavSatFix::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::NavSatFix::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member status
 * @param _status New value to be copied in member status
 */
void sensor_msgs::msg::NavSatFix::status(
        const sensor_msgs::msg::NavSatStatus& _status)
{
    m_status = _status;
}

/*!
 * @brief This function moves the value in member status
 * @param _status New value to be moved in member status
 */
void sensor_msgs::msg::NavSatFix::status(
        sensor_msgs::msg::NavSatStatus&& _status)
{
    m_status = std::move(_status);
}

/*!
 * @brief This function returns a constant reference to member status
 * @return Constant reference to member status
 */
const sensor_msgs::msg::NavSatStatus& sensor_msgs::msg::NavSatFix::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
sensor_msgs::msg::NavSatStatus& sensor_msgs::msg::NavSatFix::status()
{
    return m_status;
}


/*!
 * @brief This function sets a value in member latitude
 * @param _latitude New value for member latitude
 */
void sensor_msgs::msg::NavSatFix::latitude(
        double _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function returns the value of member latitude
 * @return Value of member latitude
 */
double sensor_msgs::msg::NavSatFix::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude
 * @return Reference to member latitude
 */
double& sensor_msgs::msg::NavSatFix::latitude()
{
    return m_latitude;
}


/*!
 * @brief This function sets a value in member longitude
 * @param _longitude New value for member longitude
 */
void sensor_msgs::msg::NavSatFix::longitude(
        double _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function returns the value of member longitude
 * @return Value of member longitude
 */
double sensor_msgs::msg::NavSatFix::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude
 * @return Reference to member longitude
 */
double& sensor_msgs::msg::NavSatFix::longitude()
{
    return m_longitude;
}


/*!
 * @brief This function sets a value in member altitude
 * @param _altitude New value for member altitude
 */
void sensor_msgs::msg::NavSatFix::altitude(
        double _altitude)
{
    m_altitude = _altitude;
}

/*!
 * @brief This function returns the value of member altitude
 * @return Value of member altitude
 */
double sensor_msgs::msg::NavSatFix::altitude() const
{
    return m_altitude;
}

/*!
 * @brief This function returns a reference to member altitude
 * @return Reference to member altitude
 */
double& sensor_msgs::msg::NavSatFix::altitude()
{
    return m_altitude;
}


/*!
 * @brief This function copies the value in member position_covariance
 * @param _position_covariance New value to be copied in member position_covariance
 */
void sensor_msgs::msg::NavSatFix::position_covariance(
        const sensor_msgs::msg::double__9& _position_covariance)
{
    m_position_covariance = _position_covariance;
}

/*!
 * @brief This function moves the value in member position_covariance
 * @param _position_covariance New value to be moved in member position_covariance
 */
void sensor_msgs::msg::NavSatFix::position_covariance(
        sensor_msgs::msg::double__9&& _position_covariance)
{
    m_position_covariance = std::move(_position_covariance);
}

/*!
 * @brief This function returns a constant reference to member position_covariance
 * @return Constant reference to member position_covariance
 */
const sensor_msgs::msg::double__9& sensor_msgs::msg::NavSatFix::position_covariance() const
{
    return m_position_covariance;
}

/*!
 * @brief This function returns a reference to member position_covariance
 * @return Reference to member position_covariance
 */
sensor_msgs::msg::double__9& sensor_msgs::msg::NavSatFix::position_covariance()
{
    return m_position_covariance;
}


/*!
 * @brief This function sets a value in member position_covariance_type
 * @param _position_covariance_type New value for member position_covariance_type
 */
void sensor_msgs::msg::NavSatFix::position_covariance_type(
        uint8_t _position_covariance_type)
{
    m_position_covariance_type = _position_covariance_type;
}

/*!
 * @brief This function returns the value of member position_covariance_type
 * @return Value of member position_covariance_type
 */
uint8_t sensor_msgs::msg::NavSatFix::position_covariance_type() const
{
    return m_position_covariance_type;
}

/*!
 * @brief This function returns a reference to member position_covariance_type
 * @return Reference to member position_covariance_type
 */
uint8_t& sensor_msgs::msg::NavSatFix::position_covariance_type()
{
    return m_position_covariance_type;
}




// Include auxiliary functions like for serializing/deserializing.
#include "NavSatFixCdrAux.ipp"
