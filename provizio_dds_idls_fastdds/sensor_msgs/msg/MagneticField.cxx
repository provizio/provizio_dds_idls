// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MagneticField.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MagneticField.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define geometry_msgs_msg_Vector3_max_cdr_typesize 24ULL;
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;

#define sensor_msgs_msg_MagneticField_max_cdr_typesize 376ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define geometry_msgs_msg_Vector3_max_key_cdr_typesize 0ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;

#define sensor_msgs_msg_MagneticField_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;


sensor_msgs::msg::MagneticField::MagneticField()
{
    // std_msgs::msg::Header m_header

    // geometry_msgs::msg::Vector3 m_magnetic_field

    // sensor_msgs::msg::double__9 m_magnetic_field_covariance
    memset(&m_magnetic_field_covariance, 0, (9) * 8);

}

sensor_msgs::msg::MagneticField::~MagneticField()
{



}

sensor_msgs::msg::MagneticField::MagneticField(
        const MagneticField& x)
{
    m_header = x.m_header;
    m_magnetic_field = x.m_magnetic_field;
    m_magnetic_field_covariance = x.m_magnetic_field_covariance;
}

sensor_msgs::msg::MagneticField::MagneticField(
        MagneticField&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_magnetic_field = std::move(x.m_magnetic_field);
    m_magnetic_field_covariance = std::move(x.m_magnetic_field_covariance);
}

sensor_msgs::msg::MagneticField& sensor_msgs::msg::MagneticField::operator =(
        const MagneticField& x)
{

    m_header = x.m_header;
    m_magnetic_field = x.m_magnetic_field;
    m_magnetic_field_covariance = x.m_magnetic_field_covariance;

    return *this;
}

sensor_msgs::msg::MagneticField& sensor_msgs::msg::MagneticField::operator =(
        MagneticField&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_magnetic_field = std::move(x.m_magnetic_field);
    m_magnetic_field_covariance = std::move(x.m_magnetic_field_covariance);

    return *this;
}

bool sensor_msgs::msg::MagneticField::operator ==(
        const MagneticField& x) const
{

    return (m_header == x.m_header && m_magnetic_field == x.m_magnetic_field && m_magnetic_field_covariance == x.m_magnetic_field_covariance);
}

bool sensor_msgs::msg::MagneticField::operator !=(
        const MagneticField& x) const
{
    return !(*this == x);
}

size_t sensor_msgs::msg::MagneticField::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_MagneticField_max_cdr_typesize;
}

size_t sensor_msgs::msg::MagneticField::getCdrSerializedSize(
        const sensor_msgs::msg::MagneticField& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.magnetic_field(), current_alignment);
    if ((9) > 0)
    {
        current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }


    return current_alignment - initial_alignment;
}

void sensor_msgs::msg::MagneticField::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_magnetic_field;
    scdr << m_magnetic_field_covariance;


}

void sensor_msgs::msg::MagneticField::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_magnetic_field;
    dcdr >> m_magnetic_field_covariance;

}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::MagneticField::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::MagneticField::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::MagneticField::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::MagneticField::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member magnetic_field
 * @param _magnetic_field New value to be copied in member magnetic_field
 */
void sensor_msgs::msg::MagneticField::magnetic_field(
        const geometry_msgs::msg::Vector3& _magnetic_field)
{
    m_magnetic_field = _magnetic_field;
}

/*!
 * @brief This function moves the value in member magnetic_field
 * @param _magnetic_field New value to be moved in member magnetic_field
 */
void sensor_msgs::msg::MagneticField::magnetic_field(
        geometry_msgs::msg::Vector3&& _magnetic_field)
{
    m_magnetic_field = std::move(_magnetic_field);
}

/*!
 * @brief This function returns a constant reference to member magnetic_field
 * @return Constant reference to member magnetic_field
 */
const geometry_msgs::msg::Vector3& sensor_msgs::msg::MagneticField::magnetic_field() const
{
    return m_magnetic_field;
}

/*!
 * @brief This function returns a reference to member magnetic_field
 * @return Reference to member magnetic_field
 */
geometry_msgs::msg::Vector3& sensor_msgs::msg::MagneticField::magnetic_field()
{
    return m_magnetic_field;
}
/*!
 * @brief This function copies the value in member magnetic_field_covariance
 * @param _magnetic_field_covariance New value to be copied in member magnetic_field_covariance
 */
void sensor_msgs::msg::MagneticField::magnetic_field_covariance(
        const sensor_msgs::msg::double__9& _magnetic_field_covariance)
{
    m_magnetic_field_covariance = _magnetic_field_covariance;
}

/*!
 * @brief This function moves the value in member magnetic_field_covariance
 * @param _magnetic_field_covariance New value to be moved in member magnetic_field_covariance
 */
void sensor_msgs::msg::MagneticField::magnetic_field_covariance(
        sensor_msgs::msg::double__9&& _magnetic_field_covariance)
{
    m_magnetic_field_covariance = std::move(_magnetic_field_covariance);
}

/*!
 * @brief This function returns a constant reference to member magnetic_field_covariance
 * @return Constant reference to member magnetic_field_covariance
 */
const sensor_msgs::msg::double__9& sensor_msgs::msg::MagneticField::magnetic_field_covariance() const
{
    return m_magnetic_field_covariance;
}

/*!
 * @brief This function returns a reference to member magnetic_field_covariance
 * @return Reference to member magnetic_field_covariance
 */
sensor_msgs::msg::double__9& sensor_msgs::msg::MagneticField::magnetic_field_covariance()
{
    return m_magnetic_field_covariance;
}


size_t sensor_msgs::msg::MagneticField::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_MagneticField_max_key_cdr_typesize;
}

bool sensor_msgs::msg::MagneticField::isKeyDefined()
{
    return false;
}

void sensor_msgs::msg::MagneticField::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


