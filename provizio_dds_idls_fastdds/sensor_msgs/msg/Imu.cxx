// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Imu.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Imu.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


sensor_msgs::msg::Imu::Imu()
{

}

sensor_msgs::msg::Imu::~Imu()
{
}

sensor_msgs::msg::Imu::Imu(
        const Imu& x)
{
    m_header = x.m_header;
    m_orientation = x.m_orientation;
    m_orientation_covariance = x.m_orientation_covariance;
    m_angular_velocity = x.m_angular_velocity;
    m_angular_velocity_covariance = x.m_angular_velocity_covariance;
    m_linear_acceleration = x.m_linear_acceleration;
    m_linear_acceleration_covariance = x.m_linear_acceleration_covariance;
}

sensor_msgs::msg::Imu::Imu(
        Imu&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_orientation = std::move(x.m_orientation);
    m_orientation_covariance = std::move(x.m_orientation_covariance);
    m_angular_velocity = std::move(x.m_angular_velocity);
    m_angular_velocity_covariance = std::move(x.m_angular_velocity_covariance);
    m_linear_acceleration = std::move(x.m_linear_acceleration);
    m_linear_acceleration_covariance = std::move(x.m_linear_acceleration_covariance);
}

sensor_msgs::msg::Imu& sensor_msgs::msg::Imu::operator =(
        const Imu& x)
{

    m_header = x.m_header;
    m_orientation = x.m_orientation;
    m_orientation_covariance = x.m_orientation_covariance;
    m_angular_velocity = x.m_angular_velocity;
    m_angular_velocity_covariance = x.m_angular_velocity_covariance;
    m_linear_acceleration = x.m_linear_acceleration;
    m_linear_acceleration_covariance = x.m_linear_acceleration_covariance;

    return *this;
}

sensor_msgs::msg::Imu& sensor_msgs::msg::Imu::operator =(
        Imu&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_orientation = std::move(x.m_orientation);
    m_orientation_covariance = std::move(x.m_orientation_covariance);
    m_angular_velocity = std::move(x.m_angular_velocity);
    m_angular_velocity_covariance = std::move(x.m_angular_velocity_covariance);
    m_linear_acceleration = std::move(x.m_linear_acceleration);
    m_linear_acceleration_covariance = std::move(x.m_linear_acceleration_covariance);

    return *this;
}

bool sensor_msgs::msg::Imu::operator ==(
        const Imu& x) const
{
    return (m_header == x.m_header &&
           m_orientation == x.m_orientation &&
           m_orientation_covariance == x.m_orientation_covariance &&
           m_angular_velocity == x.m_angular_velocity &&
           m_angular_velocity_covariance == x.m_angular_velocity_covariance &&
           m_linear_acceleration == x.m_linear_acceleration &&
           m_linear_acceleration_covariance == x.m_linear_acceleration_covariance);
}

bool sensor_msgs::msg::Imu::operator !=(
        const Imu& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::Imu::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::Imu::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::Imu::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::Imu::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member orientation
 * @param _orientation New value to be copied in member orientation
 */
void sensor_msgs::msg::Imu::orientation(
        const geometry_msgs::msg::Quaternion& _orientation)
{
    m_orientation = _orientation;
}

/*!
 * @brief This function moves the value in member orientation
 * @param _orientation New value to be moved in member orientation
 */
void sensor_msgs::msg::Imu::orientation(
        geometry_msgs::msg::Quaternion&& _orientation)
{
    m_orientation = std::move(_orientation);
}

/*!
 * @brief This function returns a constant reference to member orientation
 * @return Constant reference to member orientation
 */
const geometry_msgs::msg::Quaternion& sensor_msgs::msg::Imu::orientation() const
{
    return m_orientation;
}

/*!
 * @brief This function returns a reference to member orientation
 * @return Reference to member orientation
 */
geometry_msgs::msg::Quaternion& sensor_msgs::msg::Imu::orientation()
{
    return m_orientation;
}


/*!
 * @brief This function copies the value in member orientation_covariance
 * @param _orientation_covariance New value to be copied in member orientation_covariance
 */
void sensor_msgs::msg::Imu::orientation_covariance(
        const sensor_msgs::msg::double__9& _orientation_covariance)
{
    m_orientation_covariance = _orientation_covariance;
}

/*!
 * @brief This function moves the value in member orientation_covariance
 * @param _orientation_covariance New value to be moved in member orientation_covariance
 */
void sensor_msgs::msg::Imu::orientation_covariance(
        sensor_msgs::msg::double__9&& _orientation_covariance)
{
    m_orientation_covariance = std::move(_orientation_covariance);
}

/*!
 * @brief This function returns a constant reference to member orientation_covariance
 * @return Constant reference to member orientation_covariance
 */
const sensor_msgs::msg::double__9& sensor_msgs::msg::Imu::orientation_covariance() const
{
    return m_orientation_covariance;
}

/*!
 * @brief This function returns a reference to member orientation_covariance
 * @return Reference to member orientation_covariance
 */
sensor_msgs::msg::double__9& sensor_msgs::msg::Imu::orientation_covariance()
{
    return m_orientation_covariance;
}


/*!
 * @brief This function copies the value in member angular_velocity
 * @param _angular_velocity New value to be copied in member angular_velocity
 */
void sensor_msgs::msg::Imu::angular_velocity(
        const geometry_msgs::msg::Vector3& _angular_velocity)
{
    m_angular_velocity = _angular_velocity;
}

/*!
 * @brief This function moves the value in member angular_velocity
 * @param _angular_velocity New value to be moved in member angular_velocity
 */
void sensor_msgs::msg::Imu::angular_velocity(
        geometry_msgs::msg::Vector3&& _angular_velocity)
{
    m_angular_velocity = std::move(_angular_velocity);
}

/*!
 * @brief This function returns a constant reference to member angular_velocity
 * @return Constant reference to member angular_velocity
 */
const geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::angular_velocity() const
{
    return m_angular_velocity;
}

/*!
 * @brief This function returns a reference to member angular_velocity
 * @return Reference to member angular_velocity
 */
geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::angular_velocity()
{
    return m_angular_velocity;
}


/*!
 * @brief This function copies the value in member angular_velocity_covariance
 * @param _angular_velocity_covariance New value to be copied in member angular_velocity_covariance
 */
void sensor_msgs::msg::Imu::angular_velocity_covariance(
        const sensor_msgs::msg::double__9& _angular_velocity_covariance)
{
    m_angular_velocity_covariance = _angular_velocity_covariance;
}

/*!
 * @brief This function moves the value in member angular_velocity_covariance
 * @param _angular_velocity_covariance New value to be moved in member angular_velocity_covariance
 */
void sensor_msgs::msg::Imu::angular_velocity_covariance(
        sensor_msgs::msg::double__9&& _angular_velocity_covariance)
{
    m_angular_velocity_covariance = std::move(_angular_velocity_covariance);
}

/*!
 * @brief This function returns a constant reference to member angular_velocity_covariance
 * @return Constant reference to member angular_velocity_covariance
 */
const sensor_msgs::msg::double__9& sensor_msgs::msg::Imu::angular_velocity_covariance() const
{
    return m_angular_velocity_covariance;
}

/*!
 * @brief This function returns a reference to member angular_velocity_covariance
 * @return Reference to member angular_velocity_covariance
 */
sensor_msgs::msg::double__9& sensor_msgs::msg::Imu::angular_velocity_covariance()
{
    return m_angular_velocity_covariance;
}


/*!
 * @brief This function copies the value in member linear_acceleration
 * @param _linear_acceleration New value to be copied in member linear_acceleration
 */
void sensor_msgs::msg::Imu::linear_acceleration(
        const geometry_msgs::msg::Vector3& _linear_acceleration)
{
    m_linear_acceleration = _linear_acceleration;
}

/*!
 * @brief This function moves the value in member linear_acceleration
 * @param _linear_acceleration New value to be moved in member linear_acceleration
 */
void sensor_msgs::msg::Imu::linear_acceleration(
        geometry_msgs::msg::Vector3&& _linear_acceleration)
{
    m_linear_acceleration = std::move(_linear_acceleration);
}

/*!
 * @brief This function returns a constant reference to member linear_acceleration
 * @return Constant reference to member linear_acceleration
 */
const geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::linear_acceleration() const
{
    return m_linear_acceleration;
}

/*!
 * @brief This function returns a reference to member linear_acceleration
 * @return Reference to member linear_acceleration
 */
geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::linear_acceleration()
{
    return m_linear_acceleration;
}


/*!
 * @brief This function copies the value in member linear_acceleration_covariance
 * @param _linear_acceleration_covariance New value to be copied in member linear_acceleration_covariance
 */
void sensor_msgs::msg::Imu::linear_acceleration_covariance(
        const sensor_msgs::msg::double__9& _linear_acceleration_covariance)
{
    m_linear_acceleration_covariance = _linear_acceleration_covariance;
}

/*!
 * @brief This function moves the value in member linear_acceleration_covariance
 * @param _linear_acceleration_covariance New value to be moved in member linear_acceleration_covariance
 */
void sensor_msgs::msg::Imu::linear_acceleration_covariance(
        sensor_msgs::msg::double__9&& _linear_acceleration_covariance)
{
    m_linear_acceleration_covariance = std::move(_linear_acceleration_covariance);
}

/*!
 * @brief This function returns a constant reference to member linear_acceleration_covariance
 * @return Constant reference to member linear_acceleration_covariance
 */
const sensor_msgs::msg::double__9& sensor_msgs::msg::Imu::linear_acceleration_covariance() const
{
    return m_linear_acceleration_covariance;
}

/*!
 * @brief This function returns a reference to member linear_acceleration_covariance
 * @return Reference to member linear_acceleration_covariance
 */
sensor_msgs::msg::double__9& sensor_msgs::msg::Imu::linear_acceleration_covariance()
{
    return m_linear_acceleration_covariance;
}




// Include auxiliary functions like for serializing/deserializing.
#include "ImuCdrAux.ipp"
