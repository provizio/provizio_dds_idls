// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PointCloud.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PointCloud.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


sensor_msgs::msg::PointCloud::PointCloud()
{

}

sensor_msgs::msg::PointCloud::~PointCloud()
{
}

sensor_msgs::msg::PointCloud::PointCloud(
        const PointCloud& x)
{
    m_header = x.m_header;
    m_points = x.m_points;
    m_channels = x.m_channels;
}

sensor_msgs::msg::PointCloud::PointCloud(
        PointCloud&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_points = std::move(x.m_points);
    m_channels = std::move(x.m_channels);
}

sensor_msgs::msg::PointCloud& sensor_msgs::msg::PointCloud::operator =(
        const PointCloud& x)
{

    m_header = x.m_header;
    m_points = x.m_points;
    m_channels = x.m_channels;

    return *this;
}

sensor_msgs::msg::PointCloud& sensor_msgs::msg::PointCloud::operator =(
        PointCloud&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_points = std::move(x.m_points);
    m_channels = std::move(x.m_channels);

    return *this;
}

bool sensor_msgs::msg::PointCloud::operator ==(
        const PointCloud& x) const
{
    return (m_header == x.m_header &&
           m_points == x.m_points &&
           m_channels == x.m_channels);
}

bool sensor_msgs::msg::PointCloud::operator !=(
        const PointCloud& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::PointCloud::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::PointCloud::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::PointCloud::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::PointCloud::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member points
 * @param _points New value to be copied in member points
 */
void sensor_msgs::msg::PointCloud::points(
        const std::vector<geometry_msgs::msg::Point32>& _points)
{
    m_points = _points;
}

/*!
 * @brief This function moves the value in member points
 * @param _points New value to be moved in member points
 */
void sensor_msgs::msg::PointCloud::points(
        std::vector<geometry_msgs::msg::Point32>&& _points)
{
    m_points = std::move(_points);
}

/*!
 * @brief This function returns a constant reference to member points
 * @return Constant reference to member points
 */
const std::vector<geometry_msgs::msg::Point32>& sensor_msgs::msg::PointCloud::points() const
{
    return m_points;
}

/*!
 * @brief This function returns a reference to member points
 * @return Reference to member points
 */
std::vector<geometry_msgs::msg::Point32>& sensor_msgs::msg::PointCloud::points()
{
    return m_points;
}


/*!
 * @brief This function copies the value in member channels
 * @param _channels New value to be copied in member channels
 */
void sensor_msgs::msg::PointCloud::channels(
        const std::vector<sensor_msgs::msg::ChannelFloat32>& _channels)
{
    m_channels = _channels;
}

/*!
 * @brief This function moves the value in member channels
 * @param _channels New value to be moved in member channels
 */
void sensor_msgs::msg::PointCloud::channels(
        std::vector<sensor_msgs::msg::ChannelFloat32>&& _channels)
{
    m_channels = std::move(_channels);
}

/*!
 * @brief This function returns a constant reference to member channels
 * @return Constant reference to member channels
 */
const std::vector<sensor_msgs::msg::ChannelFloat32>& sensor_msgs::msg::PointCloud::channels() const
{
    return m_channels;
}

/*!
 * @brief This function returns a reference to member channels
 * @return Reference to member channels
 */
std::vector<sensor_msgs::msg::ChannelFloat32>& sensor_msgs::msg::PointCloud::channels()
{
    return m_channels;
}




// Include auxiliary functions like for serializing/deserializing.
#include "PointCloudCdrAux.ipp"
