// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TimeReference.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TimeReference.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


sensor_msgs::msg::TimeReference::TimeReference()
{

}

sensor_msgs::msg::TimeReference::~TimeReference()
{
}

sensor_msgs::msg::TimeReference::TimeReference(
        const TimeReference& x)
{
    m_header = x.m_header;
    m_time_ref = x.m_time_ref;
    m_source = x.m_source;
}

sensor_msgs::msg::TimeReference::TimeReference(
        TimeReference&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_time_ref = std::move(x.m_time_ref);
    m_source = std::move(x.m_source);
}

sensor_msgs::msg::TimeReference& sensor_msgs::msg::TimeReference::operator =(
        const TimeReference& x)
{

    m_header = x.m_header;
    m_time_ref = x.m_time_ref;
    m_source = x.m_source;

    return *this;
}

sensor_msgs::msg::TimeReference& sensor_msgs::msg::TimeReference::operator =(
        TimeReference&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_time_ref = std::move(x.m_time_ref);
    m_source = std::move(x.m_source);

    return *this;
}

bool sensor_msgs::msg::TimeReference::operator ==(
        const TimeReference& x) const
{
    return (m_header == x.m_header &&
           m_time_ref == x.m_time_ref &&
           m_source == x.m_source);
}

bool sensor_msgs::msg::TimeReference::operator !=(
        const TimeReference& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::TimeReference::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::TimeReference::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::TimeReference::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::TimeReference::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member time_ref
 * @param _time_ref New value to be copied in member time_ref
 */
void sensor_msgs::msg::TimeReference::time_ref(
        const builtin_interfaces::msg::Time& _time_ref)
{
    m_time_ref = _time_ref;
}

/*!
 * @brief This function moves the value in member time_ref
 * @param _time_ref New value to be moved in member time_ref
 */
void sensor_msgs::msg::TimeReference::time_ref(
        builtin_interfaces::msg::Time&& _time_ref)
{
    m_time_ref = std::move(_time_ref);
}

/*!
 * @brief This function returns a constant reference to member time_ref
 * @return Constant reference to member time_ref
 */
const builtin_interfaces::msg::Time& sensor_msgs::msg::TimeReference::time_ref() const
{
    return m_time_ref;
}

/*!
 * @brief This function returns a reference to member time_ref
 * @return Reference to member time_ref
 */
builtin_interfaces::msg::Time& sensor_msgs::msg::TimeReference::time_ref()
{
    return m_time_ref;
}


/*!
 * @brief This function copies the value in member source
 * @param _source New value to be copied in member source
 */
void sensor_msgs::msg::TimeReference::source(
        const std::string& _source)
{
    m_source = _source;
}

/*!
 * @brief This function moves the value in member source
 * @param _source New value to be moved in member source
 */
void sensor_msgs::msg::TimeReference::source(
        std::string&& _source)
{
    m_source = std::move(_source);
}

/*!
 * @brief This function returns a constant reference to member source
 * @return Constant reference to member source
 */
const std::string& sensor_msgs::msg::TimeReference::source() const
{
    return m_source;
}

/*!
 * @brief This function returns a reference to member source
 * @return Reference to member source
 */
std::string& sensor_msgs::msg::TimeReference::source()
{
    return m_source;
}




// Include auxiliary functions like for serializing/deserializing.
#include "TimeReferenceCdrAux.ipp"
