// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoadNode.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

%module LoadNode

// SWIG helper modules
%include "stdint.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_array.i"
%include "std_map.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define RTPS_DllAPI
#define eProsima_user_DllExport

%include "rcl_interfaces/msg/Parameter.i"

%{
#include "LoadNode.h"

#include <fastdds/dds/core/LoanableSequence.hpp>
%}

%import(module="fastdds") "fastdds/dds/core/LoanableCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableTypedCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableSequence.hpp"

// Include the class interfaces
%include "LoadNode.h"

////////////////////////////////////////////////////////
// Binding for class composition_interfaces::srv::LoadNode_Request
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore composition_interfaces::srv::LoadNode_Request::LoadNode_Request(LoadNode_Request&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore composition_interfaces::srv::LoadNode_Request::package_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::package_name();
%rename("%s") composition_interfaces::srv::LoadNode_Request::package_name() const;

%ignore composition_interfaces::srv::LoadNode_Request::plugin_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::plugin_name();
%rename("%s") composition_interfaces::srv::LoadNode_Request::plugin_name() const;

%ignore composition_interfaces::srv::LoadNode_Request::node_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::node_name();
%rename("%s") composition_interfaces::srv::LoadNode_Request::node_name() const;

%ignore composition_interfaces::srv::LoadNode_Request::node_namespace(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::node_namespace();
%rename("%s") composition_interfaces::srv::LoadNode_Request::node_namespace() const;

%ignore composition_interfaces::srv::LoadNode_Request::log_level(uint8_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::log_level();
%rename("%s") composition_interfaces::srv::LoadNode_Request::log_level() const;

%ignore composition_interfaces::srv::LoadNode_Request::remap_rules(std::vector<std::string>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::remap_rules() const;
%template(char_vector) std::vector<std::string>;

%ignore composition_interfaces::srv::LoadNode_Request::parameters(std::vector<rcl_interfaces::msg::Parameter>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::parameters() const;
%template(rcl_interfaces_msg_Parameter_vector) std::vector<rcl_interfaces::msg::Parameter>;

%ignore composition_interfaces::srv::LoadNode_Request::extra_arguments(std::vector<rcl_interfaces::msg::Parameter>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Request::extra_arguments() const;
%template(rcl_interfaces_msg_Parameter_vector) std::vector<rcl_interfaces::msg::Parameter>;


%template(_LoadNode_RequestSeq) eprosima::fastdds::dds::LoanableTypedCollection<composition_interfaces::srv::LoadNode_Request, std::false_type>;
%template(LoadNode_RequestSeq) eprosima::fastdds::dds::LoanableSequence<composition_interfaces::srv::LoadNode_Request, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<composition_interfaces::srv::LoadNode_Request, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const composition_interfaces::srv::LoadNode_Request& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class composition_interfaces::srv::LoadNode_Response
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore composition_interfaces::srv::LoadNode_Response::LoadNode_Response(LoadNode_Response&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore composition_interfaces::srv::LoadNode_Response::success(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Response::success();
%rename("%s") composition_interfaces::srv::LoadNode_Response::success() const;

%ignore composition_interfaces::srv::LoadNode_Response::error_message(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Response::error_message();
%rename("%s") composition_interfaces::srv::LoadNode_Response::error_message() const;

%ignore composition_interfaces::srv::LoadNode_Response::full_node_name(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Response::full_node_name();
%rename("%s") composition_interfaces::srv::LoadNode_Response::full_node_name() const;

%ignore composition_interfaces::srv::LoadNode_Response::unique_id(uint64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore composition_interfaces::srv::LoadNode_Response::unique_id();
%rename("%s") composition_interfaces::srv::LoadNode_Response::unique_id() const;


%template(_LoadNode_ResponseSeq) eprosima::fastdds::dds::LoanableTypedCollection<composition_interfaces::srv::LoadNode_Response, std::false_type>;
%template(LoadNode_ResponseSeq) eprosima::fastdds::dds::LoanableSequence<composition_interfaces::srv::LoadNode_Response, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<composition_interfaces::srv::LoadNode_Response, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const composition_interfaces::srv::LoadNode_Response& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}


// Include the corresponding TopicDataType
%include "LoadNodePubSubTypes.i"
