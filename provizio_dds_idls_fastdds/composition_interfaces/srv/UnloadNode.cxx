// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UnloadNode.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UnloadNode.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define composition_interfaces_srv_UnloadNode_Response_max_cdr_typesize 264ULL;
#define composition_interfaces_srv_UnloadNode_Request_max_cdr_typesize 8ULL;
#define composition_interfaces_srv_UnloadNode_Response_max_key_cdr_typesize 0ULL;
#define composition_interfaces_srv_UnloadNode_Request_max_key_cdr_typesize 0ULL;

composition_interfaces::srv::UnloadNode_Request::UnloadNode_Request()
{
    // unsigned long long m_unique_id
    m_unique_id = 0;

}

composition_interfaces::srv::UnloadNode_Request::~UnloadNode_Request()
{
}

composition_interfaces::srv::UnloadNode_Request::UnloadNode_Request(
        const UnloadNode_Request& x)
{
    m_unique_id = x.m_unique_id;
}

composition_interfaces::srv::UnloadNode_Request::UnloadNode_Request(
        UnloadNode_Request&& x) noexcept 
{
    m_unique_id = x.m_unique_id;
}

composition_interfaces::srv::UnloadNode_Request& composition_interfaces::srv::UnloadNode_Request::operator =(
        const UnloadNode_Request& x)
{

    m_unique_id = x.m_unique_id;

    return *this;
}

composition_interfaces::srv::UnloadNode_Request& composition_interfaces::srv::UnloadNode_Request::operator =(
        UnloadNode_Request&& x) noexcept
{

    m_unique_id = x.m_unique_id;

    return *this;
}

bool composition_interfaces::srv::UnloadNode_Request::operator ==(
        const UnloadNode_Request& x) const
{

    return (m_unique_id == x.m_unique_id);
}

bool composition_interfaces::srv::UnloadNode_Request::operator !=(
        const UnloadNode_Request& x) const
{
    return !(*this == x);
}

size_t composition_interfaces::srv::UnloadNode_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return composition_interfaces_srv_UnloadNode_Request_max_cdr_typesize;
}

size_t composition_interfaces::srv::UnloadNode_Request::getCdrSerializedSize(
        const composition_interfaces::srv::UnloadNode_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void composition_interfaces::srv::UnloadNode_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_unique_id;

}

void composition_interfaces::srv::UnloadNode_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_unique_id;
}

/*!
 * @brief This function sets a value in member unique_id
 * @param _unique_id New value for member unique_id
 */
void composition_interfaces::srv::UnloadNode_Request::unique_id(
        uint64_t _unique_id)
{
    m_unique_id = _unique_id;
}

/*!
 * @brief This function returns the value of member unique_id
 * @return Value of member unique_id
 */
uint64_t composition_interfaces::srv::UnloadNode_Request::unique_id() const
{
    return m_unique_id;
}

/*!
 * @brief This function returns a reference to member unique_id
 * @return Reference to member unique_id
 */
uint64_t& composition_interfaces::srv::UnloadNode_Request::unique_id()
{
    return m_unique_id;
}



size_t composition_interfaces::srv::UnloadNode_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return composition_interfaces_srv_UnloadNode_Request_max_key_cdr_typesize;
}

bool composition_interfaces::srv::UnloadNode_Request::isKeyDefined()
{
    return false;
}

void composition_interfaces::srv::UnloadNode_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

composition_interfaces::srv::UnloadNode_Response::UnloadNode_Response()
{
    // boolean m_success
    m_success = false;
    // string m_error_message
    m_error_message ="";

}

composition_interfaces::srv::UnloadNode_Response::~UnloadNode_Response()
{


}

composition_interfaces::srv::UnloadNode_Response::UnloadNode_Response(
        const UnloadNode_Response& x)
{
    m_success = x.m_success;
    m_error_message = x.m_error_message;
}

composition_interfaces::srv::UnloadNode_Response::UnloadNode_Response(
        UnloadNode_Response&& x) noexcept 
{
    m_success = x.m_success;
    m_error_message = std::move(x.m_error_message);
}

composition_interfaces::srv::UnloadNode_Response& composition_interfaces::srv::UnloadNode_Response::operator =(
        const UnloadNode_Response& x)
{

    m_success = x.m_success;
    m_error_message = x.m_error_message;

    return *this;
}

composition_interfaces::srv::UnloadNode_Response& composition_interfaces::srv::UnloadNode_Response::operator =(
        UnloadNode_Response&& x) noexcept
{

    m_success = x.m_success;
    m_error_message = std::move(x.m_error_message);

    return *this;
}

bool composition_interfaces::srv::UnloadNode_Response::operator ==(
        const UnloadNode_Response& x) const
{

    return (m_success == x.m_success && m_error_message == x.m_error_message);
}

bool composition_interfaces::srv::UnloadNode_Response::operator !=(
        const UnloadNode_Response& x) const
{
    return !(*this == x);
}

size_t composition_interfaces::srv::UnloadNode_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return composition_interfaces_srv_UnloadNode_Response_max_cdr_typesize;
}

size_t composition_interfaces::srv::UnloadNode_Response::getCdrSerializedSize(
        const composition_interfaces::srv::UnloadNode_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.error_message().size() + 1;


    return current_alignment - initial_alignment;
}

void composition_interfaces::srv::UnloadNode_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_success;
    scdr << m_error_message.c_str();

}

void composition_interfaces::srv::UnloadNode_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_success;
    dcdr >> m_error_message;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void composition_interfaces::srv::UnloadNode_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool composition_interfaces::srv::UnloadNode_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& composition_interfaces::srv::UnloadNode_Response::success()
{
    return m_success;
}

/*!
 * @brief This function copies the value in member error_message
 * @param _error_message New value to be copied in member error_message
 */
void composition_interfaces::srv::UnloadNode_Response::error_message(
        const std::string& _error_message)
{
    m_error_message = _error_message;
}

/*!
 * @brief This function moves the value in member error_message
 * @param _error_message New value to be moved in member error_message
 */
void composition_interfaces::srv::UnloadNode_Response::error_message(
        std::string&& _error_message)
{
    m_error_message = std::move(_error_message);
}

/*!
 * @brief This function returns a constant reference to member error_message
 * @return Constant reference to member error_message
 */
const std::string& composition_interfaces::srv::UnloadNode_Response::error_message() const
{
    return m_error_message;
}

/*!
 * @brief This function returns a reference to member error_message
 * @return Reference to member error_message
 */
std::string& composition_interfaces::srv::UnloadNode_Response::error_message()
{
    return m_error_message;
}


size_t composition_interfaces::srv::UnloadNode_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return composition_interfaces_srv_UnloadNode_Response_max_key_cdr_typesize;
}

bool composition_interfaces::srv::UnloadNode_Response::isKeyDefined()
{
    return false;
}

void composition_interfaces::srv::UnloadNode_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


