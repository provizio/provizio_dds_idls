// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MenuEntry.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_MENUENTRY_H_
#define _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_MENUENTRY_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MenuEntry_SOURCE)
#define MenuEntry_DllAPI __declspec( dllexport )
#else
#define MenuEntry_DllAPI __declspec( dllimport )
#endif // MenuEntry_SOURCE
#else
#define MenuEntry_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MenuEntry_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace visualization_msgs {
    namespace msg {
        namespace MenuEntry_Constants {
            const uint8_t FEEDBACK = 0;
            const uint8_t ROSRUN = 1;
            const uint8_t ROSLAUNCH = 2;
        } // namespace MenuEntry_Constants
        /*!
         * @brief This class represents the structure MenuEntry defined by the user in the IDL file.
         * @ingroup MENUENTRY
         */
        class MenuEntry
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MenuEntry();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MenuEntry();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object visualization_msgs::msg::MenuEntry that will be copied.
             */
            eProsima_user_DllExport MenuEntry(
                    const MenuEntry& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object visualization_msgs::msg::MenuEntry that will be copied.
             */
            eProsima_user_DllExport MenuEntry(
                    MenuEntry&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object visualization_msgs::msg::MenuEntry that will be copied.
             */
            eProsima_user_DllExport MenuEntry& operator =(
                    const MenuEntry& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object visualization_msgs::msg::MenuEntry that will be copied.
             */
            eProsima_user_DllExport MenuEntry& operator =(
                    MenuEntry&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x visualization_msgs::msg::MenuEntry object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const MenuEntry& x) const;

            /*!
             * @brief Comparison operator.
             * @param x visualization_msgs::msg::MenuEntry object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const MenuEntry& x) const;

            /*!
             * @brief This function sets a value in member id
             * @param _id New value for member id
             */
            eProsima_user_DllExport void id(
                    uint32_t _id);

            /*!
             * @brief This function returns the value of member id
             * @return Value of member id
             */
            eProsima_user_DllExport uint32_t id() const;

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            eProsima_user_DllExport uint32_t& id();

            /*!
             * @brief This function sets a value in member parent_id
             * @param _parent_id New value for member parent_id
             */
            eProsima_user_DllExport void parent_id(
                    uint32_t _parent_id);

            /*!
             * @brief This function returns the value of member parent_id
             * @return Value of member parent_id
             */
            eProsima_user_DllExport uint32_t parent_id() const;

            /*!
             * @brief This function returns a reference to member parent_id
             * @return Reference to member parent_id
             */
            eProsima_user_DllExport uint32_t& parent_id();

            /*!
             * @brief This function copies the value in member title
             * @param _title New value to be copied in member title
             */
            eProsima_user_DllExport void title(
                    const std::string& _title);

            /*!
             * @brief This function moves the value in member title
             * @param _title New value to be moved in member title
             */
            eProsima_user_DllExport void title(
                    std::string&& _title);

            /*!
             * @brief This function returns a constant reference to member title
             * @return Constant reference to member title
             */
            eProsima_user_DllExport const std::string& title() const;

            /*!
             * @brief This function returns a reference to member title
             * @return Reference to member title
             */
            eProsima_user_DllExport std::string& title();
            /*!
             * @brief This function copies the value in member command
             * @param _command New value to be copied in member command
             */
            eProsima_user_DllExport void command(
                    const std::string& _command);

            /*!
             * @brief This function moves the value in member command
             * @param _command New value to be moved in member command
             */
            eProsima_user_DllExport void command(
                    std::string&& _command);

            /*!
             * @brief This function returns a constant reference to member command
             * @return Constant reference to member command
             */
            eProsima_user_DllExport const std::string& command() const;

            /*!
             * @brief This function returns a reference to member command
             * @return Reference to member command
             */
            eProsima_user_DllExport std::string& command();
            /*!
             * @brief This function sets a value in member command_type
             * @param _command_type New value for member command_type
             */
            eProsima_user_DllExport void command_type(
                    uint8_t _command_type);

            /*!
             * @brief This function returns the value of member command_type
             * @return Value of member command_type
             */
            eProsima_user_DllExport uint8_t command_type() const;

            /*!
             * @brief This function returns a reference to member command_type
             * @return Reference to member command_type
             */
            eProsima_user_DllExport uint8_t& command_type();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const visualization_msgs::msg::MenuEntry& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint32_t m_id;
            uint32_t m_parent_id;
            std::string m_title;
            std::string m_command;
            uint8_t m_command_type;

        };
    } // namespace msg
} // namespace visualization_msgs

#endif // _FAST_DDS_GENERATED_VISUALIZATION_MSGS_MSG_MENUENTRY_H_