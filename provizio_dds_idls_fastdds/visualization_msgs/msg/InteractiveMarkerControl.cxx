// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file InteractiveMarkerControl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "InteractiveMarkerControl.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define visualization_msgs_msg_InteractiveMarkerControl_max_cdr_typesize 724568ULL;
#define geometry_msgs_msg_Quaternion_max_cdr_typesize 32ULL;
#define sensor_msgs_msg_CompressedImage_max_cdr_typesize 632ULL;
#define geometry_msgs_msg_Vector3_max_cdr_typesize 24ULL;
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define visualization_msgs_msg_MeshFile_max_cdr_typesize 364ULL;
#define geometry_msgs_msg_Pose_max_cdr_typesize 56ULL;
#define visualization_msgs_msg_Marker_max_cdr_typesize 7241ULL;
#define builtin_interfaces_msg_Duration_max_cdr_typesize 8ULL;
#define visualization_msgs_msg_UVCoordinate_max_cdr_typesize 8ULL;
#define geometry_msgs_msg_Point_max_cdr_typesize 24ULL;
#define std_msgs_msg_ColorRGBA_max_cdr_typesize 16ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define visualization_msgs_msg_InteractiveMarkerControl_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Quaternion_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_CompressedImage_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Vector3_max_key_cdr_typesize 0ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define visualization_msgs_msg_MeshFile_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Pose_max_key_cdr_typesize 0ULL;
#define visualization_msgs_msg_Marker_max_key_cdr_typesize 0ULL;
#define builtin_interfaces_msg_Duration_max_key_cdr_typesize 0ULL;
#define visualization_msgs_msg_UVCoordinate_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Point_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_ColorRGBA_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;















visualization_msgs::msg::InteractiveMarkerControl::InteractiveMarkerControl()
{
    // string m_name
    m_name ="";
    // geometry_msgs::msg::Quaternion m_orientation

    // uint8 m_orientation_mode
    m_orientation_mode = 0;
    // uint8 m_interaction_mode
    m_interaction_mode = 0;
    // boolean m_always_visible
    m_always_visible = false;
    // sequence<visualization_msgs::msg::Marker> m_markers

    // boolean m_independent_marker_orientation
    m_independent_marker_orientation = false;
    // string m_description
    m_description ="";

}

visualization_msgs::msg::InteractiveMarkerControl::~InteractiveMarkerControl()
{








}

visualization_msgs::msg::InteractiveMarkerControl::InteractiveMarkerControl(
        const InteractiveMarkerControl& x)
{
    m_name = x.m_name;
    m_orientation = x.m_orientation;
    m_orientation_mode = x.m_orientation_mode;
    m_interaction_mode = x.m_interaction_mode;
    m_always_visible = x.m_always_visible;
    m_markers = x.m_markers;
    m_independent_marker_orientation = x.m_independent_marker_orientation;
    m_description = x.m_description;
}

visualization_msgs::msg::InteractiveMarkerControl::InteractiveMarkerControl(
        InteractiveMarkerControl&& x) noexcept 
{
    m_name = std::move(x.m_name);
    m_orientation = std::move(x.m_orientation);
    m_orientation_mode = x.m_orientation_mode;
    m_interaction_mode = x.m_interaction_mode;
    m_always_visible = x.m_always_visible;
    m_markers = std::move(x.m_markers);
    m_independent_marker_orientation = x.m_independent_marker_orientation;
    m_description = std::move(x.m_description);
}

visualization_msgs::msg::InteractiveMarkerControl& visualization_msgs::msg::InteractiveMarkerControl::operator =(
        const InteractiveMarkerControl& x)
{

    m_name = x.m_name;
    m_orientation = x.m_orientation;
    m_orientation_mode = x.m_orientation_mode;
    m_interaction_mode = x.m_interaction_mode;
    m_always_visible = x.m_always_visible;
    m_markers = x.m_markers;
    m_independent_marker_orientation = x.m_independent_marker_orientation;
    m_description = x.m_description;

    return *this;
}

visualization_msgs::msg::InteractiveMarkerControl& visualization_msgs::msg::InteractiveMarkerControl::operator =(
        InteractiveMarkerControl&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_orientation = std::move(x.m_orientation);
    m_orientation_mode = x.m_orientation_mode;
    m_interaction_mode = x.m_interaction_mode;
    m_always_visible = x.m_always_visible;
    m_markers = std::move(x.m_markers);
    m_independent_marker_orientation = x.m_independent_marker_orientation;
    m_description = std::move(x.m_description);

    return *this;
}

bool visualization_msgs::msg::InteractiveMarkerControl::operator ==(
        const InteractiveMarkerControl& x) const
{

    return (m_name == x.m_name && m_orientation == x.m_orientation && m_orientation_mode == x.m_orientation_mode && m_interaction_mode == x.m_interaction_mode && m_always_visible == x.m_always_visible && m_markers == x.m_markers && m_independent_marker_orientation == x.m_independent_marker_orientation && m_description == x.m_description);
}

bool visualization_msgs::msg::InteractiveMarkerControl::operator !=(
        const InteractiveMarkerControl& x) const
{
    return !(*this == x);
}

size_t visualization_msgs::msg::InteractiveMarkerControl::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return visualization_msgs_msg_InteractiveMarkerControl_max_cdr_typesize;
}

size_t visualization_msgs::msg::InteractiveMarkerControl::getCdrSerializedSize(
        const visualization_msgs::msg::InteractiveMarkerControl& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += geometry_msgs::msg::Quaternion::getCdrSerializedSize(data.orientation(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.markers().size(); ++a)
    {
        current_alignment += visualization_msgs::msg::Marker::getCdrSerializedSize(data.markers().at(a), current_alignment);}

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.description().size() + 1;


    return current_alignment - initial_alignment;
}

void visualization_msgs::msg::InteractiveMarkerControl::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_name.c_str();
    scdr << m_orientation;
    scdr << m_orientation_mode;
    scdr << m_interaction_mode;
    scdr << m_always_visible;
    scdr << m_markers;
    scdr << m_independent_marker_orientation;
    scdr << m_description.c_str();

}

void visualization_msgs::msg::InteractiveMarkerControl::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_name;
    dcdr >> m_orientation;
    dcdr >> m_orientation_mode;
    dcdr >> m_interaction_mode;
    dcdr >> m_always_visible;
    dcdr >> m_markers;
    dcdr >> m_independent_marker_orientation;
    dcdr >> m_description;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void visualization_msgs::msg::InteractiveMarkerControl::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void visualization_msgs::msg::InteractiveMarkerControl::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& visualization_msgs::msg::InteractiveMarkerControl::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& visualization_msgs::msg::InteractiveMarkerControl::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member orientation
 * @param _orientation New value to be copied in member orientation
 */
void visualization_msgs::msg::InteractiveMarkerControl::orientation(
        const geometry_msgs::msg::Quaternion& _orientation)
{
    m_orientation = _orientation;
}

/*!
 * @brief This function moves the value in member orientation
 * @param _orientation New value to be moved in member orientation
 */
void visualization_msgs::msg::InteractiveMarkerControl::orientation(
        geometry_msgs::msg::Quaternion&& _orientation)
{
    m_orientation = std::move(_orientation);
}

/*!
 * @brief This function returns a constant reference to member orientation
 * @return Constant reference to member orientation
 */
const geometry_msgs::msg::Quaternion& visualization_msgs::msg::InteractiveMarkerControl::orientation() const
{
    return m_orientation;
}

/*!
 * @brief This function returns a reference to member orientation
 * @return Reference to member orientation
 */
geometry_msgs::msg::Quaternion& visualization_msgs::msg::InteractiveMarkerControl::orientation()
{
    return m_orientation;
}
/*!
 * @brief This function sets a value in member orientation_mode
 * @param _orientation_mode New value for member orientation_mode
 */
void visualization_msgs::msg::InteractiveMarkerControl::orientation_mode(
        uint8_t _orientation_mode)
{
    m_orientation_mode = _orientation_mode;
}

/*!
 * @brief This function returns the value of member orientation_mode
 * @return Value of member orientation_mode
 */
uint8_t visualization_msgs::msg::InteractiveMarkerControl::orientation_mode() const
{
    return m_orientation_mode;
}

/*!
 * @brief This function returns a reference to member orientation_mode
 * @return Reference to member orientation_mode
 */
uint8_t& visualization_msgs::msg::InteractiveMarkerControl::orientation_mode()
{
    return m_orientation_mode;
}

/*!
 * @brief This function sets a value in member interaction_mode
 * @param _interaction_mode New value for member interaction_mode
 */
void visualization_msgs::msg::InteractiveMarkerControl::interaction_mode(
        uint8_t _interaction_mode)
{
    m_interaction_mode = _interaction_mode;
}

/*!
 * @brief This function returns the value of member interaction_mode
 * @return Value of member interaction_mode
 */
uint8_t visualization_msgs::msg::InteractiveMarkerControl::interaction_mode() const
{
    return m_interaction_mode;
}

/*!
 * @brief This function returns a reference to member interaction_mode
 * @return Reference to member interaction_mode
 */
uint8_t& visualization_msgs::msg::InteractiveMarkerControl::interaction_mode()
{
    return m_interaction_mode;
}

/*!
 * @brief This function sets a value in member always_visible
 * @param _always_visible New value for member always_visible
 */
void visualization_msgs::msg::InteractiveMarkerControl::always_visible(
        bool _always_visible)
{
    m_always_visible = _always_visible;
}

/*!
 * @brief This function returns the value of member always_visible
 * @return Value of member always_visible
 */
bool visualization_msgs::msg::InteractiveMarkerControl::always_visible() const
{
    return m_always_visible;
}

/*!
 * @brief This function returns a reference to member always_visible
 * @return Reference to member always_visible
 */
bool& visualization_msgs::msg::InteractiveMarkerControl::always_visible()
{
    return m_always_visible;
}

/*!
 * @brief This function copies the value in member markers
 * @param _markers New value to be copied in member markers
 */
void visualization_msgs::msg::InteractiveMarkerControl::markers(
        const std::vector<visualization_msgs::msg::Marker>& _markers)
{
    m_markers = _markers;
}

/*!
 * @brief This function moves the value in member markers
 * @param _markers New value to be moved in member markers
 */
void visualization_msgs::msg::InteractiveMarkerControl::markers(
        std::vector<visualization_msgs::msg::Marker>&& _markers)
{
    m_markers = std::move(_markers);
}

/*!
 * @brief This function returns a constant reference to member markers
 * @return Constant reference to member markers
 */
const std::vector<visualization_msgs::msg::Marker>& visualization_msgs::msg::InteractiveMarkerControl::markers() const
{
    return m_markers;
}

/*!
 * @brief This function returns a reference to member markers
 * @return Reference to member markers
 */
std::vector<visualization_msgs::msg::Marker>& visualization_msgs::msg::InteractiveMarkerControl::markers()
{
    return m_markers;
}
/*!
 * @brief This function sets a value in member independent_marker_orientation
 * @param _independent_marker_orientation New value for member independent_marker_orientation
 */
void visualization_msgs::msg::InteractiveMarkerControl::independent_marker_orientation(
        bool _independent_marker_orientation)
{
    m_independent_marker_orientation = _independent_marker_orientation;
}

/*!
 * @brief This function returns the value of member independent_marker_orientation
 * @return Value of member independent_marker_orientation
 */
bool visualization_msgs::msg::InteractiveMarkerControl::independent_marker_orientation() const
{
    return m_independent_marker_orientation;
}

/*!
 * @brief This function returns a reference to member independent_marker_orientation
 * @return Reference to member independent_marker_orientation
 */
bool& visualization_msgs::msg::InteractiveMarkerControl::independent_marker_orientation()
{
    return m_independent_marker_orientation;
}

/*!
 * @brief This function copies the value in member description
 * @param _description New value to be copied in member description
 */
void visualization_msgs::msg::InteractiveMarkerControl::description(
        const std::string& _description)
{
    m_description = _description;
}

/*!
 * @brief This function moves the value in member description
 * @param _description New value to be moved in member description
 */
void visualization_msgs::msg::InteractiveMarkerControl::description(
        std::string&& _description)
{
    m_description = std::move(_description);
}

/*!
 * @brief This function returns a constant reference to member description
 * @return Constant reference to member description
 */
const std::string& visualization_msgs::msg::InteractiveMarkerControl::description() const
{
    return m_description;
}

/*!
 * @brief This function returns a reference to member description
 * @return Reference to member description
 */
std::string& visualization_msgs::msg::InteractiveMarkerControl::description()
{
    return m_description;
}


size_t visualization_msgs::msg::InteractiveMarkerControl::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return visualization_msgs_msg_InteractiveMarkerControl_max_key_cdr_typesize;
}

bool visualization_msgs::msg::InteractiveMarkerControl::isKeyDefined()
{
    return false;
}

void visualization_msgs::msg::InteractiveMarkerControl::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


