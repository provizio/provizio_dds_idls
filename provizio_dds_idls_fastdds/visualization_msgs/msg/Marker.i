// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Marker.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

%module Marker

// SWIG helper modules
%include "stdint.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_array.i"
%include "std_map.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define RTPS_DllAPI
#define eProsima_user_DllExport

%include "geometry_msgs/msg/Vector3.i"
%include "MeshFile.i"
%include "geometry_msgs/msg/Point.i"
%include "UVCoordinate.i"
%include "std_msgs/msg/ColorRGBA.i"
%include "builtin_interfaces/msg/Duration.i"
%include "sensor_msgs/msg/CompressedImage.i"
%include "geometry_msgs/msg/Pose.i"

%{
#include "Marker.h"

#include <fastdds/dds/core/LoanableSequence.hpp>
%}

%import(module="fastdds") "fastdds/dds/core/LoanableCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableTypedCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableSequence.hpp"

// Include the class interfaces
%include "Marker.h"

















////////////////////////////////////////////////////////
// Binding for class visualization_msgs::msg::Marker
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore visualization_msgs::msg::Marker::Marker(Marker&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore visualization_msgs::msg::Marker::header(std_msgs::msg::Header&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::header();
%rename("%s") visualization_msgs::msg::Marker::header() const;

%ignore visualization_msgs::msg::Marker::ns(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::ns();
%rename("%s") visualization_msgs::msg::Marker::ns() const;

%ignore visualization_msgs::msg::Marker::id(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::id();
%rename("%s") visualization_msgs::msg::Marker::id() const;

%ignore visualization_msgs::msg::Marker::type(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::type();
%rename("%s") visualization_msgs::msg::Marker::type() const;

%ignore visualization_msgs::msg::Marker::action(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::action();
%rename("%s") visualization_msgs::msg::Marker::action() const;

%ignore visualization_msgs::msg::Marker::pose(geometry_msgs::msg::Pose&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::pose();
%rename("%s") visualization_msgs::msg::Marker::pose() const;

%ignore visualization_msgs::msg::Marker::scale(geometry_msgs::msg::Vector3&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::scale();
%rename("%s") visualization_msgs::msg::Marker::scale() const;

%ignore visualization_msgs::msg::Marker::color(std_msgs::msg::ColorRGBA&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::color();
%rename("%s") visualization_msgs::msg::Marker::color() const;

%ignore visualization_msgs::msg::Marker::lifetime(builtin_interfaces::msg::Duration&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::lifetime();
%rename("%s") visualization_msgs::msg::Marker::lifetime() const;

%ignore visualization_msgs::msg::Marker::frame_locked(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::frame_locked();
%rename("%s") visualization_msgs::msg::Marker::frame_locked() const;

%ignore visualization_msgs::msg::Marker::points(std::vector<geometry_msgs::msg::Point>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::points() const;
%template(geometry_msgs_msg_Point_vector) std::vector<geometry_msgs::msg::Point>;

%ignore visualization_msgs::msg::Marker::colors(std::vector<std_msgs::msg::ColorRGBA>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::colors() const;
%template(std_msgs_msg_ColorRGBA_vector) std::vector<std_msgs::msg::ColorRGBA>;

%ignore visualization_msgs::msg::Marker::texture_resource(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::texture_resource();
%rename("%s") visualization_msgs::msg::Marker::texture_resource() const;

%ignore visualization_msgs::msg::Marker::texture(sensor_msgs::msg::CompressedImage&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::texture();
%rename("%s") visualization_msgs::msg::Marker::texture() const;

%ignore visualization_msgs::msg::Marker::uv_coordinates(std::vector<visualization_msgs::msg::UVCoordinate>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::uv_coordinates() const;
%template(visualization_msgs_msg_UVCoordinate_vector) std::vector<visualization_msgs::msg::UVCoordinate>;

%ignore visualization_msgs::msg::Marker::text(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::text();
%rename("%s") visualization_msgs::msg::Marker::text() const;

%ignore visualization_msgs::msg::Marker::mesh_resource(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::mesh_resource();
%rename("%s") visualization_msgs::msg::Marker::mesh_resource() const;

%ignore visualization_msgs::msg::Marker::mesh_file(visualization_msgs::msg::MeshFile&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::mesh_file();
%rename("%s") visualization_msgs::msg::Marker::mesh_file() const;

%ignore visualization_msgs::msg::Marker::mesh_use_embedded_materials(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore visualization_msgs::msg::Marker::mesh_use_embedded_materials();
%rename("%s") visualization_msgs::msg::Marker::mesh_use_embedded_materials() const;


%template(_MarkerSeq) eprosima::fastdds::dds::LoanableTypedCollection<visualization_msgs::msg::Marker, std::false_type>;
%template(MarkerSeq) eprosima::fastdds::dds::LoanableSequence<visualization_msgs::msg::Marker, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<visualization_msgs::msg::Marker, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const visualization_msgs::msg::Marker& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}


// Include the corresponding TopicDataType
%include "MarkerPubSubTypes.i"
