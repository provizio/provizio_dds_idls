// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MultiArrayLayout.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MultiArrayLayout.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


std_msgs::msg::MultiArrayLayout::MultiArrayLayout()
{

}

std_msgs::msg::MultiArrayLayout::~MultiArrayLayout()
{
}

std_msgs::msg::MultiArrayLayout::MultiArrayLayout(
        const MultiArrayLayout& x)
{
    m_dim = x.m_dim;
    m_data_offset = x.m_data_offset;
}

std_msgs::msg::MultiArrayLayout::MultiArrayLayout(
        MultiArrayLayout&& x) noexcept
{
    m_dim = std::move(x.m_dim);
    m_data_offset = x.m_data_offset;
}

std_msgs::msg::MultiArrayLayout& std_msgs::msg::MultiArrayLayout::operator =(
        const MultiArrayLayout& x)
{

    m_dim = x.m_dim;
    m_data_offset = x.m_data_offset;

    return *this;
}

std_msgs::msg::MultiArrayLayout& std_msgs::msg::MultiArrayLayout::operator =(
        MultiArrayLayout&& x) noexcept
{

    m_dim = std::move(x.m_dim);
    m_data_offset = x.m_data_offset;

    return *this;
}

bool std_msgs::msg::MultiArrayLayout::operator ==(
        const MultiArrayLayout& x) const
{
    return (m_dim == x.m_dim &&
           m_data_offset == x.m_data_offset);
}

bool std_msgs::msg::MultiArrayLayout::operator !=(
        const MultiArrayLayout& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member dim
 * @param _dim New value to be copied in member dim
 */
void std_msgs::msg::MultiArrayLayout::dim(
        const std::vector<std_msgs::msg::MultiArrayDimension>& _dim)
{
    m_dim = _dim;
}

/*!
 * @brief This function moves the value in member dim
 * @param _dim New value to be moved in member dim
 */
void std_msgs::msg::MultiArrayLayout::dim(
        std::vector<std_msgs::msg::MultiArrayDimension>&& _dim)
{
    m_dim = std::move(_dim);
}

/*!
 * @brief This function returns a constant reference to member dim
 * @return Constant reference to member dim
 */
const std::vector<std_msgs::msg::MultiArrayDimension>& std_msgs::msg::MultiArrayLayout::dim() const
{
    return m_dim;
}

/*!
 * @brief This function returns a reference to member dim
 * @return Reference to member dim
 */
std::vector<std_msgs::msg::MultiArrayDimension>& std_msgs::msg::MultiArrayLayout::dim()
{
    return m_dim;
}


/*!
 * @brief This function sets a value in member data_offset
 * @param _data_offset New value for member data_offset
 */
void std_msgs::msg::MultiArrayLayout::data_offset(
        uint32_t _data_offset)
{
    m_data_offset = _data_offset;
}

/*!
 * @brief This function returns the value of member data_offset
 * @return Value of member data_offset
 */
uint32_t std_msgs::msg::MultiArrayLayout::data_offset() const
{
    return m_data_offset;
}

/*!
 * @brief This function returns a reference to member data_offset
 * @return Reference to member data_offset
 */
uint32_t& std_msgs::msg::MultiArrayLayout::data_offset()
{
    return m_data_offset;
}




// Include auxiliary functions like for serializing/deserializing.
#include "MultiArrayLayoutCdrAux.ipp"
