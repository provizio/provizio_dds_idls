// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ChangeState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ChangeState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

lifecycle_msgs::srv::ChangeState_Request::ChangeState_Request()
{
    // m_transition com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@42721fe


}

lifecycle_msgs::srv::ChangeState_Request::~ChangeState_Request()
{
}

lifecycle_msgs::srv::ChangeState_Request::ChangeState_Request(
        const ChangeState_Request& x)
{
    m_transition = x.m_transition;
}

lifecycle_msgs::srv::ChangeState_Request::ChangeState_Request(
        ChangeState_Request&& x) noexcept 
{
    m_transition = std::move(x.m_transition);
}

lifecycle_msgs::srv::ChangeState_Request& lifecycle_msgs::srv::ChangeState_Request::operator =(
        const ChangeState_Request& x)
{

    m_transition = x.m_transition;

    return *this;
}

lifecycle_msgs::srv::ChangeState_Request& lifecycle_msgs::srv::ChangeState_Request::operator =(
        ChangeState_Request&& x) noexcept
{

    m_transition = std::move(x.m_transition);

    return *this;
}

bool lifecycle_msgs::srv::ChangeState_Request::operator ==(
        const ChangeState_Request& x) const
{

    return (m_transition == x.m_transition);
}

bool lifecycle_msgs::srv::ChangeState_Request::operator !=(
        const ChangeState_Request& x) const
{
    return !(*this == x);
}

size_t lifecycle_msgs::srv::ChangeState_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += lifecycle_msgs::msg::Transition::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t lifecycle_msgs::srv::ChangeState_Request::getCdrSerializedSize(
        const lifecycle_msgs::srv::ChangeState_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += lifecycle_msgs::msg::Transition::getCdrSerializedSize(data.transition(), current_alignment);

    return current_alignment - initial_alignment;
}

void lifecycle_msgs::srv::ChangeState_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_transition;

}

void lifecycle_msgs::srv::ChangeState_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_transition;
}

/*!
 * @brief This function copies the value in member transition
 * @param _transition New value to be copied in member transition
 */
void lifecycle_msgs::srv::ChangeState_Request::transition(
        const lifecycle_msgs::msg::Transition& _transition)
{
    m_transition = _transition;
}

/*!
 * @brief This function moves the value in member transition
 * @param _transition New value to be moved in member transition
 */
void lifecycle_msgs::srv::ChangeState_Request::transition(
        lifecycle_msgs::msg::Transition&& _transition)
{
    m_transition = std::move(_transition);
}

/*!
 * @brief This function returns a constant reference to member transition
 * @return Constant reference to member transition
 */
const lifecycle_msgs::msg::Transition& lifecycle_msgs::srv::ChangeState_Request::transition() const
{
    return m_transition;
}

/*!
 * @brief This function returns a reference to member transition
 * @return Reference to member transition
 */
lifecycle_msgs::msg::Transition& lifecycle_msgs::srv::ChangeState_Request::transition()
{
    return m_transition;
}

size_t lifecycle_msgs::srv::ChangeState_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool lifecycle_msgs::srv::ChangeState_Request::isKeyDefined()
{
    return false;
}

void lifecycle_msgs::srv::ChangeState_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

lifecycle_msgs::srv::ChangeState_Response::ChangeState_Response()
{
    // m_success com.eprosima.idl.parser.typecode.PrimitiveTypeCode@40844aab
    m_success = false;

}

lifecycle_msgs::srv::ChangeState_Response::~ChangeState_Response()
{
}

lifecycle_msgs::srv::ChangeState_Response::ChangeState_Response(
        const ChangeState_Response& x)
{
    m_success = x.m_success;
}

lifecycle_msgs::srv::ChangeState_Response::ChangeState_Response(
        ChangeState_Response&& x) noexcept 
{
    m_success = x.m_success;
}

lifecycle_msgs::srv::ChangeState_Response& lifecycle_msgs::srv::ChangeState_Response::operator =(
        const ChangeState_Response& x)
{

    m_success = x.m_success;

    return *this;
}

lifecycle_msgs::srv::ChangeState_Response& lifecycle_msgs::srv::ChangeState_Response::operator =(
        ChangeState_Response&& x) noexcept
{

    m_success = x.m_success;

    return *this;
}

bool lifecycle_msgs::srv::ChangeState_Response::operator ==(
        const ChangeState_Response& x) const
{

    return (m_success == x.m_success);
}

bool lifecycle_msgs::srv::ChangeState_Response::operator !=(
        const ChangeState_Response& x) const
{
    return !(*this == x);
}

size_t lifecycle_msgs::srv::ChangeState_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t lifecycle_msgs::srv::ChangeState_Response::getCdrSerializedSize(
        const lifecycle_msgs::srv::ChangeState_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void lifecycle_msgs::srv::ChangeState_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_success;

}

void lifecycle_msgs::srv::ChangeState_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_success;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void lifecycle_msgs::srv::ChangeState_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool lifecycle_msgs::srv::ChangeState_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& lifecycle_msgs::srv::ChangeState_Response::success()
{
    return m_success;
}


size_t lifecycle_msgs::srv::ChangeState_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool lifecycle_msgs::srv::ChangeState_Response::isKeyDefined()
{
    return false;
}

void lifecycle_msgs::srv::ChangeState_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


