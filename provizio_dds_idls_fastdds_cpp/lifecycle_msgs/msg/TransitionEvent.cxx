// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TransitionEvent.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TransitionEvent.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

lifecycle_msgs::msg::TransitionEvent::TransitionEvent()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77b14724
    m_timestamp = 0;
    // m_transition com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5d9b7a8a

    // m_start_state com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1e8ce150

    // m_goal_state com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1e8ce150


}

lifecycle_msgs::msg::TransitionEvent::~TransitionEvent()
{




}

lifecycle_msgs::msg::TransitionEvent::TransitionEvent(
        const TransitionEvent& x)
{
    m_timestamp = x.m_timestamp;
    m_transition = x.m_transition;
    m_start_state = x.m_start_state;
    m_goal_state = x.m_goal_state;
}

lifecycle_msgs::msg::TransitionEvent::TransitionEvent(
        TransitionEvent&& x) noexcept 
{
    m_timestamp = x.m_timestamp;
    m_transition = std::move(x.m_transition);
    m_start_state = std::move(x.m_start_state);
    m_goal_state = std::move(x.m_goal_state);
}

lifecycle_msgs::msg::TransitionEvent& lifecycle_msgs::msg::TransitionEvent::operator =(
        const TransitionEvent& x)
{

    m_timestamp = x.m_timestamp;
    m_transition = x.m_transition;
    m_start_state = x.m_start_state;
    m_goal_state = x.m_goal_state;

    return *this;
}

lifecycle_msgs::msg::TransitionEvent& lifecycle_msgs::msg::TransitionEvent::operator =(
        TransitionEvent&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_transition = std::move(x.m_transition);
    m_start_state = std::move(x.m_start_state);
    m_goal_state = std::move(x.m_goal_state);

    return *this;
}

bool lifecycle_msgs::msg::TransitionEvent::operator ==(
        const TransitionEvent& x) const
{

    return (m_timestamp == x.m_timestamp && m_transition == x.m_transition && m_start_state == x.m_start_state && m_goal_state == x.m_goal_state);
}

bool lifecycle_msgs::msg::TransitionEvent::operator !=(
        const TransitionEvent& x) const
{
    return !(*this == x);
}

size_t lifecycle_msgs::msg::TransitionEvent::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += lifecycle_msgs::msg::Transition::getMaxCdrSerializedSize(current_alignment);
    current_alignment += lifecycle_msgs::msg::State::getMaxCdrSerializedSize(current_alignment);
    current_alignment += lifecycle_msgs::msg::State::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t lifecycle_msgs::msg::TransitionEvent::getCdrSerializedSize(
        const lifecycle_msgs::msg::TransitionEvent& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += lifecycle_msgs::msg::Transition::getCdrSerializedSize(data.transition(), current_alignment);
    current_alignment += lifecycle_msgs::msg::State::getCdrSerializedSize(data.start_state(), current_alignment);
    current_alignment += lifecycle_msgs::msg::State::getCdrSerializedSize(data.goal_state(), current_alignment);

    return current_alignment - initial_alignment;
}

void lifecycle_msgs::msg::TransitionEvent::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp;
    scdr << m_transition;
    scdr << m_start_state;
    scdr << m_goal_state;

}

void lifecycle_msgs::msg::TransitionEvent::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_transition;
    dcdr >> m_start_state;
    dcdr >> m_goal_state;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void lifecycle_msgs::msg::TransitionEvent::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t lifecycle_msgs::msg::TransitionEvent::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& lifecycle_msgs::msg::TransitionEvent::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member transition
 * @param _transition New value to be copied in member transition
 */
void lifecycle_msgs::msg::TransitionEvent::transition(
        const lifecycle_msgs::msg::Transition& _transition)
{
    m_transition = _transition;
}

/*!
 * @brief This function moves the value in member transition
 * @param _transition New value to be moved in member transition
 */
void lifecycle_msgs::msg::TransitionEvent::transition(
        lifecycle_msgs::msg::Transition&& _transition)
{
    m_transition = std::move(_transition);
}

/*!
 * @brief This function returns a constant reference to member transition
 * @return Constant reference to member transition
 */
const lifecycle_msgs::msg::Transition& lifecycle_msgs::msg::TransitionEvent::transition() const
{
    return m_transition;
}

/*!
 * @brief This function returns a reference to member transition
 * @return Reference to member transition
 */
lifecycle_msgs::msg::Transition& lifecycle_msgs::msg::TransitionEvent::transition()
{
    return m_transition;
}
/*!
 * @brief This function copies the value in member start_state
 * @param _start_state New value to be copied in member start_state
 */
void lifecycle_msgs::msg::TransitionEvent::start_state(
        const lifecycle_msgs::msg::State& _start_state)
{
    m_start_state = _start_state;
}

/*!
 * @brief This function moves the value in member start_state
 * @param _start_state New value to be moved in member start_state
 */
void lifecycle_msgs::msg::TransitionEvent::start_state(
        lifecycle_msgs::msg::State&& _start_state)
{
    m_start_state = std::move(_start_state);
}

/*!
 * @brief This function returns a constant reference to member start_state
 * @return Constant reference to member start_state
 */
const lifecycle_msgs::msg::State& lifecycle_msgs::msg::TransitionEvent::start_state() const
{
    return m_start_state;
}

/*!
 * @brief This function returns a reference to member start_state
 * @return Reference to member start_state
 */
lifecycle_msgs::msg::State& lifecycle_msgs::msg::TransitionEvent::start_state()
{
    return m_start_state;
}
/*!
 * @brief This function copies the value in member goal_state
 * @param _goal_state New value to be copied in member goal_state
 */
void lifecycle_msgs::msg::TransitionEvent::goal_state(
        const lifecycle_msgs::msg::State& _goal_state)
{
    m_goal_state = _goal_state;
}

/*!
 * @brief This function moves the value in member goal_state
 * @param _goal_state New value to be moved in member goal_state
 */
void lifecycle_msgs::msg::TransitionEvent::goal_state(
        lifecycle_msgs::msg::State&& _goal_state)
{
    m_goal_state = std::move(_goal_state);
}

/*!
 * @brief This function returns a constant reference to member goal_state
 * @return Constant reference to member goal_state
 */
const lifecycle_msgs::msg::State& lifecycle_msgs::msg::TransitionEvent::goal_state() const
{
    return m_goal_state;
}

/*!
 * @brief This function returns a reference to member goal_state
 * @return Reference to member goal_state
 */
lifecycle_msgs::msg::State& lifecycle_msgs::msg::TransitionEvent::goal_state()
{
    return m_goal_state;
}

size_t lifecycle_msgs::msg::TransitionEvent::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool lifecycle_msgs::msg::TransitionEvent::isKeyDefined()
{
    return false;
}

void lifecycle_msgs::msg::TransitionEvent::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}


