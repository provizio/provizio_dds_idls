// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Transition.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_LIFECYCLE_MSGS_MSG_TRANSITION_H_
#define _FAST_DDS_GENERATED_LIFECYCLE_MSGS_MSG_TRANSITION_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Transition_SOURCE)
#define Transition_DllAPI __declspec( dllexport )
#else
#define Transition_DllAPI __declspec( dllimport )
#endif // Transition_SOURCE
#else
#define Transition_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Transition_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace lifecycle_msgs {
    namespace msg {
        namespace Transition_Constants {
            const uint8_t TRANSITION_CREATE = 0;
            const uint8_t TRANSITION_CONFIGURE = 1;
            const uint8_t TRANSITION_CLEANUP = 2;
            const uint8_t TRANSITION_ACTIVATE = 3;
            const uint8_t TRANSITION_DEACTIVATE = 4;
            const uint8_t TRANSITION_UNCONFIGURED_SHUTDOWN = 5;
            const uint8_t TRANSITION_INACTIVE_SHUTDOWN = 6;
            const uint8_t TRANSITION_ACTIVE_SHUTDOWN = 7;
            const uint8_t TRANSITION_DESTROY = 8;
            const uint8_t TRANSITION_ON_CONFIGURE_SUCCESS = 10;
            const uint8_t TRANSITION_ON_CONFIGURE_FAILURE = 11;
            const uint8_t TRANSITION_ON_CONFIGURE_ERROR = 12;
            const uint8_t TRANSITION_ON_CLEANUP_SUCCESS = 20;
            const uint8_t TRANSITION_ON_CLEANUP_FAILURE = 21;
            const uint8_t TRANSITION_ON_CLEANUP_ERROR = 22;
            const uint8_t TRANSITION_ON_ACTIVATE_SUCCESS = 30;
            const uint8_t TRANSITION_ON_ACTIVATE_FAILURE = 31;
            const uint8_t TRANSITION_ON_ACTIVATE_ERROR = 32;
            const uint8_t TRANSITION_ON_DEACTIVATE_SUCCESS = 40;
            const uint8_t TRANSITION_ON_DEACTIVATE_FAILURE = 41;
            const uint8_t TRANSITION_ON_DEACTIVATE_ERROR = 42;
            const uint8_t TRANSITION_ON_SHUTDOWN_SUCCESS = 50;
            const uint8_t TRANSITION_ON_SHUTDOWN_FAILURE = 51;
            const uint8_t TRANSITION_ON_SHUTDOWN_ERROR = 52;
            const uint8_t TRANSITION_ON_ERROR_SUCCESS = 60;
            const uint8_t TRANSITION_ON_ERROR_FAILURE = 61;
            const uint8_t TRANSITION_ON_ERROR_ERROR = 62;
            const uint8_t TRANSITION_CALLBACK_SUCCESS = 97;
            const uint8_t TRANSITION_CALLBACK_FAILURE = 98;
            const uint8_t TRANSITION_CALLBACK_ERROR = 99;
        } // namespace Transition_Constants
        /*!
         * @brief This class represents the structure Transition defined by the user in the IDL file.
         * @ingroup TRANSITION
         */
        class Transition
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Transition();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Transition();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object lifecycle_msgs::msg::Transition that will be copied.
             */
            eProsima_user_DllExport Transition(
                    const Transition& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object lifecycle_msgs::msg::Transition that will be copied.
             */
            eProsima_user_DllExport Transition(
                    Transition&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object lifecycle_msgs::msg::Transition that will be copied.
             */
            eProsima_user_DllExport Transition& operator =(
                    const Transition& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object lifecycle_msgs::msg::Transition that will be copied.
             */
            eProsima_user_DllExport Transition& operator =(
                    Transition&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x lifecycle_msgs::msg::Transition object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Transition& x) const;

            /*!
             * @brief Comparison operator.
             * @param x lifecycle_msgs::msg::Transition object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Transition& x) const;

            /*!
             * @brief This function sets a value in member id
             * @param _id New value for member id
             */
            eProsima_user_DllExport void id(
                    uint8_t _id);

            /*!
             * @brief This function returns the value of member id
             * @return Value of member id
             */
            eProsima_user_DllExport uint8_t id() const;

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            eProsima_user_DllExport uint8_t& id();

            /*!
             * @brief This function copies the value in member label
             * @param _label New value to be copied in member label
             */
            eProsima_user_DllExport void label(
                    const std::string& _label);

            /*!
             * @brief This function moves the value in member label
             * @param _label New value to be moved in member label
             */
            eProsima_user_DllExport void label(
                    std::string&& _label);

            /*!
             * @brief This function returns a constant reference to member label
             * @return Constant reference to member label
             */
            eProsima_user_DllExport const std::string& label() const;

            /*!
             * @brief This function returns a reference to member label
             * @return Reference to member label
             */
            eProsima_user_DllExport std::string& label();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const lifecycle_msgs::msg::Transition& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_id;
            std::string m_label;
        };
    } // namespace msg
} // namespace lifecycle_msgs

#endif // _FAST_DDS_GENERATED_LIFECYCLE_MSGS_MSG_TRANSITION_H_