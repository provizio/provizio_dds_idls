// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GoalStatusArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GoalStatusArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

actionlib_msgs::msg::GoalStatusArray::GoalStatusArray()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@581ac8a8

    // m_status_list com.eprosima.idl.parser.typecode.SequenceTypeCode@6d4e5011


}

actionlib_msgs::msg::GoalStatusArray::~GoalStatusArray()
{


}

actionlib_msgs::msg::GoalStatusArray::GoalStatusArray(
        const GoalStatusArray& x)
{
    m_header = x.m_header;
    m_status_list = x.m_status_list;
}

actionlib_msgs::msg::GoalStatusArray::GoalStatusArray(
        GoalStatusArray&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_status_list = std::move(x.m_status_list);
}

actionlib_msgs::msg::GoalStatusArray& actionlib_msgs::msg::GoalStatusArray::operator =(
        const GoalStatusArray& x)
{

    m_header = x.m_header;
    m_status_list = x.m_status_list;

    return *this;
}

actionlib_msgs::msg::GoalStatusArray& actionlib_msgs::msg::GoalStatusArray::operator =(
        GoalStatusArray&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_status_list = std::move(x.m_status_list);

    return *this;
}

bool actionlib_msgs::msg::GoalStatusArray::operator ==(
        const GoalStatusArray& x) const
{

    return (m_header == x.m_header && m_status_list == x.m_status_list);
}

bool actionlib_msgs::msg::GoalStatusArray::operator !=(
        const GoalStatusArray& x) const
{
    return !(*this == x);
}

size_t actionlib_msgs::msg::GoalStatusArray::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += actionlib_msgs::msg::GoalStatus::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t actionlib_msgs::msg::GoalStatusArray::getCdrSerializedSize(
        const actionlib_msgs::msg::GoalStatusArray& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.status_list().size(); ++a)
    {
        current_alignment += actionlib_msgs::msg::GoalStatus::getCdrSerializedSize(data.status_list().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void actionlib_msgs::msg::GoalStatusArray::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_status_list;

}

void actionlib_msgs::msg::GoalStatusArray::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_status_list;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void actionlib_msgs::msg::GoalStatusArray::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void actionlib_msgs::msg::GoalStatusArray::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& actionlib_msgs::msg::GoalStatusArray::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& actionlib_msgs::msg::GoalStatusArray::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member status_list
 * @param _status_list New value to be copied in member status_list
 */
void actionlib_msgs::msg::GoalStatusArray::status_list(
        const std::vector<actionlib_msgs::msg::GoalStatus>& _status_list)
{
    m_status_list = _status_list;
}

/*!
 * @brief This function moves the value in member status_list
 * @param _status_list New value to be moved in member status_list
 */
void actionlib_msgs::msg::GoalStatusArray::status_list(
        std::vector<actionlib_msgs::msg::GoalStatus>&& _status_list)
{
    m_status_list = std::move(_status_list);
}

/*!
 * @brief This function returns a constant reference to member status_list
 * @return Constant reference to member status_list
 */
const std::vector<actionlib_msgs::msg::GoalStatus>& actionlib_msgs::msg::GoalStatusArray::status_list() const
{
    return m_status_list;
}

/*!
 * @brief This function returns a reference to member status_list
 * @return Reference to member status_list
 */
std::vector<actionlib_msgs::msg::GoalStatus>& actionlib_msgs::msg::GoalStatusArray::status_list()
{
    return m_status_list;
}

size_t actionlib_msgs::msg::GoalStatusArray::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool actionlib_msgs::msg::GoalStatusArray::isKeyDefined()
{
    return false;
}

void actionlib_msgs::msg::GoalStatusArray::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


