// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GoalID.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GoalID.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

actionlib_msgs::msg::GoalID::GoalID()
{
    // m_stamp com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@fb713e7

    // m_id com.eprosima.idl.parser.typecode.StringTypeCode@1b5c3e5f
    m_id ="";

}

actionlib_msgs::msg::GoalID::~GoalID()
{


}

actionlib_msgs::msg::GoalID::GoalID(
        const GoalID& x)
{
    m_stamp = x.m_stamp;
    m_id = x.m_id;
}

actionlib_msgs::msg::GoalID::GoalID(
        GoalID&& x) noexcept 
{
    m_stamp = std::move(x.m_stamp);
    m_id = std::move(x.m_id);
}

actionlib_msgs::msg::GoalID& actionlib_msgs::msg::GoalID::operator =(
        const GoalID& x)
{

    m_stamp = x.m_stamp;
    m_id = x.m_id;

    return *this;
}

actionlib_msgs::msg::GoalID& actionlib_msgs::msg::GoalID::operator =(
        GoalID&& x) noexcept
{

    m_stamp = std::move(x.m_stamp);
    m_id = std::move(x.m_id);

    return *this;
}

bool actionlib_msgs::msg::GoalID::operator ==(
        const GoalID& x) const
{

    return (m_stamp == x.m_stamp && m_id == x.m_id);
}

bool actionlib_msgs::msg::GoalID::operator !=(
        const GoalID& x) const
{
    return !(*this == x);
}

size_t actionlib_msgs::msg::GoalID::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t actionlib_msgs::msg::GoalID::getCdrSerializedSize(
        const actionlib_msgs::msg::GoalID& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.id().size() + 1;


    return current_alignment - initial_alignment;
}

void actionlib_msgs::msg::GoalID::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_stamp;
    scdr << m_id.c_str();

}

void actionlib_msgs::msg::GoalID::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_stamp;
    dcdr >> m_id;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void actionlib_msgs::msg::GoalID::stamp(
        const builtin_interfaces::msg::Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void actionlib_msgs::msg::GoalID::stamp(
        builtin_interfaces::msg::Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::Time& actionlib_msgs::msg::GoalID::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::Time& actionlib_msgs::msg::GoalID::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void actionlib_msgs::msg::GoalID::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void actionlib_msgs::msg::GoalID::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& actionlib_msgs::msg::GoalID::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& actionlib_msgs::msg::GoalID::id()
{
    return m_id;
}

size_t actionlib_msgs::msg::GoalID::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool actionlib_msgs::msg::GoalID::isKeyDefined()
{
    return false;
}

void actionlib_msgs::msg::GoalID::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


