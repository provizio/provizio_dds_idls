// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DisparityImage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DisparityImage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

stereo_msgs::msg::DisparityImage::DisparityImage()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6f7e336b

    // m_image com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3a2b2322

    // m_f com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e1218b4
    m_f = 0.0;
    // m_t com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12958360
    m_t = 0.0;
    // m_valid_window com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@c6e0f32

    // m_min_disparity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6f3f0fae
    m_min_disparity = 0.0;
    // m_max_disparity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@21a66d45
    m_max_disparity = 0.0;
    // m_delta_d com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1f966492
    m_delta_d = 0.0;

}

stereo_msgs::msg::DisparityImage::~DisparityImage()
{








}

stereo_msgs::msg::DisparityImage::DisparityImage(
        const DisparityImage& x)
{
    m_header = x.m_header;
    m_image = x.m_image;
    m_f = x.m_f;
    m_t = x.m_t;
    m_valid_window = x.m_valid_window;
    m_min_disparity = x.m_min_disparity;
    m_max_disparity = x.m_max_disparity;
    m_delta_d = x.m_delta_d;
}

stereo_msgs::msg::DisparityImage::DisparityImage(
        DisparityImage&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_image = std::move(x.m_image);
    m_f = x.m_f;
    m_t = x.m_t;
    m_valid_window = std::move(x.m_valid_window);
    m_min_disparity = x.m_min_disparity;
    m_max_disparity = x.m_max_disparity;
    m_delta_d = x.m_delta_d;
}

stereo_msgs::msg::DisparityImage& stereo_msgs::msg::DisparityImage::operator =(
        const DisparityImage& x)
{

    m_header = x.m_header;
    m_image = x.m_image;
    m_f = x.m_f;
    m_t = x.m_t;
    m_valid_window = x.m_valid_window;
    m_min_disparity = x.m_min_disparity;
    m_max_disparity = x.m_max_disparity;
    m_delta_d = x.m_delta_d;

    return *this;
}

stereo_msgs::msg::DisparityImage& stereo_msgs::msg::DisparityImage::operator =(
        DisparityImage&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_image = std::move(x.m_image);
    m_f = x.m_f;
    m_t = x.m_t;
    m_valid_window = std::move(x.m_valid_window);
    m_min_disparity = x.m_min_disparity;
    m_max_disparity = x.m_max_disparity;
    m_delta_d = x.m_delta_d;

    return *this;
}

bool stereo_msgs::msg::DisparityImage::operator ==(
        const DisparityImage& x) const
{

    return (m_header == x.m_header && m_image == x.m_image && m_f == x.m_f && m_t == x.m_t && m_valid_window == x.m_valid_window && m_min_disparity == x.m_min_disparity && m_max_disparity == x.m_max_disparity && m_delta_d == x.m_delta_d);
}

bool stereo_msgs::msg::DisparityImage::operator !=(
        const DisparityImage& x) const
{
    return !(*this == x);
}

size_t stereo_msgs::msg::DisparityImage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += sensor_msgs::msg::Image::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += sensor_msgs::msg::RegionOfInterest::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t stereo_msgs::msg::DisparityImage::getCdrSerializedSize(
        const stereo_msgs::msg::DisparityImage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += sensor_msgs::msg::Image::getCdrSerializedSize(data.image(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += sensor_msgs::msg::RegionOfInterest::getCdrSerializedSize(data.valid_window(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void stereo_msgs::msg::DisparityImage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_image;
    scdr << m_f;
    scdr << m_t;
    scdr << m_valid_window;
    scdr << m_min_disparity;
    scdr << m_max_disparity;
    scdr << m_delta_d;

}

void stereo_msgs::msg::DisparityImage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_image;
    dcdr >> m_f;
    dcdr >> m_t;
    dcdr >> m_valid_window;
    dcdr >> m_min_disparity;
    dcdr >> m_max_disparity;
    dcdr >> m_delta_d;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void stereo_msgs::msg::DisparityImage::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void stereo_msgs::msg::DisparityImage::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& stereo_msgs::msg::DisparityImage::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& stereo_msgs::msg::DisparityImage::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member image
 * @param _image New value to be copied in member image
 */
void stereo_msgs::msg::DisparityImage::image(
        const sensor_msgs::msg::Image& _image)
{
    m_image = _image;
}

/*!
 * @brief This function moves the value in member image
 * @param _image New value to be moved in member image
 */
void stereo_msgs::msg::DisparityImage::image(
        sensor_msgs::msg::Image&& _image)
{
    m_image = std::move(_image);
}

/*!
 * @brief This function returns a constant reference to member image
 * @return Constant reference to member image
 */
const sensor_msgs::msg::Image& stereo_msgs::msg::DisparityImage::image() const
{
    return m_image;
}

/*!
 * @brief This function returns a reference to member image
 * @return Reference to member image
 */
sensor_msgs::msg::Image& stereo_msgs::msg::DisparityImage::image()
{
    return m_image;
}
/*!
 * @brief This function sets a value in member f
 * @param _f New value for member f
 */
void stereo_msgs::msg::DisparityImage::f(
        float _f)
{
    m_f = _f;
}

/*!
 * @brief This function returns the value of member f
 * @return Value of member f
 */
float stereo_msgs::msg::DisparityImage::f() const
{
    return m_f;
}

/*!
 * @brief This function returns a reference to member f
 * @return Reference to member f
 */
float& stereo_msgs::msg::DisparityImage::f()
{
    return m_f;
}

/*!
 * @brief This function sets a value in member t
 * @param _t New value for member t
 */
void stereo_msgs::msg::DisparityImage::t(
        float _t)
{
    m_t = _t;
}

/*!
 * @brief This function returns the value of member t
 * @return Value of member t
 */
float stereo_msgs::msg::DisparityImage::t() const
{
    return m_t;
}

/*!
 * @brief This function returns a reference to member t
 * @return Reference to member t
 */
float& stereo_msgs::msg::DisparityImage::t()
{
    return m_t;
}

/*!
 * @brief This function copies the value in member valid_window
 * @param _valid_window New value to be copied in member valid_window
 */
void stereo_msgs::msg::DisparityImage::valid_window(
        const sensor_msgs::msg::RegionOfInterest& _valid_window)
{
    m_valid_window = _valid_window;
}

/*!
 * @brief This function moves the value in member valid_window
 * @param _valid_window New value to be moved in member valid_window
 */
void stereo_msgs::msg::DisparityImage::valid_window(
        sensor_msgs::msg::RegionOfInterest&& _valid_window)
{
    m_valid_window = std::move(_valid_window);
}

/*!
 * @brief This function returns a constant reference to member valid_window
 * @return Constant reference to member valid_window
 */
const sensor_msgs::msg::RegionOfInterest& stereo_msgs::msg::DisparityImage::valid_window() const
{
    return m_valid_window;
}

/*!
 * @brief This function returns a reference to member valid_window
 * @return Reference to member valid_window
 */
sensor_msgs::msg::RegionOfInterest& stereo_msgs::msg::DisparityImage::valid_window()
{
    return m_valid_window;
}
/*!
 * @brief This function sets a value in member min_disparity
 * @param _min_disparity New value for member min_disparity
 */
void stereo_msgs::msg::DisparityImage::min_disparity(
        float _min_disparity)
{
    m_min_disparity = _min_disparity;
}

/*!
 * @brief This function returns the value of member min_disparity
 * @return Value of member min_disparity
 */
float stereo_msgs::msg::DisparityImage::min_disparity() const
{
    return m_min_disparity;
}

/*!
 * @brief This function returns a reference to member min_disparity
 * @return Reference to member min_disparity
 */
float& stereo_msgs::msg::DisparityImage::min_disparity()
{
    return m_min_disparity;
}

/*!
 * @brief This function sets a value in member max_disparity
 * @param _max_disparity New value for member max_disparity
 */
void stereo_msgs::msg::DisparityImage::max_disparity(
        float _max_disparity)
{
    m_max_disparity = _max_disparity;
}

/*!
 * @brief This function returns the value of member max_disparity
 * @return Value of member max_disparity
 */
float stereo_msgs::msg::DisparityImage::max_disparity() const
{
    return m_max_disparity;
}

/*!
 * @brief This function returns a reference to member max_disparity
 * @return Reference to member max_disparity
 */
float& stereo_msgs::msg::DisparityImage::max_disparity()
{
    return m_max_disparity;
}

/*!
 * @brief This function sets a value in member delta_d
 * @param _delta_d New value for member delta_d
 */
void stereo_msgs::msg::DisparityImage::delta_d(
        float _delta_d)
{
    m_delta_d = _delta_d;
}

/*!
 * @brief This function returns the value of member delta_d
 * @return Value of member delta_d
 */
float stereo_msgs::msg::DisparityImage::delta_d() const
{
    return m_delta_d;
}

/*!
 * @brief This function returns a reference to member delta_d
 * @return Reference to member delta_d
 */
float& stereo_msgs::msg::DisparityImage::delta_d()
{
    return m_delta_d;
}


size_t stereo_msgs::msg::DisparityImage::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;











    return current_align;
}

bool stereo_msgs::msg::DisparityImage::isKeyDefined()
{
    return false;
}

void stereo_msgs::msg::DisparityImage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
            
}


