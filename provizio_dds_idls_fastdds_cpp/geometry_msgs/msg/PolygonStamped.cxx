// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PolygonStamped.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PolygonStamped.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

geometry_msgs::msg::PolygonStamped::PolygonStamped()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@26adfd2d

    // m_polygon com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3336e6b6


}

geometry_msgs::msg::PolygonStamped::~PolygonStamped()
{


}

geometry_msgs::msg::PolygonStamped::PolygonStamped(
        const PolygonStamped& x)
{
    m_header = x.m_header;
    m_polygon = x.m_polygon;
}

geometry_msgs::msg::PolygonStamped::PolygonStamped(
        PolygonStamped&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_polygon = std::move(x.m_polygon);
}

geometry_msgs::msg::PolygonStamped& geometry_msgs::msg::PolygonStamped::operator =(
        const PolygonStamped& x)
{

    m_header = x.m_header;
    m_polygon = x.m_polygon;

    return *this;
}

geometry_msgs::msg::PolygonStamped& geometry_msgs::msg::PolygonStamped::operator =(
        PolygonStamped&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_polygon = std::move(x.m_polygon);

    return *this;
}

bool geometry_msgs::msg::PolygonStamped::operator ==(
        const PolygonStamped& x) const
{

    return (m_header == x.m_header && m_polygon == x.m_polygon);
}

bool geometry_msgs::msg::PolygonStamped::operator !=(
        const PolygonStamped& x) const
{
    return !(*this == x);
}

size_t geometry_msgs::msg::PolygonStamped::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::Polygon::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t geometry_msgs::msg::PolygonStamped::getCdrSerializedSize(
        const geometry_msgs::msg::PolygonStamped& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += geometry_msgs::msg::Polygon::getCdrSerializedSize(data.polygon(), current_alignment);

    return current_alignment - initial_alignment;
}

void geometry_msgs::msg::PolygonStamped::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_polygon;

}

void geometry_msgs::msg::PolygonStamped::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_polygon;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void geometry_msgs::msg::PolygonStamped::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void geometry_msgs::msg::PolygonStamped::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& geometry_msgs::msg::PolygonStamped::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& geometry_msgs::msg::PolygonStamped::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member polygon
 * @param _polygon New value to be copied in member polygon
 */
void geometry_msgs::msg::PolygonStamped::polygon(
        const geometry_msgs::msg::Polygon& _polygon)
{
    m_polygon = _polygon;
}

/*!
 * @brief This function moves the value in member polygon
 * @param _polygon New value to be moved in member polygon
 */
void geometry_msgs::msg::PolygonStamped::polygon(
        geometry_msgs::msg::Polygon&& _polygon)
{
    m_polygon = std::move(_polygon);
}

/*!
 * @brief This function returns a constant reference to member polygon
 * @return Constant reference to member polygon
 */
const geometry_msgs::msg::Polygon& geometry_msgs::msg::PolygonStamped::polygon() const
{
    return m_polygon;
}

/*!
 * @brief This function returns a reference to member polygon
 * @return Reference to member polygon
 */
geometry_msgs::msg::Polygon& geometry_msgs::msg::PolygonStamped::polygon()
{
    return m_polygon;
}

size_t geometry_msgs::msg::PolygonStamped::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool geometry_msgs::msg::PolygonStamped::isKeyDefined()
{
    return false;
}

void geometry_msgs::msg::PolygonStamped::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


