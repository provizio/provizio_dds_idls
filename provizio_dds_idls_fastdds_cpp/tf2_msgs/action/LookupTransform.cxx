// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LookupTransform.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LookupTransform.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

tf2_msgs::action::LookupTransform_Goal::LookupTransform_Goal()
{
    // m_target_frame com.eprosima.idl.parser.typecode.StringTypeCode@7772054c
    m_target_frame ="";
    // m_source_frame com.eprosima.idl.parser.typecode.StringTypeCode@2f61f937
    m_source_frame ="";
    // m_source_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@46866946

    // m_timeout com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@44de0113

    // m_target_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@46866946

    // m_fixed_frame com.eprosima.idl.parser.typecode.StringTypeCode@236134a1
    m_fixed_frame ="";
    // m_advanced com.eprosima.idl.parser.typecode.PrimitiveTypeCode@369c9bb
    m_advanced = false;

}

tf2_msgs::action::LookupTransform_Goal::~LookupTransform_Goal()
{







}

tf2_msgs::action::LookupTransform_Goal::LookupTransform_Goal(
        const LookupTransform_Goal& x)
{
    m_target_frame = x.m_target_frame;
    m_source_frame = x.m_source_frame;
    m_source_time = x.m_source_time;
    m_timeout = x.m_timeout;
    m_target_time = x.m_target_time;
    m_fixed_frame = x.m_fixed_frame;
    m_advanced = x.m_advanced;
}

tf2_msgs::action::LookupTransform_Goal::LookupTransform_Goal(
        LookupTransform_Goal&& x) noexcept 
{
    m_target_frame = std::move(x.m_target_frame);
    m_source_frame = std::move(x.m_source_frame);
    m_source_time = std::move(x.m_source_time);
    m_timeout = std::move(x.m_timeout);
    m_target_time = std::move(x.m_target_time);
    m_fixed_frame = std::move(x.m_fixed_frame);
    m_advanced = x.m_advanced;
}

tf2_msgs::action::LookupTransform_Goal& tf2_msgs::action::LookupTransform_Goal::operator =(
        const LookupTransform_Goal& x)
{

    m_target_frame = x.m_target_frame;
    m_source_frame = x.m_source_frame;
    m_source_time = x.m_source_time;
    m_timeout = x.m_timeout;
    m_target_time = x.m_target_time;
    m_fixed_frame = x.m_fixed_frame;
    m_advanced = x.m_advanced;

    return *this;
}

tf2_msgs::action::LookupTransform_Goal& tf2_msgs::action::LookupTransform_Goal::operator =(
        LookupTransform_Goal&& x) noexcept
{

    m_target_frame = std::move(x.m_target_frame);
    m_source_frame = std::move(x.m_source_frame);
    m_source_time = std::move(x.m_source_time);
    m_timeout = std::move(x.m_timeout);
    m_target_time = std::move(x.m_target_time);
    m_fixed_frame = std::move(x.m_fixed_frame);
    m_advanced = x.m_advanced;

    return *this;
}

bool tf2_msgs::action::LookupTransform_Goal::operator ==(
        const LookupTransform_Goal& x) const
{

    return (m_target_frame == x.m_target_frame && m_source_frame == x.m_source_frame && m_source_time == x.m_source_time && m_timeout == x.m_timeout && m_target_time == x.m_target_time && m_fixed_frame == x.m_fixed_frame && m_advanced == x.m_advanced);
}

bool tf2_msgs::action::LookupTransform_Goal::operator !=(
        const LookupTransform_Goal& x) const
{
    return !(*this == x);
}

size_t tf2_msgs::action::LookupTransform_Goal::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += builtin_interfaces::msg::Duration::getMaxCdrSerializedSize(current_alignment);
    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t tf2_msgs::action::LookupTransform_Goal::getCdrSerializedSize(
        const tf2_msgs::action::LookupTransform_Goal& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.target_frame().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.source_frame().size() + 1;

    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.source_time(), current_alignment);
    current_alignment += builtin_interfaces::msg::Duration::getCdrSerializedSize(data.timeout(), current_alignment);
    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.target_time(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fixed_frame().size() + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void tf2_msgs::action::LookupTransform_Goal::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_target_frame.c_str();
    scdr << m_source_frame.c_str();
    scdr << m_source_time;
    scdr << m_timeout;
    scdr << m_target_time;
    scdr << m_fixed_frame.c_str();
    scdr << m_advanced;

}

void tf2_msgs::action::LookupTransform_Goal::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_target_frame;
    dcdr >> m_source_frame;
    dcdr >> m_source_time;
    dcdr >> m_timeout;
    dcdr >> m_target_time;
    dcdr >> m_fixed_frame;
    dcdr >> m_advanced;
}

/*!
 * @brief This function copies the value in member target_frame
 * @param _target_frame New value to be copied in member target_frame
 */
void tf2_msgs::action::LookupTransform_Goal::target_frame(
        const std::string& _target_frame)
{
    m_target_frame = _target_frame;
}

/*!
 * @brief This function moves the value in member target_frame
 * @param _target_frame New value to be moved in member target_frame
 */
void tf2_msgs::action::LookupTransform_Goal::target_frame(
        std::string&& _target_frame)
{
    m_target_frame = std::move(_target_frame);
}

/*!
 * @brief This function returns a constant reference to member target_frame
 * @return Constant reference to member target_frame
 */
const std::string& tf2_msgs::action::LookupTransform_Goal::target_frame() const
{
    return m_target_frame;
}

/*!
 * @brief This function returns a reference to member target_frame
 * @return Reference to member target_frame
 */
std::string& tf2_msgs::action::LookupTransform_Goal::target_frame()
{
    return m_target_frame;
}
/*!
 * @brief This function copies the value in member source_frame
 * @param _source_frame New value to be copied in member source_frame
 */
void tf2_msgs::action::LookupTransform_Goal::source_frame(
        const std::string& _source_frame)
{
    m_source_frame = _source_frame;
}

/*!
 * @brief This function moves the value in member source_frame
 * @param _source_frame New value to be moved in member source_frame
 */
void tf2_msgs::action::LookupTransform_Goal::source_frame(
        std::string&& _source_frame)
{
    m_source_frame = std::move(_source_frame);
}

/*!
 * @brief This function returns a constant reference to member source_frame
 * @return Constant reference to member source_frame
 */
const std::string& tf2_msgs::action::LookupTransform_Goal::source_frame() const
{
    return m_source_frame;
}

/*!
 * @brief This function returns a reference to member source_frame
 * @return Reference to member source_frame
 */
std::string& tf2_msgs::action::LookupTransform_Goal::source_frame()
{
    return m_source_frame;
}
/*!
 * @brief This function copies the value in member source_time
 * @param _source_time New value to be copied in member source_time
 */
void tf2_msgs::action::LookupTransform_Goal::source_time(
        const builtin_interfaces::msg::Time& _source_time)
{
    m_source_time = _source_time;
}

/*!
 * @brief This function moves the value in member source_time
 * @param _source_time New value to be moved in member source_time
 */
void tf2_msgs::action::LookupTransform_Goal::source_time(
        builtin_interfaces::msg::Time&& _source_time)
{
    m_source_time = std::move(_source_time);
}

/*!
 * @brief This function returns a constant reference to member source_time
 * @return Constant reference to member source_time
 */
const builtin_interfaces::msg::Time& tf2_msgs::action::LookupTransform_Goal::source_time() const
{
    return m_source_time;
}

/*!
 * @brief This function returns a reference to member source_time
 * @return Reference to member source_time
 */
builtin_interfaces::msg::Time& tf2_msgs::action::LookupTransform_Goal::source_time()
{
    return m_source_time;
}
/*!
 * @brief This function copies the value in member timeout
 * @param _timeout New value to be copied in member timeout
 */
void tf2_msgs::action::LookupTransform_Goal::timeout(
        const builtin_interfaces::msg::Duration& _timeout)
{
    m_timeout = _timeout;
}

/*!
 * @brief This function moves the value in member timeout
 * @param _timeout New value to be moved in member timeout
 */
void tf2_msgs::action::LookupTransform_Goal::timeout(
        builtin_interfaces::msg::Duration&& _timeout)
{
    m_timeout = std::move(_timeout);
}

/*!
 * @brief This function returns a constant reference to member timeout
 * @return Constant reference to member timeout
 */
const builtin_interfaces::msg::Duration& tf2_msgs::action::LookupTransform_Goal::timeout() const
{
    return m_timeout;
}

/*!
 * @brief This function returns a reference to member timeout
 * @return Reference to member timeout
 */
builtin_interfaces::msg::Duration& tf2_msgs::action::LookupTransform_Goal::timeout()
{
    return m_timeout;
}
/*!
 * @brief This function copies the value in member target_time
 * @param _target_time New value to be copied in member target_time
 */
void tf2_msgs::action::LookupTransform_Goal::target_time(
        const builtin_interfaces::msg::Time& _target_time)
{
    m_target_time = _target_time;
}

/*!
 * @brief This function moves the value in member target_time
 * @param _target_time New value to be moved in member target_time
 */
void tf2_msgs::action::LookupTransform_Goal::target_time(
        builtin_interfaces::msg::Time&& _target_time)
{
    m_target_time = std::move(_target_time);
}

/*!
 * @brief This function returns a constant reference to member target_time
 * @return Constant reference to member target_time
 */
const builtin_interfaces::msg::Time& tf2_msgs::action::LookupTransform_Goal::target_time() const
{
    return m_target_time;
}

/*!
 * @brief This function returns a reference to member target_time
 * @return Reference to member target_time
 */
builtin_interfaces::msg::Time& tf2_msgs::action::LookupTransform_Goal::target_time()
{
    return m_target_time;
}
/*!
 * @brief This function copies the value in member fixed_frame
 * @param _fixed_frame New value to be copied in member fixed_frame
 */
void tf2_msgs::action::LookupTransform_Goal::fixed_frame(
        const std::string& _fixed_frame)
{
    m_fixed_frame = _fixed_frame;
}

/*!
 * @brief This function moves the value in member fixed_frame
 * @param _fixed_frame New value to be moved in member fixed_frame
 */
void tf2_msgs::action::LookupTransform_Goal::fixed_frame(
        std::string&& _fixed_frame)
{
    m_fixed_frame = std::move(_fixed_frame);
}

/*!
 * @brief This function returns a constant reference to member fixed_frame
 * @return Constant reference to member fixed_frame
 */
const std::string& tf2_msgs::action::LookupTransform_Goal::fixed_frame() const
{
    return m_fixed_frame;
}

/*!
 * @brief This function returns a reference to member fixed_frame
 * @return Reference to member fixed_frame
 */
std::string& tf2_msgs::action::LookupTransform_Goal::fixed_frame()
{
    return m_fixed_frame;
}
/*!
 * @brief This function sets a value in member advanced
 * @param _advanced New value for member advanced
 */
void tf2_msgs::action::LookupTransform_Goal::advanced(
        bool _advanced)
{
    m_advanced = _advanced;
}

/*!
 * @brief This function returns the value of member advanced
 * @return Value of member advanced
 */
bool tf2_msgs::action::LookupTransform_Goal::advanced() const
{
    return m_advanced;
}

/*!
 * @brief This function returns a reference to member advanced
 * @return Reference to member advanced
 */
bool& tf2_msgs::action::LookupTransform_Goal::advanced()
{
    return m_advanced;
}


size_t tf2_msgs::action::LookupTransform_Goal::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;










    return current_align;
}

bool tf2_msgs::action::LookupTransform_Goal::isKeyDefined()
{
    return false;
}

void tf2_msgs::action::LookupTransform_Goal::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
           
}

tf2_msgs::action::LookupTransform_Result::LookupTransform_Result()
{
    // m_transform com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@76d05cc9

    // m_error com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@42b21d99


}

tf2_msgs::action::LookupTransform_Result::~LookupTransform_Result()
{


}

tf2_msgs::action::LookupTransform_Result::LookupTransform_Result(
        const LookupTransform_Result& x)
{
    m_transform = x.m_transform;
    m_error = x.m_error;
}

tf2_msgs::action::LookupTransform_Result::LookupTransform_Result(
        LookupTransform_Result&& x) noexcept 
{
    m_transform = std::move(x.m_transform);
    m_error = std::move(x.m_error);
}

tf2_msgs::action::LookupTransform_Result& tf2_msgs::action::LookupTransform_Result::operator =(
        const LookupTransform_Result& x)
{

    m_transform = x.m_transform;
    m_error = x.m_error;

    return *this;
}

tf2_msgs::action::LookupTransform_Result& tf2_msgs::action::LookupTransform_Result::operator =(
        LookupTransform_Result&& x) noexcept
{

    m_transform = std::move(x.m_transform);
    m_error = std::move(x.m_error);

    return *this;
}

bool tf2_msgs::action::LookupTransform_Result::operator ==(
        const LookupTransform_Result& x) const
{

    return (m_transform == x.m_transform && m_error == x.m_error);
}

bool tf2_msgs::action::LookupTransform_Result::operator !=(
        const LookupTransform_Result& x) const
{
    return !(*this == x);
}

size_t tf2_msgs::action::LookupTransform_Result::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += geometry_msgs::msg::TransformStamped::getMaxCdrSerializedSize(current_alignment);
    current_alignment += tf2_msgs::msg::TF2Error::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t tf2_msgs::action::LookupTransform_Result::getCdrSerializedSize(
        const tf2_msgs::action::LookupTransform_Result& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += geometry_msgs::msg::TransformStamped::getCdrSerializedSize(data.transform(), current_alignment);
    current_alignment += tf2_msgs::msg::TF2Error::getCdrSerializedSize(data.error(), current_alignment);

    return current_alignment - initial_alignment;
}

void tf2_msgs::action::LookupTransform_Result::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_transform;
    scdr << m_error;

}

void tf2_msgs::action::LookupTransform_Result::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_transform;
    dcdr >> m_error;
}

/*!
 * @brief This function copies the value in member transform
 * @param _transform New value to be copied in member transform
 */
void tf2_msgs::action::LookupTransform_Result::transform(
        const geometry_msgs::msg::TransformStamped& _transform)
{
    m_transform = _transform;
}

/*!
 * @brief This function moves the value in member transform
 * @param _transform New value to be moved in member transform
 */
void tf2_msgs::action::LookupTransform_Result::transform(
        geometry_msgs::msg::TransformStamped&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * @brief This function returns a constant reference to member transform
 * @return Constant reference to member transform
 */
const geometry_msgs::msg::TransformStamped& tf2_msgs::action::LookupTransform_Result::transform() const
{
    return m_transform;
}

/*!
 * @brief This function returns a reference to member transform
 * @return Reference to member transform
 */
geometry_msgs::msg::TransformStamped& tf2_msgs::action::LookupTransform_Result::transform()
{
    return m_transform;
}
/*!
 * @brief This function copies the value in member error
 * @param _error New value to be copied in member error
 */
void tf2_msgs::action::LookupTransform_Result::error(
        const tf2_msgs::msg::TF2Error& _error)
{
    m_error = _error;
}

/*!
 * @brief This function moves the value in member error
 * @param _error New value to be moved in member error
 */
void tf2_msgs::action::LookupTransform_Result::error(
        tf2_msgs::msg::TF2Error&& _error)
{
    m_error = std::move(_error);
}

/*!
 * @brief This function returns a constant reference to member error
 * @return Constant reference to member error
 */
const tf2_msgs::msg::TF2Error& tf2_msgs::action::LookupTransform_Result::error() const
{
    return m_error;
}

/*!
 * @brief This function returns a reference to member error
 * @return Reference to member error
 */
tf2_msgs::msg::TF2Error& tf2_msgs::action::LookupTransform_Result::error()
{
    return m_error;
}

size_t tf2_msgs::action::LookupTransform_Result::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool tf2_msgs::action::LookupTransform_Result::isKeyDefined()
{
    return false;
}

void tf2_msgs::action::LookupTransform_Result::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

tf2_msgs::action::LookupTransform_Feedback::LookupTransform_Feedback()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@68dcfd52
    m_structure_needs_at_least_one_member = 0;

}

tf2_msgs::action::LookupTransform_Feedback::~LookupTransform_Feedback()
{
}

tf2_msgs::action::LookupTransform_Feedback::LookupTransform_Feedback(
        const LookupTransform_Feedback& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

tf2_msgs::action::LookupTransform_Feedback::LookupTransform_Feedback(
        LookupTransform_Feedback&& x) noexcept 
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

tf2_msgs::action::LookupTransform_Feedback& tf2_msgs::action::LookupTransform_Feedback::operator =(
        const LookupTransform_Feedback& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

tf2_msgs::action::LookupTransform_Feedback& tf2_msgs::action::LookupTransform_Feedback::operator =(
        LookupTransform_Feedback&& x) noexcept
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool tf2_msgs::action::LookupTransform_Feedback::operator ==(
        const LookupTransform_Feedback& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool tf2_msgs::action::LookupTransform_Feedback::operator !=(
        const LookupTransform_Feedback& x) const
{
    return !(*this == x);
}

size_t tf2_msgs::action::LookupTransform_Feedback::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t tf2_msgs::action::LookupTransform_Feedback::getCdrSerializedSize(
        const tf2_msgs::action::LookupTransform_Feedback& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void tf2_msgs::action::LookupTransform_Feedback::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void tf2_msgs::action::LookupTransform_Feedback::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void tf2_msgs::action::LookupTransform_Feedback::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t tf2_msgs::action::LookupTransform_Feedback::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& tf2_msgs::action::LookupTransform_Feedback::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t tf2_msgs::action::LookupTransform_Feedback::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool tf2_msgs::action::LookupTransform_Feedback::isKeyDefined()
{
    return false;
}

void tf2_msgs::action::LookupTransform_Feedback::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


