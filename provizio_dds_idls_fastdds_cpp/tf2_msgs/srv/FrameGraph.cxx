// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file FrameGraph.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "FrameGraph.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

tf2_msgs::srv::FrameGraph_Request::FrameGraph_Request()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3bead518
    m_structure_needs_at_least_one_member = 0;

}

tf2_msgs::srv::FrameGraph_Request::~FrameGraph_Request()
{
}

tf2_msgs::srv::FrameGraph_Request::FrameGraph_Request(
        const FrameGraph_Request& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

tf2_msgs::srv::FrameGraph_Request::FrameGraph_Request(
        FrameGraph_Request&& x) noexcept 
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

tf2_msgs::srv::FrameGraph_Request& tf2_msgs::srv::FrameGraph_Request::operator =(
        const FrameGraph_Request& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

tf2_msgs::srv::FrameGraph_Request& tf2_msgs::srv::FrameGraph_Request::operator =(
        FrameGraph_Request&& x) noexcept
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool tf2_msgs::srv::FrameGraph_Request::operator ==(
        const FrameGraph_Request& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool tf2_msgs::srv::FrameGraph_Request::operator !=(
        const FrameGraph_Request& x) const
{
    return !(*this == x);
}

size_t tf2_msgs::srv::FrameGraph_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t tf2_msgs::srv::FrameGraph_Request::getCdrSerializedSize(
        const tf2_msgs::srv::FrameGraph_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void tf2_msgs::srv::FrameGraph_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void tf2_msgs::srv::FrameGraph_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void tf2_msgs::srv::FrameGraph_Request::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t tf2_msgs::srv::FrameGraph_Request::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& tf2_msgs::srv::FrameGraph_Request::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t tf2_msgs::srv::FrameGraph_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool tf2_msgs::srv::FrameGraph_Request::isKeyDefined()
{
    return false;
}

void tf2_msgs::srv::FrameGraph_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

tf2_msgs::srv::FrameGraph_Response::FrameGraph_Response()
{
    // m_frame_yaml com.eprosima.idl.parser.typecode.StringTypeCode@14bf57b2
    m_frame_yaml ="";

}

tf2_msgs::srv::FrameGraph_Response::~FrameGraph_Response()
{
}

tf2_msgs::srv::FrameGraph_Response::FrameGraph_Response(
        const FrameGraph_Response& x)
{
    m_frame_yaml = x.m_frame_yaml;
}

tf2_msgs::srv::FrameGraph_Response::FrameGraph_Response(
        FrameGraph_Response&& x) noexcept 
{
    m_frame_yaml = std::move(x.m_frame_yaml);
}

tf2_msgs::srv::FrameGraph_Response& tf2_msgs::srv::FrameGraph_Response::operator =(
        const FrameGraph_Response& x)
{

    m_frame_yaml = x.m_frame_yaml;

    return *this;
}

tf2_msgs::srv::FrameGraph_Response& tf2_msgs::srv::FrameGraph_Response::operator =(
        FrameGraph_Response&& x) noexcept
{

    m_frame_yaml = std::move(x.m_frame_yaml);

    return *this;
}

bool tf2_msgs::srv::FrameGraph_Response::operator ==(
        const FrameGraph_Response& x) const
{

    return (m_frame_yaml == x.m_frame_yaml);
}

bool tf2_msgs::srv::FrameGraph_Response::operator !=(
        const FrameGraph_Response& x) const
{
    return !(*this == x);
}

size_t tf2_msgs::srv::FrameGraph_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t tf2_msgs::srv::FrameGraph_Response::getCdrSerializedSize(
        const tf2_msgs::srv::FrameGraph_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_yaml().size() + 1;

    return current_alignment - initial_alignment;
}

void tf2_msgs::srv::FrameGraph_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_frame_yaml.c_str();

}

void tf2_msgs::srv::FrameGraph_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_frame_yaml;}

/*!
 * @brief This function copies the value in member frame_yaml
 * @param _frame_yaml New value to be copied in member frame_yaml
 */
void tf2_msgs::srv::FrameGraph_Response::frame_yaml(
        const std::string& _frame_yaml)
{
    m_frame_yaml = _frame_yaml;
}

/*!
 * @brief This function moves the value in member frame_yaml
 * @param _frame_yaml New value to be moved in member frame_yaml
 */
void tf2_msgs::srv::FrameGraph_Response::frame_yaml(
        std::string&& _frame_yaml)
{
    m_frame_yaml = std::move(_frame_yaml);
}

/*!
 * @brief This function returns a constant reference to member frame_yaml
 * @return Constant reference to member frame_yaml
 */
const std::string& tf2_msgs::srv::FrameGraph_Response::frame_yaml() const
{
    return m_frame_yaml;
}

/*!
 * @brief This function returns a reference to member frame_yaml
 * @return Reference to member frame_yaml
 */
std::string& tf2_msgs::srv::FrameGraph_Response::frame_yaml()
{
    return m_frame_yaml;
}

size_t tf2_msgs::srv::FrameGraph_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool tf2_msgs::srv::FrameGraph_Response::isKeyDefined()
{
    return false;
}

void tf2_msgs::srv::FrameGraph_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


