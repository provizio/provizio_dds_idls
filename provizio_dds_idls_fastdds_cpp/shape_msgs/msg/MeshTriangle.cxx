// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MeshTriangle.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MeshTriangle.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


shape_msgs::msg::MeshTriangle::MeshTriangle()
{
    // m_vertex_indices com.eprosima.idl.parser.typecode.AliasTypeCode@1377b1a0
    memset(&m_vertex_indices, 0, (3) * 4);

}

shape_msgs::msg::MeshTriangle::~MeshTriangle()
{
}

shape_msgs::msg::MeshTriangle::MeshTriangle(
        const MeshTriangle& x)
{
    m_vertex_indices = x.m_vertex_indices;
}

shape_msgs::msg::MeshTriangle::MeshTriangle(
        MeshTriangle&& x) noexcept 
{
    m_vertex_indices = std::move(x.m_vertex_indices);
}

shape_msgs::msg::MeshTriangle& shape_msgs::msg::MeshTriangle::operator =(
        const MeshTriangle& x)
{

    m_vertex_indices = x.m_vertex_indices;

    return *this;
}

shape_msgs::msg::MeshTriangle& shape_msgs::msg::MeshTriangle::operator =(
        MeshTriangle&& x) noexcept
{

    m_vertex_indices = std::move(x.m_vertex_indices);

    return *this;
}

bool shape_msgs::msg::MeshTriangle::operator ==(
        const MeshTriangle& x) const
{

    return (m_vertex_indices == x.m_vertex_indices);
}

bool shape_msgs::msg::MeshTriangle::operator !=(
        const MeshTriangle& x) const
{
    return !(*this == x);
}

size_t shape_msgs::msg::MeshTriangle::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t shape_msgs::msg::MeshTriangle::getCdrSerializedSize(
        const shape_msgs::msg::MeshTriangle& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void shape_msgs::msg::MeshTriangle::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_vertex_indices;


}

void shape_msgs::msg::MeshTriangle::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_vertex_indices;

}

/*!
 * @brief This function copies the value in member vertex_indices
 * @param _vertex_indices New value to be copied in member vertex_indices
 */
void shape_msgs::msg::MeshTriangle::vertex_indices(
        const shape_msgs::msg::uint32__3& _vertex_indices)
{
    m_vertex_indices = _vertex_indices;
}

/*!
 * @brief This function moves the value in member vertex_indices
 * @param _vertex_indices New value to be moved in member vertex_indices
 */
void shape_msgs::msg::MeshTriangle::vertex_indices(
        shape_msgs::msg::uint32__3&& _vertex_indices)
{
    m_vertex_indices = std::move(_vertex_indices);
}

/*!
 * @brief This function returns a constant reference to member vertex_indices
 * @return Constant reference to member vertex_indices
 */
const shape_msgs::msg::uint32__3& shape_msgs::msg::MeshTriangle::vertex_indices() const
{
    return m_vertex_indices;
}

/*!
 * @brief This function returns a reference to member vertex_indices
 * @return Reference to member vertex_indices
 */
shape_msgs::msg::uint32__3& shape_msgs::msg::MeshTriangle::vertex_indices()
{
    return m_vertex_indices;
}

size_t shape_msgs::msg::MeshTriangle::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool shape_msgs::msg::MeshTriangle::isKeyDefined()
{
    return false;
}

void shape_msgs::msg::MeshTriangle::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


