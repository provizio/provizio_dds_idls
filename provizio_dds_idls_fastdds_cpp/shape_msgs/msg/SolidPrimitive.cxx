// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SolidPrimitive.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SolidPrimitive.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>
















shape_msgs::msg::SolidPrimitive::SolidPrimitive()
{
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@22101c80
    m_type = 0;
    // m_dimensions com.eprosima.idl.parser.typecode.SequenceTypeCode@31ff1390

    // m_polygon com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@759d81f3


}

shape_msgs::msg::SolidPrimitive::~SolidPrimitive()
{



}

shape_msgs::msg::SolidPrimitive::SolidPrimitive(
        const SolidPrimitive& x)
{
    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_polygon = x.m_polygon;
}

shape_msgs::msg::SolidPrimitive::SolidPrimitive(
        SolidPrimitive&& x) noexcept 
{
    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_polygon = std::move(x.m_polygon);
}

shape_msgs::msg::SolidPrimitive& shape_msgs::msg::SolidPrimitive::operator =(
        const SolidPrimitive& x)
{

    m_type = x.m_type;
    m_dimensions = x.m_dimensions;
    m_polygon = x.m_polygon;

    return *this;
}

shape_msgs::msg::SolidPrimitive& shape_msgs::msg::SolidPrimitive::operator =(
        SolidPrimitive&& x) noexcept
{

    m_type = x.m_type;
    m_dimensions = std::move(x.m_dimensions);
    m_polygon = std::move(x.m_polygon);

    return *this;
}

bool shape_msgs::msg::SolidPrimitive::operator ==(
        const SolidPrimitive& x) const
{

    return (m_type == x.m_type && m_dimensions == x.m_dimensions && m_polygon == x.m_polygon);
}

bool shape_msgs::msg::SolidPrimitive::operator !=(
        const SolidPrimitive& x) const
{
    return !(*this == x);
}

size_t shape_msgs::msg::SolidPrimitive::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (3 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += geometry_msgs::msg::Polygon::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t shape_msgs::msg::SolidPrimitive::getCdrSerializedSize(
        const shape_msgs::msg::SolidPrimitive& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.dimensions().size() > 0)
    {
        current_alignment += (data.dimensions().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += geometry_msgs::msg::Polygon::getCdrSerializedSize(data.polygon(), current_alignment);

    return current_alignment - initial_alignment;
}

void shape_msgs::msg::SolidPrimitive::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_type;
    scdr << m_dimensions;
    scdr << m_polygon;

}

void shape_msgs::msg::SolidPrimitive::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_type;
    dcdr >> m_dimensions;
    dcdr >> m_polygon;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void shape_msgs::msg::SolidPrimitive::type(
        uint8_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t shape_msgs::msg::SolidPrimitive::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& shape_msgs::msg::SolidPrimitive::type()
{
    return m_type;
}

/*!
 * @brief This function copies the value in member dimensions
 * @param _dimensions New value to be copied in member dimensions
 */
void shape_msgs::msg::SolidPrimitive::dimensions(
        const std::vector<double>& _dimensions)
{
    m_dimensions = _dimensions;
}

/*!
 * @brief This function moves the value in member dimensions
 * @param _dimensions New value to be moved in member dimensions
 */
void shape_msgs::msg::SolidPrimitive::dimensions(
        std::vector<double>&& _dimensions)
{
    m_dimensions = std::move(_dimensions);
}

/*!
 * @brief This function returns a constant reference to member dimensions
 * @return Constant reference to member dimensions
 */
const std::vector<double>& shape_msgs::msg::SolidPrimitive::dimensions() const
{
    return m_dimensions;
}

/*!
 * @brief This function returns a reference to member dimensions
 * @return Reference to member dimensions
 */
std::vector<double>& shape_msgs::msg::SolidPrimitive::dimensions()
{
    return m_dimensions;
}
/*!
 * @brief This function copies the value in member polygon
 * @param _polygon New value to be copied in member polygon
 */
void shape_msgs::msg::SolidPrimitive::polygon(
        const geometry_msgs::msg::Polygon& _polygon)
{
    m_polygon = _polygon;
}

/*!
 * @brief This function moves the value in member polygon
 * @param _polygon New value to be moved in member polygon
 */
void shape_msgs::msg::SolidPrimitive::polygon(
        geometry_msgs::msg::Polygon&& _polygon)
{
    m_polygon = std::move(_polygon);
}

/*!
 * @brief This function returns a constant reference to member polygon
 * @return Constant reference to member polygon
 */
const geometry_msgs::msg::Polygon& shape_msgs::msg::SolidPrimitive::polygon() const
{
    return m_polygon;
}

/*!
 * @brief This function returns a reference to member polygon
 * @return Reference to member polygon
 */
geometry_msgs::msg::Polygon& shape_msgs::msg::SolidPrimitive::polygon()
{
    return m_polygon;
}

size_t shape_msgs::msg::SolidPrimitive::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool shape_msgs::msg::SolidPrimitive::isKeyDefined()
{
    return false;
}

void shape_msgs::msg::SolidPrimitive::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


