// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JointState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "JointState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

sensor_msgs::msg::JointState::JointState()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4d4d8fcf

    // m_name com.eprosima.idl.parser.typecode.SequenceTypeCode@610db97e

    // m_position com.eprosima.idl.parser.typecode.SequenceTypeCode@6f0628de

    // m_velocity com.eprosima.idl.parser.typecode.SequenceTypeCode@3fabf088

    // m_effort com.eprosima.idl.parser.typecode.SequenceTypeCode@1e392345


}

sensor_msgs::msg::JointState::~JointState()
{





}

sensor_msgs::msg::JointState::JointState(
        const JointState& x)
{
    m_header = x.m_header;
    m_name = x.m_name;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_effort = x.m_effort;
}

sensor_msgs::msg::JointState::JointState(
        JointState&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_name = std::move(x.m_name);
    m_position = std::move(x.m_position);
    m_velocity = std::move(x.m_velocity);
    m_effort = std::move(x.m_effort);
}

sensor_msgs::msg::JointState& sensor_msgs::msg::JointState::operator =(
        const JointState& x)
{

    m_header = x.m_header;
    m_name = x.m_name;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_effort = x.m_effort;

    return *this;
}

sensor_msgs::msg::JointState& sensor_msgs::msg::JointState::operator =(
        JointState&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_name = std::move(x.m_name);
    m_position = std::move(x.m_position);
    m_velocity = std::move(x.m_velocity);
    m_effort = std::move(x.m_effort);

    return *this;
}

bool sensor_msgs::msg::JointState::operator ==(
        const JointState& x) const
{

    return (m_header == x.m_header && m_name == x.m_name && m_position == x.m_position && m_velocity == x.m_velocity && m_effort == x.m_effort);
}

bool sensor_msgs::msg::JointState::operator !=(
        const JointState& x) const
{
    return !(*this == x);
}

size_t sensor_msgs::msg::JointState::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);




    return current_alignment - initial_alignment;
}

size_t sensor_msgs::msg::JointState::getCdrSerializedSize(
        const sensor_msgs::msg::JointState& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.name().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.name().at(a).size() + 1;
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.position().size() > 0)
    {
        current_alignment += (data.position().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.velocity().size() > 0)
    {
        current_alignment += (data.velocity().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.effort().size() > 0)
    {
        current_alignment += (data.effort().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }




    return current_alignment - initial_alignment;
}

void sensor_msgs::msg::JointState::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_name;
    scdr << m_position;
    scdr << m_velocity;
    scdr << m_effort;

}

void sensor_msgs::msg::JointState::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_name;
    dcdr >> m_position;
    dcdr >> m_velocity;
    dcdr >> m_effort;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::JointState::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::JointState::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::JointState::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::JointState::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void sensor_msgs::msg::JointState::name(
        const std::vector<std::string>& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void sensor_msgs::msg::JointState::name(
        std::vector<std::string>&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::vector<std::string>& sensor_msgs::msg::JointState::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::vector<std::string>& sensor_msgs::msg::JointState::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void sensor_msgs::msg::JointState::position(
        const std::vector<double>& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void sensor_msgs::msg::JointState::position(
        std::vector<double>&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const std::vector<double>& sensor_msgs::msg::JointState::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
std::vector<double>& sensor_msgs::msg::JointState::position()
{
    return m_position;
}
/*!
 * @brief This function copies the value in member velocity
 * @param _velocity New value to be copied in member velocity
 */
void sensor_msgs::msg::JointState::velocity(
        const std::vector<double>& _velocity)
{
    m_velocity = _velocity;
}

/*!
 * @brief This function moves the value in member velocity
 * @param _velocity New value to be moved in member velocity
 */
void sensor_msgs::msg::JointState::velocity(
        std::vector<double>&& _velocity)
{
    m_velocity = std::move(_velocity);
}

/*!
 * @brief This function returns a constant reference to member velocity
 * @return Constant reference to member velocity
 */
const std::vector<double>& sensor_msgs::msg::JointState::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
std::vector<double>& sensor_msgs::msg::JointState::velocity()
{
    return m_velocity;
}
/*!
 * @brief This function copies the value in member effort
 * @param _effort New value to be copied in member effort
 */
void sensor_msgs::msg::JointState::effort(
        const std::vector<double>& _effort)
{
    m_effort = _effort;
}

/*!
 * @brief This function moves the value in member effort
 * @param _effort New value to be moved in member effort
 */
void sensor_msgs::msg::JointState::effort(
        std::vector<double>&& _effort)
{
    m_effort = std::move(_effort);
}

/*!
 * @brief This function returns a constant reference to member effort
 * @return Constant reference to member effort
 */
const std::vector<double>& sensor_msgs::msg::JointState::effort() const
{
    return m_effort;
}

/*!
 * @brief This function returns a reference to member effort
 * @return Reference to member effort
 */
std::vector<double>& sensor_msgs::msg::JointState::effort()
{
    return m_effort;
}

size_t sensor_msgs::msg::JointState::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool sensor_msgs::msg::JointState::isKeyDefined()
{
    return false;
}

void sensor_msgs::msg::JointState::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}


