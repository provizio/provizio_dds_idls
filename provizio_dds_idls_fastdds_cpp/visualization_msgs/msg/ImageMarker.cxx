// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImageMarker.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ImageMarker.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>









visualization_msgs::msg::ImageMarker::ImageMarker()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@31133b6e

    // m_ns com.eprosima.idl.parser.typecode.StringTypeCode@29528a22
    m_ns ="";
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ea08277
    m_id = 0;
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6401d0a0
    m_type = 0;
    // m_action com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4ce14f05
    m_action = 0;
    // m_position com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@71dfcf21

    // m_scale com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b965857
    m_scale = 0.0;
    // m_outline_color com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@61f80d55

    // m_filled com.eprosima.idl.parser.typecode.PrimitiveTypeCode@27a7ef08
    m_filled = 0;
    // m_fill_color com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@61f80d55

    // m_lifetime com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@280e8a1a

    // m_points com.eprosima.idl.parser.typecode.SequenceTypeCode@11e33bac

    // m_outline_colors com.eprosima.idl.parser.typecode.SequenceTypeCode@30501e60


}

visualization_msgs::msg::ImageMarker::~ImageMarker()
{













}

visualization_msgs::msg::ImageMarker::ImageMarker(
        const ImageMarker& x)
{
    m_header = x.m_header;
    m_ns = x.m_ns;
    m_id = x.m_id;
    m_type = x.m_type;
    m_action = x.m_action;
    m_position = x.m_position;
    m_scale = x.m_scale;
    m_outline_color = x.m_outline_color;
    m_filled = x.m_filled;
    m_fill_color = x.m_fill_color;
    m_lifetime = x.m_lifetime;
    m_points = x.m_points;
    m_outline_colors = x.m_outline_colors;
}

visualization_msgs::msg::ImageMarker::ImageMarker(
        ImageMarker&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_ns = std::move(x.m_ns);
    m_id = x.m_id;
    m_type = x.m_type;
    m_action = x.m_action;
    m_position = std::move(x.m_position);
    m_scale = x.m_scale;
    m_outline_color = std::move(x.m_outline_color);
    m_filled = x.m_filled;
    m_fill_color = std::move(x.m_fill_color);
    m_lifetime = std::move(x.m_lifetime);
    m_points = std::move(x.m_points);
    m_outline_colors = std::move(x.m_outline_colors);
}

visualization_msgs::msg::ImageMarker& visualization_msgs::msg::ImageMarker::operator =(
        const ImageMarker& x)
{

    m_header = x.m_header;
    m_ns = x.m_ns;
    m_id = x.m_id;
    m_type = x.m_type;
    m_action = x.m_action;
    m_position = x.m_position;
    m_scale = x.m_scale;
    m_outline_color = x.m_outline_color;
    m_filled = x.m_filled;
    m_fill_color = x.m_fill_color;
    m_lifetime = x.m_lifetime;
    m_points = x.m_points;
    m_outline_colors = x.m_outline_colors;

    return *this;
}

visualization_msgs::msg::ImageMarker& visualization_msgs::msg::ImageMarker::operator =(
        ImageMarker&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_ns = std::move(x.m_ns);
    m_id = x.m_id;
    m_type = x.m_type;
    m_action = x.m_action;
    m_position = std::move(x.m_position);
    m_scale = x.m_scale;
    m_outline_color = std::move(x.m_outline_color);
    m_filled = x.m_filled;
    m_fill_color = std::move(x.m_fill_color);
    m_lifetime = std::move(x.m_lifetime);
    m_points = std::move(x.m_points);
    m_outline_colors = std::move(x.m_outline_colors);

    return *this;
}

bool visualization_msgs::msg::ImageMarker::operator ==(
        const ImageMarker& x) const
{

    return (m_header == x.m_header && m_ns == x.m_ns && m_id == x.m_id && m_type == x.m_type && m_action == x.m_action && m_position == x.m_position && m_scale == x.m_scale && m_outline_color == x.m_outline_color && m_filled == x.m_filled && m_fill_color == x.m_fill_color && m_lifetime == x.m_lifetime && m_points == x.m_points && m_outline_colors == x.m_outline_colors);
}

bool visualization_msgs::msg::ImageMarker::operator !=(
        const ImageMarker& x) const
{
    return !(*this == x);
}

size_t visualization_msgs::msg::ImageMarker::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Point::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += std_msgs::msg::ColorRGBA::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += std_msgs::msg::ColorRGBA::getMaxCdrSerializedSize(current_alignment);
    current_alignment += builtin_interfaces::msg::Duration::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += geometry_msgs::msg::Point::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += std_msgs::msg::ColorRGBA::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t visualization_msgs::msg::ImageMarker::getCdrSerializedSize(
        const visualization_msgs::msg::ImageMarker& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.ns().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.position(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += std_msgs::msg::ColorRGBA::getCdrSerializedSize(data.outline_color(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += std_msgs::msg::ColorRGBA::getCdrSerializedSize(data.fill_color(), current_alignment);
    current_alignment += builtin_interfaces::msg::Duration::getCdrSerializedSize(data.lifetime(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.points().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.points().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.outline_colors().size(); ++a)
    {
        current_alignment += std_msgs::msg::ColorRGBA::getCdrSerializedSize(data.outline_colors().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void visualization_msgs::msg::ImageMarker::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_ns.c_str();
    scdr << m_id;
    scdr << m_type;
    scdr << m_action;
    scdr << m_position;
    scdr << m_scale;
    scdr << m_outline_color;
    scdr << m_filled;
    scdr << m_fill_color;
    scdr << m_lifetime;
    scdr << m_points;
    scdr << m_outline_colors;

}

void visualization_msgs::msg::ImageMarker::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_ns;
    dcdr >> m_id;
    dcdr >> m_type;
    dcdr >> m_action;
    dcdr >> m_position;
    dcdr >> m_scale;
    dcdr >> m_outline_color;
    dcdr >> m_filled;
    dcdr >> m_fill_color;
    dcdr >> m_lifetime;
    dcdr >> m_points;
    dcdr >> m_outline_colors;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void visualization_msgs::msg::ImageMarker::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void visualization_msgs::msg::ImageMarker::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& visualization_msgs::msg::ImageMarker::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& visualization_msgs::msg::ImageMarker::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member ns
 * @param _ns New value to be copied in member ns
 */
void visualization_msgs::msg::ImageMarker::ns(
        const std::string& _ns)
{
    m_ns = _ns;
}

/*!
 * @brief This function moves the value in member ns
 * @param _ns New value to be moved in member ns
 */
void visualization_msgs::msg::ImageMarker::ns(
        std::string&& _ns)
{
    m_ns = std::move(_ns);
}

/*!
 * @brief This function returns a constant reference to member ns
 * @return Constant reference to member ns
 */
const std::string& visualization_msgs::msg::ImageMarker::ns() const
{
    return m_ns;
}

/*!
 * @brief This function returns a reference to member ns
 * @return Reference to member ns
 */
std::string& visualization_msgs::msg::ImageMarker::ns()
{
    return m_ns;
}
/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void visualization_msgs::msg::ImageMarker::id(
        int32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int32_t visualization_msgs::msg::ImageMarker::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int32_t& visualization_msgs::msg::ImageMarker::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void visualization_msgs::msg::ImageMarker::type(
        int32_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
int32_t visualization_msgs::msg::ImageMarker::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
int32_t& visualization_msgs::msg::ImageMarker::type()
{
    return m_type;
}

/*!
 * @brief This function sets a value in member action
 * @param _action New value for member action
 */
void visualization_msgs::msg::ImageMarker::action(
        int32_t _action)
{
    m_action = _action;
}

/*!
 * @brief This function returns the value of member action
 * @return Value of member action
 */
int32_t visualization_msgs::msg::ImageMarker::action() const
{
    return m_action;
}

/*!
 * @brief This function returns a reference to member action
 * @return Reference to member action
 */
int32_t& visualization_msgs::msg::ImageMarker::action()
{
    return m_action;
}

/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void visualization_msgs::msg::ImageMarker::position(
        const geometry_msgs::msg::Point& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void visualization_msgs::msg::ImageMarker::position(
        geometry_msgs::msg::Point&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const geometry_msgs::msg::Point& visualization_msgs::msg::ImageMarker::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
geometry_msgs::msg::Point& visualization_msgs::msg::ImageMarker::position()
{
    return m_position;
}
/*!
 * @brief This function sets a value in member scale
 * @param _scale New value for member scale
 */
void visualization_msgs::msg::ImageMarker::scale(
        float _scale)
{
    m_scale = _scale;
}

/*!
 * @brief This function returns the value of member scale
 * @return Value of member scale
 */
float visualization_msgs::msg::ImageMarker::scale() const
{
    return m_scale;
}

/*!
 * @brief This function returns a reference to member scale
 * @return Reference to member scale
 */
float& visualization_msgs::msg::ImageMarker::scale()
{
    return m_scale;
}

/*!
 * @brief This function copies the value in member outline_color
 * @param _outline_color New value to be copied in member outline_color
 */
void visualization_msgs::msg::ImageMarker::outline_color(
        const std_msgs::msg::ColorRGBA& _outline_color)
{
    m_outline_color = _outline_color;
}

/*!
 * @brief This function moves the value in member outline_color
 * @param _outline_color New value to be moved in member outline_color
 */
void visualization_msgs::msg::ImageMarker::outline_color(
        std_msgs::msg::ColorRGBA&& _outline_color)
{
    m_outline_color = std::move(_outline_color);
}

/*!
 * @brief This function returns a constant reference to member outline_color
 * @return Constant reference to member outline_color
 */
const std_msgs::msg::ColorRGBA& visualization_msgs::msg::ImageMarker::outline_color() const
{
    return m_outline_color;
}

/*!
 * @brief This function returns a reference to member outline_color
 * @return Reference to member outline_color
 */
std_msgs::msg::ColorRGBA& visualization_msgs::msg::ImageMarker::outline_color()
{
    return m_outline_color;
}
/*!
 * @brief This function sets a value in member filled
 * @param _filled New value for member filled
 */
void visualization_msgs::msg::ImageMarker::filled(
        uint8_t _filled)
{
    m_filled = _filled;
}

/*!
 * @brief This function returns the value of member filled
 * @return Value of member filled
 */
uint8_t visualization_msgs::msg::ImageMarker::filled() const
{
    return m_filled;
}

/*!
 * @brief This function returns a reference to member filled
 * @return Reference to member filled
 */
uint8_t& visualization_msgs::msg::ImageMarker::filled()
{
    return m_filled;
}

/*!
 * @brief This function copies the value in member fill_color
 * @param _fill_color New value to be copied in member fill_color
 */
void visualization_msgs::msg::ImageMarker::fill_color(
        const std_msgs::msg::ColorRGBA& _fill_color)
{
    m_fill_color = _fill_color;
}

/*!
 * @brief This function moves the value in member fill_color
 * @param _fill_color New value to be moved in member fill_color
 */
void visualization_msgs::msg::ImageMarker::fill_color(
        std_msgs::msg::ColorRGBA&& _fill_color)
{
    m_fill_color = std::move(_fill_color);
}

/*!
 * @brief This function returns a constant reference to member fill_color
 * @return Constant reference to member fill_color
 */
const std_msgs::msg::ColorRGBA& visualization_msgs::msg::ImageMarker::fill_color() const
{
    return m_fill_color;
}

/*!
 * @brief This function returns a reference to member fill_color
 * @return Reference to member fill_color
 */
std_msgs::msg::ColorRGBA& visualization_msgs::msg::ImageMarker::fill_color()
{
    return m_fill_color;
}
/*!
 * @brief This function copies the value in member lifetime
 * @param _lifetime New value to be copied in member lifetime
 */
void visualization_msgs::msg::ImageMarker::lifetime(
        const builtin_interfaces::msg::Duration& _lifetime)
{
    m_lifetime = _lifetime;
}

/*!
 * @brief This function moves the value in member lifetime
 * @param _lifetime New value to be moved in member lifetime
 */
void visualization_msgs::msg::ImageMarker::lifetime(
        builtin_interfaces::msg::Duration&& _lifetime)
{
    m_lifetime = std::move(_lifetime);
}

/*!
 * @brief This function returns a constant reference to member lifetime
 * @return Constant reference to member lifetime
 */
const builtin_interfaces::msg::Duration& visualization_msgs::msg::ImageMarker::lifetime() const
{
    return m_lifetime;
}

/*!
 * @brief This function returns a reference to member lifetime
 * @return Reference to member lifetime
 */
builtin_interfaces::msg::Duration& visualization_msgs::msg::ImageMarker::lifetime()
{
    return m_lifetime;
}
/*!
 * @brief This function copies the value in member points
 * @param _points New value to be copied in member points
 */
void visualization_msgs::msg::ImageMarker::points(
        const std::vector<geometry_msgs::msg::Point>& _points)
{
    m_points = _points;
}

/*!
 * @brief This function moves the value in member points
 * @param _points New value to be moved in member points
 */
void visualization_msgs::msg::ImageMarker::points(
        std::vector<geometry_msgs::msg::Point>&& _points)
{
    m_points = std::move(_points);
}

/*!
 * @brief This function returns a constant reference to member points
 * @return Constant reference to member points
 */
const std::vector<geometry_msgs::msg::Point>& visualization_msgs::msg::ImageMarker::points() const
{
    return m_points;
}

/*!
 * @brief This function returns a reference to member points
 * @return Reference to member points
 */
std::vector<geometry_msgs::msg::Point>& visualization_msgs::msg::ImageMarker::points()
{
    return m_points;
}
/*!
 * @brief This function copies the value in member outline_colors
 * @param _outline_colors New value to be copied in member outline_colors
 */
void visualization_msgs::msg::ImageMarker::outline_colors(
        const std::vector<std_msgs::msg::ColorRGBA>& _outline_colors)
{
    m_outline_colors = _outline_colors;
}

/*!
 * @brief This function moves the value in member outline_colors
 * @param _outline_colors New value to be moved in member outline_colors
 */
void visualization_msgs::msg::ImageMarker::outline_colors(
        std::vector<std_msgs::msg::ColorRGBA>&& _outline_colors)
{
    m_outline_colors = std::move(_outline_colors);
}

/*!
 * @brief This function returns a constant reference to member outline_colors
 * @return Constant reference to member outline_colors
 */
const std::vector<std_msgs::msg::ColorRGBA>& visualization_msgs::msg::ImageMarker::outline_colors() const
{
    return m_outline_colors;
}

/*!
 * @brief This function returns a reference to member outline_colors
 * @return Reference to member outline_colors
 */
std::vector<std_msgs::msg::ColorRGBA>& visualization_msgs::msg::ImageMarker::outline_colors()
{
    return m_outline_colors;
}

size_t visualization_msgs::msg::ImageMarker::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;
















    return current_align;
}

bool visualization_msgs::msg::ImageMarker::isKeyDefined()
{
    return false;
}

void visualization_msgs::msg::ImageMarker::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                 
}


