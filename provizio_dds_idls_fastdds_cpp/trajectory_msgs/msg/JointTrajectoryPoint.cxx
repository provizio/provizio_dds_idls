// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JointTrajectoryPoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "JointTrajectoryPoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

trajectory_msgs::msg::JointTrajectoryPoint::JointTrajectoryPoint()
{
    // m_positions com.eprosima.idl.parser.typecode.SequenceTypeCode@1cc93da4

    // m_velocities com.eprosima.idl.parser.typecode.SequenceTypeCode@69d2fb0a

    // m_accelerations com.eprosima.idl.parser.typecode.SequenceTypeCode@7e38e254

    // m_effort com.eprosima.idl.parser.typecode.SequenceTypeCode@7b3feb26

    // m_time_from_start com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2e4ecdf8


}

trajectory_msgs::msg::JointTrajectoryPoint::~JointTrajectoryPoint()
{





}

trajectory_msgs::msg::JointTrajectoryPoint::JointTrajectoryPoint(
        const JointTrajectoryPoint& x)
{
    m_positions = x.m_positions;
    m_velocities = x.m_velocities;
    m_accelerations = x.m_accelerations;
    m_effort = x.m_effort;
    m_time_from_start = x.m_time_from_start;
}

trajectory_msgs::msg::JointTrajectoryPoint::JointTrajectoryPoint(
        JointTrajectoryPoint&& x) noexcept 
{
    m_positions = std::move(x.m_positions);
    m_velocities = std::move(x.m_velocities);
    m_accelerations = std::move(x.m_accelerations);
    m_effort = std::move(x.m_effort);
    m_time_from_start = std::move(x.m_time_from_start);
}

trajectory_msgs::msg::JointTrajectoryPoint& trajectory_msgs::msg::JointTrajectoryPoint::operator =(
        const JointTrajectoryPoint& x)
{

    m_positions = x.m_positions;
    m_velocities = x.m_velocities;
    m_accelerations = x.m_accelerations;
    m_effort = x.m_effort;
    m_time_from_start = x.m_time_from_start;

    return *this;
}

trajectory_msgs::msg::JointTrajectoryPoint& trajectory_msgs::msg::JointTrajectoryPoint::operator =(
        JointTrajectoryPoint&& x) noexcept
{

    m_positions = std::move(x.m_positions);
    m_velocities = std::move(x.m_velocities);
    m_accelerations = std::move(x.m_accelerations);
    m_effort = std::move(x.m_effort);
    m_time_from_start = std::move(x.m_time_from_start);

    return *this;
}

bool trajectory_msgs::msg::JointTrajectoryPoint::operator ==(
        const JointTrajectoryPoint& x) const
{

    return (m_positions == x.m_positions && m_velocities == x.m_velocities && m_accelerations == x.m_accelerations && m_effort == x.m_effort && m_time_from_start == x.m_time_from_start);
}

bool trajectory_msgs::msg::JointTrajectoryPoint::operator !=(
        const JointTrajectoryPoint& x) const
{
    return !(*this == x);
}

size_t trajectory_msgs::msg::JointTrajectoryPoint::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += builtin_interfaces::msg::Duration::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t trajectory_msgs::msg::JointTrajectoryPoint::getCdrSerializedSize(
        const trajectory_msgs::msg::JointTrajectoryPoint& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.positions().size() > 0)
    {
        current_alignment += (data.positions().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.velocities().size() > 0)
    {
        current_alignment += (data.velocities().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.accelerations().size() > 0)
    {
        current_alignment += (data.accelerations().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.effort().size() > 0)
    {
        current_alignment += (data.effort().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += builtin_interfaces::msg::Duration::getCdrSerializedSize(data.time_from_start(), current_alignment);

    return current_alignment - initial_alignment;
}

void trajectory_msgs::msg::JointTrajectoryPoint::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_positions;
    scdr << m_velocities;
    scdr << m_accelerations;
    scdr << m_effort;
    scdr << m_time_from_start;

}

void trajectory_msgs::msg::JointTrajectoryPoint::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_positions;
    dcdr >> m_velocities;
    dcdr >> m_accelerations;
    dcdr >> m_effort;
    dcdr >> m_time_from_start;
}

/*!
 * @brief This function copies the value in member positions
 * @param _positions New value to be copied in member positions
 */
void trajectory_msgs::msg::JointTrajectoryPoint::positions(
        const std::vector<double>& _positions)
{
    m_positions = _positions;
}

/*!
 * @brief This function moves the value in member positions
 * @param _positions New value to be moved in member positions
 */
void trajectory_msgs::msg::JointTrajectoryPoint::positions(
        std::vector<double>&& _positions)
{
    m_positions = std::move(_positions);
}

/*!
 * @brief This function returns a constant reference to member positions
 * @return Constant reference to member positions
 */
const std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::positions() const
{
    return m_positions;
}

/*!
 * @brief This function returns a reference to member positions
 * @return Reference to member positions
 */
std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::positions()
{
    return m_positions;
}
/*!
 * @brief This function copies the value in member velocities
 * @param _velocities New value to be copied in member velocities
 */
void trajectory_msgs::msg::JointTrajectoryPoint::velocities(
        const std::vector<double>& _velocities)
{
    m_velocities = _velocities;
}

/*!
 * @brief This function moves the value in member velocities
 * @param _velocities New value to be moved in member velocities
 */
void trajectory_msgs::msg::JointTrajectoryPoint::velocities(
        std::vector<double>&& _velocities)
{
    m_velocities = std::move(_velocities);
}

/*!
 * @brief This function returns a constant reference to member velocities
 * @return Constant reference to member velocities
 */
const std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::velocities() const
{
    return m_velocities;
}

/*!
 * @brief This function returns a reference to member velocities
 * @return Reference to member velocities
 */
std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::velocities()
{
    return m_velocities;
}
/*!
 * @brief This function copies the value in member accelerations
 * @param _accelerations New value to be copied in member accelerations
 */
void trajectory_msgs::msg::JointTrajectoryPoint::accelerations(
        const std::vector<double>& _accelerations)
{
    m_accelerations = _accelerations;
}

/*!
 * @brief This function moves the value in member accelerations
 * @param _accelerations New value to be moved in member accelerations
 */
void trajectory_msgs::msg::JointTrajectoryPoint::accelerations(
        std::vector<double>&& _accelerations)
{
    m_accelerations = std::move(_accelerations);
}

/*!
 * @brief This function returns a constant reference to member accelerations
 * @return Constant reference to member accelerations
 */
const std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::accelerations() const
{
    return m_accelerations;
}

/*!
 * @brief This function returns a reference to member accelerations
 * @return Reference to member accelerations
 */
std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::accelerations()
{
    return m_accelerations;
}
/*!
 * @brief This function copies the value in member effort
 * @param _effort New value to be copied in member effort
 */
void trajectory_msgs::msg::JointTrajectoryPoint::effort(
        const std::vector<double>& _effort)
{
    m_effort = _effort;
}

/*!
 * @brief This function moves the value in member effort
 * @param _effort New value to be moved in member effort
 */
void trajectory_msgs::msg::JointTrajectoryPoint::effort(
        std::vector<double>&& _effort)
{
    m_effort = std::move(_effort);
}

/*!
 * @brief This function returns a constant reference to member effort
 * @return Constant reference to member effort
 */
const std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::effort() const
{
    return m_effort;
}

/*!
 * @brief This function returns a reference to member effort
 * @return Reference to member effort
 */
std::vector<double>& trajectory_msgs::msg::JointTrajectoryPoint::effort()
{
    return m_effort;
}
/*!
 * @brief This function copies the value in member time_from_start
 * @param _time_from_start New value to be copied in member time_from_start
 */
void trajectory_msgs::msg::JointTrajectoryPoint::time_from_start(
        const builtin_interfaces::msg::Duration& _time_from_start)
{
    m_time_from_start = _time_from_start;
}

/*!
 * @brief This function moves the value in member time_from_start
 * @param _time_from_start New value to be moved in member time_from_start
 */
void trajectory_msgs::msg::JointTrajectoryPoint::time_from_start(
        builtin_interfaces::msg::Duration&& _time_from_start)
{
    m_time_from_start = std::move(_time_from_start);
}

/*!
 * @brief This function returns a constant reference to member time_from_start
 * @return Constant reference to member time_from_start
 */
const builtin_interfaces::msg::Duration& trajectory_msgs::msg::JointTrajectoryPoint::time_from_start() const
{
    return m_time_from_start;
}

/*!
 * @brief This function returns a reference to member time_from_start
 * @return Reference to member time_from_start
 */
builtin_interfaces::msg::Duration& trajectory_msgs::msg::JointTrajectoryPoint::time_from_start()
{
    return m_time_from_start;
}

size_t trajectory_msgs::msg::JointTrajectoryPoint::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool trajectory_msgs::msg::JointTrajectoryPoint::isKeyDefined()
{
    return false;
}

void trajectory_msgs::msg::JointTrajectoryPoint::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}


