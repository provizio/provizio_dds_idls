// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MetricsMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MetricsMessage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

statistics_msgs::msg::MetricsMessage::MetricsMessage()
{
    // m_measurement_source_name com.eprosima.idl.parser.typecode.StringTypeCode@31ff1390
    m_measurement_source_name ="";
    // m_metrics_source com.eprosima.idl.parser.typecode.StringTypeCode@759d81f3
    m_metrics_source ="";
    // m_unit com.eprosima.idl.parser.typecode.StringTypeCode@781a9412
    m_unit ="";
    // m_window_start com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5a4c638d

    // m_window_stop com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5a4c638d

    // m_statistics com.eprosima.idl.parser.typecode.SequenceTypeCode@13e698c7


}

statistics_msgs::msg::MetricsMessage::~MetricsMessage()
{






}

statistics_msgs::msg::MetricsMessage::MetricsMessage(
        const MetricsMessage& x)
{
    m_measurement_source_name = x.m_measurement_source_name;
    m_metrics_source = x.m_metrics_source;
    m_unit = x.m_unit;
    m_window_start = x.m_window_start;
    m_window_stop = x.m_window_stop;
    m_statistics = x.m_statistics;
}

statistics_msgs::msg::MetricsMessage::MetricsMessage(
        MetricsMessage&& x) noexcept 
{
    m_measurement_source_name = std::move(x.m_measurement_source_name);
    m_metrics_source = std::move(x.m_metrics_source);
    m_unit = std::move(x.m_unit);
    m_window_start = std::move(x.m_window_start);
    m_window_stop = std::move(x.m_window_stop);
    m_statistics = std::move(x.m_statistics);
}

statistics_msgs::msg::MetricsMessage& statistics_msgs::msg::MetricsMessage::operator =(
        const MetricsMessage& x)
{

    m_measurement_source_name = x.m_measurement_source_name;
    m_metrics_source = x.m_metrics_source;
    m_unit = x.m_unit;
    m_window_start = x.m_window_start;
    m_window_stop = x.m_window_stop;
    m_statistics = x.m_statistics;

    return *this;
}

statistics_msgs::msg::MetricsMessage& statistics_msgs::msg::MetricsMessage::operator =(
        MetricsMessage&& x) noexcept
{

    m_measurement_source_name = std::move(x.m_measurement_source_name);
    m_metrics_source = std::move(x.m_metrics_source);
    m_unit = std::move(x.m_unit);
    m_window_start = std::move(x.m_window_start);
    m_window_stop = std::move(x.m_window_stop);
    m_statistics = std::move(x.m_statistics);

    return *this;
}

bool statistics_msgs::msg::MetricsMessage::operator ==(
        const MetricsMessage& x) const
{

    return (m_measurement_source_name == x.m_measurement_source_name && m_metrics_source == x.m_metrics_source && m_unit == x.m_unit && m_window_start == x.m_window_start && m_window_stop == x.m_window_stop && m_statistics == x.m_statistics);
}

bool statistics_msgs::msg::MetricsMessage::operator !=(
        const MetricsMessage& x) const
{
    return !(*this == x);
}

size_t statistics_msgs::msg::MetricsMessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += statistics_msgs::msg::StatisticDataPoint::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t statistics_msgs::msg::MetricsMessage::getCdrSerializedSize(
        const statistics_msgs::msg::MetricsMessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.measurement_source_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.metrics_source().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.unit().size() + 1;

    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.window_start(), current_alignment);
    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.window_stop(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.statistics().size(); ++a)
    {
        current_alignment += statistics_msgs::msg::StatisticDataPoint::getCdrSerializedSize(data.statistics().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void statistics_msgs::msg::MetricsMessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_measurement_source_name.c_str();
    scdr << m_metrics_source.c_str();
    scdr << m_unit.c_str();
    scdr << m_window_start;
    scdr << m_window_stop;
    scdr << m_statistics;

}

void statistics_msgs::msg::MetricsMessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_measurement_source_name;
    dcdr >> m_metrics_source;
    dcdr >> m_unit;
    dcdr >> m_window_start;
    dcdr >> m_window_stop;
    dcdr >> m_statistics;
}

/*!
 * @brief This function copies the value in member measurement_source_name
 * @param _measurement_source_name New value to be copied in member measurement_source_name
 */
void statistics_msgs::msg::MetricsMessage::measurement_source_name(
        const std::string& _measurement_source_name)
{
    m_measurement_source_name = _measurement_source_name;
}

/*!
 * @brief This function moves the value in member measurement_source_name
 * @param _measurement_source_name New value to be moved in member measurement_source_name
 */
void statistics_msgs::msg::MetricsMessage::measurement_source_name(
        std::string&& _measurement_source_name)
{
    m_measurement_source_name = std::move(_measurement_source_name);
}

/*!
 * @brief This function returns a constant reference to member measurement_source_name
 * @return Constant reference to member measurement_source_name
 */
const std::string& statistics_msgs::msg::MetricsMessage::measurement_source_name() const
{
    return m_measurement_source_name;
}

/*!
 * @brief This function returns a reference to member measurement_source_name
 * @return Reference to member measurement_source_name
 */
std::string& statistics_msgs::msg::MetricsMessage::measurement_source_name()
{
    return m_measurement_source_name;
}
/*!
 * @brief This function copies the value in member metrics_source
 * @param _metrics_source New value to be copied in member metrics_source
 */
void statistics_msgs::msg::MetricsMessage::metrics_source(
        const std::string& _metrics_source)
{
    m_metrics_source = _metrics_source;
}

/*!
 * @brief This function moves the value in member metrics_source
 * @param _metrics_source New value to be moved in member metrics_source
 */
void statistics_msgs::msg::MetricsMessage::metrics_source(
        std::string&& _metrics_source)
{
    m_metrics_source = std::move(_metrics_source);
}

/*!
 * @brief This function returns a constant reference to member metrics_source
 * @return Constant reference to member metrics_source
 */
const std::string& statistics_msgs::msg::MetricsMessage::metrics_source() const
{
    return m_metrics_source;
}

/*!
 * @brief This function returns a reference to member metrics_source
 * @return Reference to member metrics_source
 */
std::string& statistics_msgs::msg::MetricsMessage::metrics_source()
{
    return m_metrics_source;
}
/*!
 * @brief This function copies the value in member unit
 * @param _unit New value to be copied in member unit
 */
void statistics_msgs::msg::MetricsMessage::unit(
        const std::string& _unit)
{
    m_unit = _unit;
}

/*!
 * @brief This function moves the value in member unit
 * @param _unit New value to be moved in member unit
 */
void statistics_msgs::msg::MetricsMessage::unit(
        std::string&& _unit)
{
    m_unit = std::move(_unit);
}

/*!
 * @brief This function returns a constant reference to member unit
 * @return Constant reference to member unit
 */
const std::string& statistics_msgs::msg::MetricsMessage::unit() const
{
    return m_unit;
}

/*!
 * @brief This function returns a reference to member unit
 * @return Reference to member unit
 */
std::string& statistics_msgs::msg::MetricsMessage::unit()
{
    return m_unit;
}
/*!
 * @brief This function copies the value in member window_start
 * @param _window_start New value to be copied in member window_start
 */
void statistics_msgs::msg::MetricsMessage::window_start(
        const builtin_interfaces::msg::Time& _window_start)
{
    m_window_start = _window_start;
}

/*!
 * @brief This function moves the value in member window_start
 * @param _window_start New value to be moved in member window_start
 */
void statistics_msgs::msg::MetricsMessage::window_start(
        builtin_interfaces::msg::Time&& _window_start)
{
    m_window_start = std::move(_window_start);
}

/*!
 * @brief This function returns a constant reference to member window_start
 * @return Constant reference to member window_start
 */
const builtin_interfaces::msg::Time& statistics_msgs::msg::MetricsMessage::window_start() const
{
    return m_window_start;
}

/*!
 * @brief This function returns a reference to member window_start
 * @return Reference to member window_start
 */
builtin_interfaces::msg::Time& statistics_msgs::msg::MetricsMessage::window_start()
{
    return m_window_start;
}
/*!
 * @brief This function copies the value in member window_stop
 * @param _window_stop New value to be copied in member window_stop
 */
void statistics_msgs::msg::MetricsMessage::window_stop(
        const builtin_interfaces::msg::Time& _window_stop)
{
    m_window_stop = _window_stop;
}

/*!
 * @brief This function moves the value in member window_stop
 * @param _window_stop New value to be moved in member window_stop
 */
void statistics_msgs::msg::MetricsMessage::window_stop(
        builtin_interfaces::msg::Time&& _window_stop)
{
    m_window_stop = std::move(_window_stop);
}

/*!
 * @brief This function returns a constant reference to member window_stop
 * @return Constant reference to member window_stop
 */
const builtin_interfaces::msg::Time& statistics_msgs::msg::MetricsMessage::window_stop() const
{
    return m_window_stop;
}

/*!
 * @brief This function returns a reference to member window_stop
 * @return Reference to member window_stop
 */
builtin_interfaces::msg::Time& statistics_msgs::msg::MetricsMessage::window_stop()
{
    return m_window_stop;
}
/*!
 * @brief This function copies the value in member statistics
 * @param _statistics New value to be copied in member statistics
 */
void statistics_msgs::msg::MetricsMessage::statistics(
        const std::vector<statistics_msgs::msg::StatisticDataPoint>& _statistics)
{
    m_statistics = _statistics;
}

/*!
 * @brief This function moves the value in member statistics
 * @param _statistics New value to be moved in member statistics
 */
void statistics_msgs::msg::MetricsMessage::statistics(
        std::vector<statistics_msgs::msg::StatisticDataPoint>&& _statistics)
{
    m_statistics = std::move(_statistics);
}

/*!
 * @brief This function returns a constant reference to member statistics
 * @return Constant reference to member statistics
 */
const std::vector<statistics_msgs::msg::StatisticDataPoint>& statistics_msgs::msg::MetricsMessage::statistics() const
{
    return m_statistics;
}

/*!
 * @brief This function returns a reference to member statistics
 * @return Reference to member statistics
 */
std::vector<statistics_msgs::msg::StatisticDataPoint>& statistics_msgs::msg::MetricsMessage::statistics()
{
    return m_statistics;
}

size_t statistics_msgs::msg::MetricsMessage::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool statistics_msgs::msg::MetricsMessage::isKeyDefined()
{
    return false;
}

void statistics_msgs::msg::MetricsMessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}


