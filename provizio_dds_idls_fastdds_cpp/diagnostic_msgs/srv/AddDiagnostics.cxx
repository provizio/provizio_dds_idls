// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AddDiagnostics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "AddDiagnostics.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

diagnostic_msgs::srv::AddDiagnostics_Request::AddDiagnostics_Request()
{
    // m_load_namespace com.eprosima.idl.parser.typecode.StringTypeCode@50ad3bc1
    m_load_namespace ="";

}

diagnostic_msgs::srv::AddDiagnostics_Request::~AddDiagnostics_Request()
{
}

diagnostic_msgs::srv::AddDiagnostics_Request::AddDiagnostics_Request(
        const AddDiagnostics_Request& x)
{
    m_load_namespace = x.m_load_namespace;
}

diagnostic_msgs::srv::AddDiagnostics_Request::AddDiagnostics_Request(
        AddDiagnostics_Request&& x) noexcept 
{
    m_load_namespace = std::move(x.m_load_namespace);
}

diagnostic_msgs::srv::AddDiagnostics_Request& diagnostic_msgs::srv::AddDiagnostics_Request::operator =(
        const AddDiagnostics_Request& x)
{

    m_load_namespace = x.m_load_namespace;

    return *this;
}

diagnostic_msgs::srv::AddDiagnostics_Request& diagnostic_msgs::srv::AddDiagnostics_Request::operator =(
        AddDiagnostics_Request&& x) noexcept
{

    m_load_namespace = std::move(x.m_load_namespace);

    return *this;
}

bool diagnostic_msgs::srv::AddDiagnostics_Request::operator ==(
        const AddDiagnostics_Request& x) const
{

    return (m_load_namespace == x.m_load_namespace);
}

bool diagnostic_msgs::srv::AddDiagnostics_Request::operator !=(
        const AddDiagnostics_Request& x) const
{
    return !(*this == x);
}

size_t diagnostic_msgs::srv::AddDiagnostics_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t diagnostic_msgs::srv::AddDiagnostics_Request::getCdrSerializedSize(
        const diagnostic_msgs::srv::AddDiagnostics_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.load_namespace().size() + 1;

    return current_alignment - initial_alignment;
}

void diagnostic_msgs::srv::AddDiagnostics_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_load_namespace.c_str();

}

void diagnostic_msgs::srv::AddDiagnostics_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_load_namespace;}

/*!
 * @brief This function copies the value in member load_namespace
 * @param _load_namespace New value to be copied in member load_namespace
 */
void diagnostic_msgs::srv::AddDiagnostics_Request::load_namespace(
        const std::string& _load_namespace)
{
    m_load_namespace = _load_namespace;
}

/*!
 * @brief This function moves the value in member load_namespace
 * @param _load_namespace New value to be moved in member load_namespace
 */
void diagnostic_msgs::srv::AddDiagnostics_Request::load_namespace(
        std::string&& _load_namespace)
{
    m_load_namespace = std::move(_load_namespace);
}

/*!
 * @brief This function returns a constant reference to member load_namespace
 * @return Constant reference to member load_namespace
 */
const std::string& diagnostic_msgs::srv::AddDiagnostics_Request::load_namespace() const
{
    return m_load_namespace;
}

/*!
 * @brief This function returns a reference to member load_namespace
 * @return Reference to member load_namespace
 */
std::string& diagnostic_msgs::srv::AddDiagnostics_Request::load_namespace()
{
    return m_load_namespace;
}

size_t diagnostic_msgs::srv::AddDiagnostics_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool diagnostic_msgs::srv::AddDiagnostics_Request::isKeyDefined()
{
    return false;
}

void diagnostic_msgs::srv::AddDiagnostics_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

diagnostic_msgs::srv::AddDiagnostics_Response::AddDiagnostics_Response()
{
    // m_success com.eprosima.idl.parser.typecode.PrimitiveTypeCode@223aa2f7
    m_success = false;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@6d3a388c
    m_message ="";

}

diagnostic_msgs::srv::AddDiagnostics_Response::~AddDiagnostics_Response()
{


}

diagnostic_msgs::srv::AddDiagnostics_Response::AddDiagnostics_Response(
        const AddDiagnostics_Response& x)
{
    m_success = x.m_success;
    m_message = x.m_message;
}

diagnostic_msgs::srv::AddDiagnostics_Response::AddDiagnostics_Response(
        AddDiagnostics_Response&& x) noexcept 
{
    m_success = x.m_success;
    m_message = std::move(x.m_message);
}

diagnostic_msgs::srv::AddDiagnostics_Response& diagnostic_msgs::srv::AddDiagnostics_Response::operator =(
        const AddDiagnostics_Response& x)
{

    m_success = x.m_success;
    m_message = x.m_message;

    return *this;
}

diagnostic_msgs::srv::AddDiagnostics_Response& diagnostic_msgs::srv::AddDiagnostics_Response::operator =(
        AddDiagnostics_Response&& x) noexcept
{

    m_success = x.m_success;
    m_message = std::move(x.m_message);

    return *this;
}

bool diagnostic_msgs::srv::AddDiagnostics_Response::operator ==(
        const AddDiagnostics_Response& x) const
{

    return (m_success == x.m_success && m_message == x.m_message);
}

bool diagnostic_msgs::srv::AddDiagnostics_Response::operator !=(
        const AddDiagnostics_Response& x) const
{
    return !(*this == x);
}

size_t diagnostic_msgs::srv::AddDiagnostics_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t diagnostic_msgs::srv::AddDiagnostics_Response::getCdrSerializedSize(
        const diagnostic_msgs::srv::AddDiagnostics_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void diagnostic_msgs::srv::AddDiagnostics_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_success;
    scdr << m_message.c_str();

}

void diagnostic_msgs::srv::AddDiagnostics_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_success;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void diagnostic_msgs::srv::AddDiagnostics_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool diagnostic_msgs::srv::AddDiagnostics_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& diagnostic_msgs::srv::AddDiagnostics_Response::success()
{
    return m_success;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void diagnostic_msgs::srv::AddDiagnostics_Response::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void diagnostic_msgs::srv::AddDiagnostics_Response::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& diagnostic_msgs::srv::AddDiagnostics_Response::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& diagnostic_msgs::srv::AddDiagnostics_Response::message()
{
    return m_message;
}

size_t diagnostic_msgs::srv::AddDiagnostics_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool diagnostic_msgs::srv::AddDiagnostics_Response::isKeyDefined()
{
    return false;
}

void diagnostic_msgs::srv::AddDiagnostics_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


