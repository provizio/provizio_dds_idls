// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GridCells.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GridCells.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

nav_msgs::msg::GridCells::GridCells()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5f6722d3

    // m_cell_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2c532cd8
    m_cell_width = 0.0;
    // m_cell_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@294e5088
    m_cell_height = 0.0;
    // m_cells com.eprosima.idl.parser.typecode.SequenceTypeCode@51972dc7


}

nav_msgs::msg::GridCells::~GridCells()
{




}

nav_msgs::msg::GridCells::GridCells(
        const GridCells& x)
{
    m_header = x.m_header;
    m_cell_width = x.m_cell_width;
    m_cell_height = x.m_cell_height;
    m_cells = x.m_cells;
}

nav_msgs::msg::GridCells::GridCells(
        GridCells&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_cell_width = x.m_cell_width;
    m_cell_height = x.m_cell_height;
    m_cells = std::move(x.m_cells);
}

nav_msgs::msg::GridCells& nav_msgs::msg::GridCells::operator =(
        const GridCells& x)
{

    m_header = x.m_header;
    m_cell_width = x.m_cell_width;
    m_cell_height = x.m_cell_height;
    m_cells = x.m_cells;

    return *this;
}

nav_msgs::msg::GridCells& nav_msgs::msg::GridCells::operator =(
        GridCells&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_cell_width = x.m_cell_width;
    m_cell_height = x.m_cell_height;
    m_cells = std::move(x.m_cells);

    return *this;
}

bool nav_msgs::msg::GridCells::operator ==(
        const GridCells& x) const
{

    return (m_header == x.m_header && m_cell_width == x.m_cell_width && m_cell_height == x.m_cell_height && m_cells == x.m_cells);
}

bool nav_msgs::msg::GridCells::operator !=(
        const GridCells& x) const
{
    return !(*this == x);
}

size_t nav_msgs::msg::GridCells::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += geometry_msgs::msg::Point::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t nav_msgs::msg::GridCells::getCdrSerializedSize(
        const nav_msgs::msg::GridCells& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.cells().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.cells().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void nav_msgs::msg::GridCells::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_cell_width;
    scdr << m_cell_height;
    scdr << m_cells;

}

void nav_msgs::msg::GridCells::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_cell_width;
    dcdr >> m_cell_height;
    dcdr >> m_cells;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void nav_msgs::msg::GridCells::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void nav_msgs::msg::GridCells::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& nav_msgs::msg::GridCells::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& nav_msgs::msg::GridCells::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member cell_width
 * @param _cell_width New value for member cell_width
 */
void nav_msgs::msg::GridCells::cell_width(
        float _cell_width)
{
    m_cell_width = _cell_width;
}

/*!
 * @brief This function returns the value of member cell_width
 * @return Value of member cell_width
 */
float nav_msgs::msg::GridCells::cell_width() const
{
    return m_cell_width;
}

/*!
 * @brief This function returns a reference to member cell_width
 * @return Reference to member cell_width
 */
float& nav_msgs::msg::GridCells::cell_width()
{
    return m_cell_width;
}

/*!
 * @brief This function sets a value in member cell_height
 * @param _cell_height New value for member cell_height
 */
void nav_msgs::msg::GridCells::cell_height(
        float _cell_height)
{
    m_cell_height = _cell_height;
}

/*!
 * @brief This function returns the value of member cell_height
 * @return Value of member cell_height
 */
float nav_msgs::msg::GridCells::cell_height() const
{
    return m_cell_height;
}

/*!
 * @brief This function returns a reference to member cell_height
 * @return Reference to member cell_height
 */
float& nav_msgs::msg::GridCells::cell_height()
{
    return m_cell_height;
}

/*!
 * @brief This function copies the value in member cells
 * @param _cells New value to be copied in member cells
 */
void nav_msgs::msg::GridCells::cells(
        const std::vector<geometry_msgs::msg::Point>& _cells)
{
    m_cells = _cells;
}

/*!
 * @brief This function moves the value in member cells
 * @param _cells New value to be moved in member cells
 */
void nav_msgs::msg::GridCells::cells(
        std::vector<geometry_msgs::msg::Point>&& _cells)
{
    m_cells = std::move(_cells);
}

/*!
 * @brief This function returns a constant reference to member cells
 * @return Constant reference to member cells
 */
const std::vector<geometry_msgs::msg::Point>& nav_msgs::msg::GridCells::cells() const
{
    return m_cells;
}

/*!
 * @brief This function returns a reference to member cells
 * @return Reference to member cells
 */
std::vector<geometry_msgs::msg::Point>& nav_msgs::msg::GridCells::cells()
{
    return m_cells;
}

size_t nav_msgs::msg::GridCells::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool nav_msgs::msg::GridCells::isKeyDefined()
{
    return false;
}

void nav_msgs::msg::GridCells::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}


