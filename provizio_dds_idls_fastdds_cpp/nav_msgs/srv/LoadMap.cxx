// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoadMap.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LoadMap.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

nav_msgs::srv::LoadMap_Request::LoadMap_Request()
{
    // m_map_url com.eprosima.idl.parser.typecode.StringTypeCode@6e6d5d29
    m_map_url ="";

}

nav_msgs::srv::LoadMap_Request::~LoadMap_Request()
{
}

nav_msgs::srv::LoadMap_Request::LoadMap_Request(
        const LoadMap_Request& x)
{
    m_map_url = x.m_map_url;
}

nav_msgs::srv::LoadMap_Request::LoadMap_Request(
        LoadMap_Request&& x) noexcept 
{
    m_map_url = std::move(x.m_map_url);
}

nav_msgs::srv::LoadMap_Request& nav_msgs::srv::LoadMap_Request::operator =(
        const LoadMap_Request& x)
{

    m_map_url = x.m_map_url;

    return *this;
}

nav_msgs::srv::LoadMap_Request& nav_msgs::srv::LoadMap_Request::operator =(
        LoadMap_Request&& x) noexcept
{

    m_map_url = std::move(x.m_map_url);

    return *this;
}

bool nav_msgs::srv::LoadMap_Request::operator ==(
        const LoadMap_Request& x) const
{

    return (m_map_url == x.m_map_url);
}

bool nav_msgs::srv::LoadMap_Request::operator !=(
        const LoadMap_Request& x) const
{
    return !(*this == x);
}

size_t nav_msgs::srv::LoadMap_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t nav_msgs::srv::LoadMap_Request::getCdrSerializedSize(
        const nav_msgs::srv::LoadMap_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.map_url().size() + 1;

    return current_alignment - initial_alignment;
}

void nav_msgs::srv::LoadMap_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_map_url.c_str();

}

void nav_msgs::srv::LoadMap_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_map_url;}

/*!
 * @brief This function copies the value in member map_url
 * @param _map_url New value to be copied in member map_url
 */
void nav_msgs::srv::LoadMap_Request::map_url(
        const std::string& _map_url)
{
    m_map_url = _map_url;
}

/*!
 * @brief This function moves the value in member map_url
 * @param _map_url New value to be moved in member map_url
 */
void nav_msgs::srv::LoadMap_Request::map_url(
        std::string&& _map_url)
{
    m_map_url = std::move(_map_url);
}

/*!
 * @brief This function returns a constant reference to member map_url
 * @return Constant reference to member map_url
 */
const std::string& nav_msgs::srv::LoadMap_Request::map_url() const
{
    return m_map_url;
}

/*!
 * @brief This function returns a reference to member map_url
 * @return Reference to member map_url
 */
std::string& nav_msgs::srv::LoadMap_Request::map_url()
{
    return m_map_url;
}

size_t nav_msgs::srv::LoadMap_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool nav_msgs::srv::LoadMap_Request::isKeyDefined()
{
    return false;
}

void nav_msgs::srv::LoadMap_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}







nav_msgs::srv::LoadMap_Response::LoadMap_Response()
{
    // m_the_map com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@48a12036

    // m_result com.eprosima.idl.parser.typecode.PrimitiveTypeCode@bf1ec20
    m_result = 0;

}

nav_msgs::srv::LoadMap_Response::~LoadMap_Response()
{


}

nav_msgs::srv::LoadMap_Response::LoadMap_Response(
        const LoadMap_Response& x)
{
    m_the_map = x.m_the_map;
    m_result = x.m_result;
}

nav_msgs::srv::LoadMap_Response::LoadMap_Response(
        LoadMap_Response&& x) noexcept 
{
    m_the_map = std::move(x.m_the_map);
    m_result = x.m_result;
}

nav_msgs::srv::LoadMap_Response& nav_msgs::srv::LoadMap_Response::operator =(
        const LoadMap_Response& x)
{

    m_the_map = x.m_the_map;
    m_result = x.m_result;

    return *this;
}

nav_msgs::srv::LoadMap_Response& nav_msgs::srv::LoadMap_Response::operator =(
        LoadMap_Response&& x) noexcept
{

    m_the_map = std::move(x.m_the_map);
    m_result = x.m_result;

    return *this;
}

bool nav_msgs::srv::LoadMap_Response::operator ==(
        const LoadMap_Response& x) const
{

    return (m_the_map == x.m_the_map && m_result == x.m_result);
}

bool nav_msgs::srv::LoadMap_Response::operator !=(
        const LoadMap_Response& x) const
{
    return !(*this == x);
}

size_t nav_msgs::srv::LoadMap_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += nav_msgs::msg::OccupancyGrid::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t nav_msgs::srv::LoadMap_Response::getCdrSerializedSize(
        const nav_msgs::srv::LoadMap_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += nav_msgs::msg::OccupancyGrid::getCdrSerializedSize(data.the_map(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void nav_msgs::srv::LoadMap_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_the_map;
    scdr << m_result;

}

void nav_msgs::srv::LoadMap_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_the_map;
    dcdr >> m_result;
}

/*!
 * @brief This function copies the value in member the_map
 * @param _the_map New value to be copied in member the_map
 */
void nav_msgs::srv::LoadMap_Response::the_map(
        const nav_msgs::msg::OccupancyGrid& _the_map)
{
    m_the_map = _the_map;
}

/*!
 * @brief This function moves the value in member the_map
 * @param _the_map New value to be moved in member the_map
 */
void nav_msgs::srv::LoadMap_Response::the_map(
        nav_msgs::msg::OccupancyGrid&& _the_map)
{
    m_the_map = std::move(_the_map);
}

/*!
 * @brief This function returns a constant reference to member the_map
 * @return Constant reference to member the_map
 */
const nav_msgs::msg::OccupancyGrid& nav_msgs::srv::LoadMap_Response::the_map() const
{
    return m_the_map;
}

/*!
 * @brief This function returns a reference to member the_map
 * @return Reference to member the_map
 */
nav_msgs::msg::OccupancyGrid& nav_msgs::srv::LoadMap_Response::the_map()
{
    return m_the_map;
}
/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void nav_msgs::srv::LoadMap_Response::result(
        uint8_t _result)
{
    m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
uint8_t nav_msgs::srv::LoadMap_Response::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
uint8_t& nav_msgs::srv::LoadMap_Response::result()
{
    return m_result;
}


size_t nav_msgs::srv::LoadMap_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool nav_msgs::srv::LoadMap_Response::isKeyDefined()
{
    return false;
}

void nav_msgs::srv::LoadMap_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


