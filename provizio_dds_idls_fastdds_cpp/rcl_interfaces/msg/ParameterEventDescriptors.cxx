// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ParameterEventDescriptors.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ParameterEventDescriptors.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rcl_interfaces::msg::ParameterEventDescriptors::ParameterEventDescriptors()
{
    // m_new_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@6bb75258

    // m_changed_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@c260bdc

    // m_deleted_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@75e01201


}

rcl_interfaces::msg::ParameterEventDescriptors::~ParameterEventDescriptors()
{



}

rcl_interfaces::msg::ParameterEventDescriptors::ParameterEventDescriptors(
        const ParameterEventDescriptors& x)
{
    m_new_parameters = x.m_new_parameters;
    m_changed_parameters = x.m_changed_parameters;
    m_deleted_parameters = x.m_deleted_parameters;
}

rcl_interfaces::msg::ParameterEventDescriptors::ParameterEventDescriptors(
        ParameterEventDescriptors&& x) noexcept 
{
    m_new_parameters = std::move(x.m_new_parameters);
    m_changed_parameters = std::move(x.m_changed_parameters);
    m_deleted_parameters = std::move(x.m_deleted_parameters);
}

rcl_interfaces::msg::ParameterEventDescriptors& rcl_interfaces::msg::ParameterEventDescriptors::operator =(
        const ParameterEventDescriptors& x)
{

    m_new_parameters = x.m_new_parameters;
    m_changed_parameters = x.m_changed_parameters;
    m_deleted_parameters = x.m_deleted_parameters;

    return *this;
}

rcl_interfaces::msg::ParameterEventDescriptors& rcl_interfaces::msg::ParameterEventDescriptors::operator =(
        ParameterEventDescriptors&& x) noexcept
{

    m_new_parameters = std::move(x.m_new_parameters);
    m_changed_parameters = std::move(x.m_changed_parameters);
    m_deleted_parameters = std::move(x.m_deleted_parameters);

    return *this;
}

bool rcl_interfaces::msg::ParameterEventDescriptors::operator ==(
        const ParameterEventDescriptors& x) const
{

    return (m_new_parameters == x.m_new_parameters && m_changed_parameters == x.m_changed_parameters && m_deleted_parameters == x.m_deleted_parameters);
}

bool rcl_interfaces::msg::ParameterEventDescriptors::operator !=(
        const ParameterEventDescriptors& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::msg::ParameterEventDescriptors::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterDescriptor::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterDescriptor::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterDescriptor::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::msg::ParameterEventDescriptors::getCdrSerializedSize(
        const rcl_interfaces::msg::ParameterEventDescriptors& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.new_parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterDescriptor::getCdrSerializedSize(data.new_parameters().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.changed_parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterDescriptor::getCdrSerializedSize(data.changed_parameters().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.deleted_parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterDescriptor::getCdrSerializedSize(data.deleted_parameters().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void rcl_interfaces::msg::ParameterEventDescriptors::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_new_parameters;
    scdr << m_changed_parameters;
    scdr << m_deleted_parameters;
}

void rcl_interfaces::msg::ParameterEventDescriptors::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_new_parameters;
    dcdr >> m_changed_parameters;
    dcdr >> m_deleted_parameters;
}

/*!
 * @brief This function copies the value in member new_parameters
 * @param _new_parameters New value to be copied in member new_parameters
 */
void rcl_interfaces::msg::ParameterEventDescriptors::new_parameters(
        const std::vector<rcl_interfaces::msg::ParameterDescriptor>& _new_parameters)
{
    m_new_parameters = _new_parameters;
}

/*!
 * @brief This function moves the value in member new_parameters
 * @param _new_parameters New value to be moved in member new_parameters
 */
void rcl_interfaces::msg::ParameterEventDescriptors::new_parameters(
        std::vector<rcl_interfaces::msg::ParameterDescriptor>&& _new_parameters)
{
    m_new_parameters = std::move(_new_parameters);
}

/*!
 * @brief This function returns a constant reference to member new_parameters
 * @return Constant reference to member new_parameters
 */
const std::vector<rcl_interfaces::msg::ParameterDescriptor>& rcl_interfaces::msg::ParameterEventDescriptors::new_parameters() const
{
    return m_new_parameters;
}

/*!
 * @brief This function returns a reference to member new_parameters
 * @return Reference to member new_parameters
 */
std::vector<rcl_interfaces::msg::ParameterDescriptor>& rcl_interfaces::msg::ParameterEventDescriptors::new_parameters()
{
    return m_new_parameters;
}
/*!
 * @brief This function copies the value in member changed_parameters
 * @param _changed_parameters New value to be copied in member changed_parameters
 */
void rcl_interfaces::msg::ParameterEventDescriptors::changed_parameters(
        const std::vector<rcl_interfaces::msg::ParameterDescriptor>& _changed_parameters)
{
    m_changed_parameters = _changed_parameters;
}

/*!
 * @brief This function moves the value in member changed_parameters
 * @param _changed_parameters New value to be moved in member changed_parameters
 */
void rcl_interfaces::msg::ParameterEventDescriptors::changed_parameters(
        std::vector<rcl_interfaces::msg::ParameterDescriptor>&& _changed_parameters)
{
    m_changed_parameters = std::move(_changed_parameters);
}

/*!
 * @brief This function returns a constant reference to member changed_parameters
 * @return Constant reference to member changed_parameters
 */
const std::vector<rcl_interfaces::msg::ParameterDescriptor>& rcl_interfaces::msg::ParameterEventDescriptors::changed_parameters() const
{
    return m_changed_parameters;
}

/*!
 * @brief This function returns a reference to member changed_parameters
 * @return Reference to member changed_parameters
 */
std::vector<rcl_interfaces::msg::ParameterDescriptor>& rcl_interfaces::msg::ParameterEventDescriptors::changed_parameters()
{
    return m_changed_parameters;
}
/*!
 * @brief This function copies the value in member deleted_parameters
 * @param _deleted_parameters New value to be copied in member deleted_parameters
 */
void rcl_interfaces::msg::ParameterEventDescriptors::deleted_parameters(
        const std::vector<rcl_interfaces::msg::ParameterDescriptor>& _deleted_parameters)
{
    m_deleted_parameters = _deleted_parameters;
}

/*!
 * @brief This function moves the value in member deleted_parameters
 * @param _deleted_parameters New value to be moved in member deleted_parameters
 */
void rcl_interfaces::msg::ParameterEventDescriptors::deleted_parameters(
        std::vector<rcl_interfaces::msg::ParameterDescriptor>&& _deleted_parameters)
{
    m_deleted_parameters = std::move(_deleted_parameters);
}

/*!
 * @brief This function returns a constant reference to member deleted_parameters
 * @return Constant reference to member deleted_parameters
 */
const std::vector<rcl_interfaces::msg::ParameterDescriptor>& rcl_interfaces::msg::ParameterEventDescriptors::deleted_parameters() const
{
    return m_deleted_parameters;
}

/*!
 * @brief This function returns a reference to member deleted_parameters
 * @return Reference to member deleted_parameters
 */
std::vector<rcl_interfaces::msg::ParameterDescriptor>& rcl_interfaces::msg::ParameterEventDescriptors::deleted_parameters()
{
    return m_deleted_parameters;
}

size_t rcl_interfaces::msg::ParameterEventDescriptors::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool rcl_interfaces::msg::ParameterEventDescriptors::isKeyDefined()
{
    return false;
}

void rcl_interfaces::msg::ParameterEventDescriptors::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


