// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Log.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Log.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>







rcl_interfaces::msg::Log::Log()
{
    // m_stamp com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5dd91bca

    // m_level com.eprosima.idl.parser.typecode.PrimitiveTypeCode@40cb698e
    m_level = 0;
    // m_name com.eprosima.idl.parser.typecode.StringTypeCode@3382f8ae
    m_name ="";
    // m_msg com.eprosima.idl.parser.typecode.StringTypeCode@60641ec8
    m_msg ="";
    // m_file com.eprosima.idl.parser.typecode.StringTypeCode@75f65e45
    m_file ="";
    // m_function com.eprosima.idl.parser.typecode.StringTypeCode@6eeade6c
    m_function ="";
    // m_line com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4a891c97
    m_line = 0;

}

rcl_interfaces::msg::Log::~Log()
{







}

rcl_interfaces::msg::Log::Log(
        const Log& x)
{
    m_stamp = x.m_stamp;
    m_level = x.m_level;
    m_name = x.m_name;
    m_msg = x.m_msg;
    m_file = x.m_file;
    m_function = x.m_function;
    m_line = x.m_line;
}

rcl_interfaces::msg::Log::Log(
        Log&& x) noexcept 
{
    m_stamp = std::move(x.m_stamp);
    m_level = x.m_level;
    m_name = std::move(x.m_name);
    m_msg = std::move(x.m_msg);
    m_file = std::move(x.m_file);
    m_function = std::move(x.m_function);
    m_line = x.m_line;
}

rcl_interfaces::msg::Log& rcl_interfaces::msg::Log::operator =(
        const Log& x)
{

    m_stamp = x.m_stamp;
    m_level = x.m_level;
    m_name = x.m_name;
    m_msg = x.m_msg;
    m_file = x.m_file;
    m_function = x.m_function;
    m_line = x.m_line;

    return *this;
}

rcl_interfaces::msg::Log& rcl_interfaces::msg::Log::operator =(
        Log&& x) noexcept
{

    m_stamp = std::move(x.m_stamp);
    m_level = x.m_level;
    m_name = std::move(x.m_name);
    m_msg = std::move(x.m_msg);
    m_file = std::move(x.m_file);
    m_function = std::move(x.m_function);
    m_line = x.m_line;

    return *this;
}

bool rcl_interfaces::msg::Log::operator ==(
        const Log& x) const
{

    return (m_stamp == x.m_stamp && m_level == x.m_level && m_name == x.m_name && m_msg == x.m_msg && m_file == x.m_file && m_function == x.m_function && m_line == x.m_line);
}

bool rcl_interfaces::msg::Log::operator !=(
        const Log& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::msg::Log::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::msg::Log::getCdrSerializedSize(
        const rcl_interfaces::msg::Log& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.msg().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.file().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.function().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void rcl_interfaces::msg::Log::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_stamp;
    scdr << m_level;
    scdr << m_name.c_str();
    scdr << m_msg.c_str();
    scdr << m_file.c_str();
    scdr << m_function.c_str();
    scdr << m_line;

}

void rcl_interfaces::msg::Log::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_stamp;
    dcdr >> m_level;
    dcdr >> m_name;
    dcdr >> m_msg;
    dcdr >> m_file;
    dcdr >> m_function;
    dcdr >> m_line;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void rcl_interfaces::msg::Log::stamp(
        const builtin_interfaces::msg::Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void rcl_interfaces::msg::Log::stamp(
        builtin_interfaces::msg::Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::Time& rcl_interfaces::msg::Log::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::Time& rcl_interfaces::msg::Log::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function sets a value in member level
 * @param _level New value for member level
 */
void rcl_interfaces::msg::Log::level(
        uint8_t _level)
{
    m_level = _level;
}

/*!
 * @brief This function returns the value of member level
 * @return Value of member level
 */
uint8_t rcl_interfaces::msg::Log::level() const
{
    return m_level;
}

/*!
 * @brief This function returns a reference to member level
 * @return Reference to member level
 */
uint8_t& rcl_interfaces::msg::Log::level()
{
    return m_level;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void rcl_interfaces::msg::Log::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void rcl_interfaces::msg::Log::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& rcl_interfaces::msg::Log::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& rcl_interfaces::msg::Log::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member msg
 * @param _msg New value to be copied in member msg
 */
void rcl_interfaces::msg::Log::msg(
        const std::string& _msg)
{
    m_msg = _msg;
}

/*!
 * @brief This function moves the value in member msg
 * @param _msg New value to be moved in member msg
 */
void rcl_interfaces::msg::Log::msg(
        std::string&& _msg)
{
    m_msg = std::move(_msg);
}

/*!
 * @brief This function returns a constant reference to member msg
 * @return Constant reference to member msg
 */
const std::string& rcl_interfaces::msg::Log::msg() const
{
    return m_msg;
}

/*!
 * @brief This function returns a reference to member msg
 * @return Reference to member msg
 */
std::string& rcl_interfaces::msg::Log::msg()
{
    return m_msg;
}
/*!
 * @brief This function copies the value in member file
 * @param _file New value to be copied in member file
 */
void rcl_interfaces::msg::Log::file(
        const std::string& _file)
{
    m_file = _file;
}

/*!
 * @brief This function moves the value in member file
 * @param _file New value to be moved in member file
 */
void rcl_interfaces::msg::Log::file(
        std::string&& _file)
{
    m_file = std::move(_file);
}

/*!
 * @brief This function returns a constant reference to member file
 * @return Constant reference to member file
 */
const std::string& rcl_interfaces::msg::Log::file() const
{
    return m_file;
}

/*!
 * @brief This function returns a reference to member file
 * @return Reference to member file
 */
std::string& rcl_interfaces::msg::Log::file()
{
    return m_file;
}
/*!
 * @brief This function copies the value in member function
 * @param _function New value to be copied in member function
 */
void rcl_interfaces::msg::Log::function(
        const std::string& _function)
{
    m_function = _function;
}

/*!
 * @brief This function moves the value in member function
 * @param _function New value to be moved in member function
 */
void rcl_interfaces::msg::Log::function(
        std::string&& _function)
{
    m_function = std::move(_function);
}

/*!
 * @brief This function returns a constant reference to member function
 * @return Constant reference to member function
 */
const std::string& rcl_interfaces::msg::Log::function() const
{
    return m_function;
}

/*!
 * @brief This function returns a reference to member function
 * @return Reference to member function
 */
std::string& rcl_interfaces::msg::Log::function()
{
    return m_function;
}
/*!
 * @brief This function sets a value in member line
 * @param _line New value for member line
 */
void rcl_interfaces::msg::Log::line(
        uint32_t _line)
{
    m_line = _line;
}

/*!
 * @brief This function returns the value of member line
 * @return Value of member line
 */
uint32_t rcl_interfaces::msg::Log::line() const
{
    return m_line;
}

/*!
 * @brief This function returns a reference to member line
 * @return Reference to member line
 */
uint32_t& rcl_interfaces::msg::Log::line()
{
    return m_line;
}


size_t rcl_interfaces::msg::Log::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;










    return current_align;
}

bool rcl_interfaces::msg::Log::isKeyDefined()
{
    return false;
}

void rcl_interfaces::msg::Log::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
           
}


