// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Log.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_LOG_H_
#define _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_LOG_H_

#include "builtin_interfaces/msg/Time.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Log_SOURCE)
#define Log_DllAPI __declspec( dllexport )
#else
#define Log_DllAPI __declspec( dllimport )
#endif // Log_SOURCE
#else
#define Log_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Log_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace rcl_interfaces {
    namespace msg {
        namespace Log_Constants {
            const uint8_t DEBUG = 10;
            const uint8_t INFO = 20;
            const uint8_t WARN = 30;
            const uint8_t ERROR = 40;
            const uint8_t FATAL = 50;
        } // namespace Log_Constants
        /*!
         * @brief This class represents the structure Log defined by the user in the IDL file.
         * @ingroup LOG
         */
        class Log
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Log();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Log();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object rcl_interfaces::msg::Log that will be copied.
             */
            eProsima_user_DllExport Log(
                    const Log& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object rcl_interfaces::msg::Log that will be copied.
             */
            eProsima_user_DllExport Log(
                    Log&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object rcl_interfaces::msg::Log that will be copied.
             */
            eProsima_user_DllExport Log& operator =(
                    const Log& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object rcl_interfaces::msg::Log that will be copied.
             */
            eProsima_user_DllExport Log& operator =(
                    Log&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::msg::Log object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Log& x) const;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::msg::Log object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Log& x) const;

            /*!
             * @brief This function copies the value in member stamp
             * @param _stamp New value to be copied in member stamp
             */
            eProsima_user_DllExport void stamp(
                    const builtin_interfaces::msg::Time& _stamp);

            /*!
             * @brief This function moves the value in member stamp
             * @param _stamp New value to be moved in member stamp
             */
            eProsima_user_DllExport void stamp(
                    builtin_interfaces::msg::Time&& _stamp);

            /*!
             * @brief This function returns a constant reference to member stamp
             * @return Constant reference to member stamp
             */
            eProsima_user_DllExport const builtin_interfaces::msg::Time& stamp() const;

            /*!
             * @brief This function returns a reference to member stamp
             * @return Reference to member stamp
             */
            eProsima_user_DllExport builtin_interfaces::msg::Time& stamp();
            /*!
             * @brief This function sets a value in member level
             * @param _level New value for member level
             */
            eProsima_user_DllExport void level(
                    uint8_t _level);

            /*!
             * @brief This function returns the value of member level
             * @return Value of member level
             */
            eProsima_user_DllExport uint8_t level() const;

            /*!
             * @brief This function returns a reference to member level
             * @return Reference to member level
             */
            eProsima_user_DllExport uint8_t& level();

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function copies the value in member msg
             * @param _msg New value to be copied in member msg
             */
            eProsima_user_DllExport void msg(
                    const std::string& _msg);

            /*!
             * @brief This function moves the value in member msg
             * @param _msg New value to be moved in member msg
             */
            eProsima_user_DllExport void msg(
                    std::string&& _msg);

            /*!
             * @brief This function returns a constant reference to member msg
             * @return Constant reference to member msg
             */
            eProsima_user_DllExport const std::string& msg() const;

            /*!
             * @brief This function returns a reference to member msg
             * @return Reference to member msg
             */
            eProsima_user_DllExport std::string& msg();
            /*!
             * @brief This function copies the value in member file
             * @param _file New value to be copied in member file
             */
            eProsima_user_DllExport void file(
                    const std::string& _file);

            /*!
             * @brief This function moves the value in member file
             * @param _file New value to be moved in member file
             */
            eProsima_user_DllExport void file(
                    std::string&& _file);

            /*!
             * @brief This function returns a constant reference to member file
             * @return Constant reference to member file
             */
            eProsima_user_DllExport const std::string& file() const;

            /*!
             * @brief This function returns a reference to member file
             * @return Reference to member file
             */
            eProsima_user_DllExport std::string& file();
            /*!
             * @brief This function copies the value in member function
             * @param _function New value to be copied in member function
             */
            eProsima_user_DllExport void function(
                    const std::string& _function);

            /*!
             * @brief This function moves the value in member function
             * @param _function New value to be moved in member function
             */
            eProsima_user_DllExport void function(
                    std::string&& _function);

            /*!
             * @brief This function returns a constant reference to member function
             * @return Constant reference to member function
             */
            eProsima_user_DllExport const std::string& function() const;

            /*!
             * @brief This function returns a reference to member function
             * @return Reference to member function
             */
            eProsima_user_DllExport std::string& function();
            /*!
             * @brief This function sets a value in member line
             * @param _line New value for member line
             */
            eProsima_user_DllExport void line(
                    uint32_t _line);

            /*!
             * @brief This function returns the value of member line
             * @return Value of member line
             */
            eProsima_user_DllExport uint32_t line() const;

            /*!
             * @brief This function returns a reference to member line
             * @return Reference to member line
             */
            eProsima_user_DllExport uint32_t& line();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const rcl_interfaces::msg::Log& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            builtin_interfaces::msg::Time m_stamp;
            uint8_t m_level;
            std::string m_name;
            std::string m_msg;
            std::string m_file;
            std::string m_function;
            uint32_t m_line;
        };
    } // namespace msg
} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_LOG_H_