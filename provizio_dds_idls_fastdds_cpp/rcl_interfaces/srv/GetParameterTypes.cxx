// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GetParameterTypes.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "GetParameterTypes.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rcl_interfaces::srv::GetParameterTypes_Request::GetParameterTypes_Request()
{
    // m_names com.eprosima.idl.parser.typecode.SequenceTypeCode@18518ccf


}

rcl_interfaces::srv::GetParameterTypes_Request::~GetParameterTypes_Request()
{
}

rcl_interfaces::srv::GetParameterTypes_Request::GetParameterTypes_Request(
        const GetParameterTypes_Request& x)
{
    m_names = x.m_names;
}

rcl_interfaces::srv::GetParameterTypes_Request::GetParameterTypes_Request(
        GetParameterTypes_Request&& x) noexcept 
{
    m_names = std::move(x.m_names);
}

rcl_interfaces::srv::GetParameterTypes_Request& rcl_interfaces::srv::GetParameterTypes_Request::operator =(
        const GetParameterTypes_Request& x)
{

    m_names = x.m_names;

    return *this;
}

rcl_interfaces::srv::GetParameterTypes_Request& rcl_interfaces::srv::GetParameterTypes_Request::operator =(
        GetParameterTypes_Request&& x) noexcept
{

    m_names = std::move(x.m_names);

    return *this;
}

bool rcl_interfaces::srv::GetParameterTypes_Request::operator ==(
        const GetParameterTypes_Request& x) const
{

    return (m_names == x.m_names);
}

bool rcl_interfaces::srv::GetParameterTypes_Request::operator !=(
        const GetParameterTypes_Request& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::srv::GetParameterTypes_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }
    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::srv::GetParameterTypes_Request::getCdrSerializedSize(
        const rcl_interfaces::srv::GetParameterTypes_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.names().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.names().at(a).size() + 1;
    }
    return current_alignment - initial_alignment;
}

void rcl_interfaces::srv::GetParameterTypes_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_names;
}

void rcl_interfaces::srv::GetParameterTypes_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_names;}

/*!
 * @brief This function copies the value in member names
 * @param _names New value to be copied in member names
 */
void rcl_interfaces::srv::GetParameterTypes_Request::names(
        const std::vector<std::string>& _names)
{
    m_names = _names;
}

/*!
 * @brief This function moves the value in member names
 * @param _names New value to be moved in member names
 */
void rcl_interfaces::srv::GetParameterTypes_Request::names(
        std::vector<std::string>&& _names)
{
    m_names = std::move(_names);
}

/*!
 * @brief This function returns a constant reference to member names
 * @return Constant reference to member names
 */
const std::vector<std::string>& rcl_interfaces::srv::GetParameterTypes_Request::names() const
{
    return m_names;
}

/*!
 * @brief This function returns a reference to member names
 * @return Reference to member names
 */
std::vector<std::string>& rcl_interfaces::srv::GetParameterTypes_Request::names()
{
    return m_names;
}

size_t rcl_interfaces::srv::GetParameterTypes_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::srv::GetParameterTypes_Request::isKeyDefined()
{
    return false;
}

void rcl_interfaces::srv::GetParameterTypes_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

rcl_interfaces::srv::GetParameterTypes_Response::GetParameterTypes_Response()
{
    // m_types com.eprosima.idl.parser.typecode.SequenceTypeCode@1991f767


}

rcl_interfaces::srv::GetParameterTypes_Response::~GetParameterTypes_Response()
{
}

rcl_interfaces::srv::GetParameterTypes_Response::GetParameterTypes_Response(
        const GetParameterTypes_Response& x)
{
    m_types = x.m_types;
}

rcl_interfaces::srv::GetParameterTypes_Response::GetParameterTypes_Response(
        GetParameterTypes_Response&& x) noexcept 
{
    m_types = std::move(x.m_types);
}

rcl_interfaces::srv::GetParameterTypes_Response& rcl_interfaces::srv::GetParameterTypes_Response::operator =(
        const GetParameterTypes_Response& x)
{

    m_types = x.m_types;

    return *this;
}

rcl_interfaces::srv::GetParameterTypes_Response& rcl_interfaces::srv::GetParameterTypes_Response::operator =(
        GetParameterTypes_Response&& x) noexcept
{

    m_types = std::move(x.m_types);

    return *this;
}

bool rcl_interfaces::srv::GetParameterTypes_Response::operator ==(
        const GetParameterTypes_Response& x) const
{

    return (m_types == x.m_types);
}

bool rcl_interfaces::srv::GetParameterTypes_Response::operator !=(
        const GetParameterTypes_Response& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::srv::GetParameterTypes_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::srv::GetParameterTypes_Response::getCdrSerializedSize(
        const rcl_interfaces::srv::GetParameterTypes_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.types().size() > 0)
    {
        current_alignment += (data.types().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    return current_alignment - initial_alignment;
}

void rcl_interfaces::srv::GetParameterTypes_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_types;
}

void rcl_interfaces::srv::GetParameterTypes_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_types;}

/*!
 * @brief This function copies the value in member types
 * @param _types New value to be copied in member types
 */
void rcl_interfaces::srv::GetParameterTypes_Response::types(
        const std::vector<uint8_t>& _types)
{
    m_types = _types;
}

/*!
 * @brief This function moves the value in member types
 * @param _types New value to be moved in member types
 */
void rcl_interfaces::srv::GetParameterTypes_Response::types(
        std::vector<uint8_t>&& _types)
{
    m_types = std::move(_types);
}

/*!
 * @brief This function returns a constant reference to member types
 * @return Constant reference to member types
 */
const std::vector<uint8_t>& rcl_interfaces::srv::GetParameterTypes_Response::types() const
{
    return m_types;
}

/*!
 * @brief This function returns a reference to member types
 * @return Reference to member types
 */
std::vector<uint8_t>& rcl_interfaces::srv::GetParameterTypes_Response::types()
{
    return m_types;
}

size_t rcl_interfaces::srv::GetParameterTypes_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::srv::GetParameterTypes_Response::isKeyDefined()
{
    return false;
}

void rcl_interfaces::srv::GetParameterTypes_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


