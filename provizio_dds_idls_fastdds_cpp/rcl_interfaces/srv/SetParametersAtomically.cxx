// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetParametersAtomically.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SetParametersAtomically.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rcl_interfaces::srv::SetParametersAtomically_Request::SetParametersAtomically_Request()
{
    // m_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@2f058b8a


}

rcl_interfaces::srv::SetParametersAtomically_Request::~SetParametersAtomically_Request()
{
}

rcl_interfaces::srv::SetParametersAtomically_Request::SetParametersAtomically_Request(
        const SetParametersAtomically_Request& x)
{
    m_parameters = x.m_parameters;
}

rcl_interfaces::srv::SetParametersAtomically_Request::SetParametersAtomically_Request(
        SetParametersAtomically_Request&& x) noexcept 
{
    m_parameters = std::move(x.m_parameters);
}

rcl_interfaces::srv::SetParametersAtomically_Request& rcl_interfaces::srv::SetParametersAtomically_Request::operator =(
        const SetParametersAtomically_Request& x)
{

    m_parameters = x.m_parameters;

    return *this;
}

rcl_interfaces::srv::SetParametersAtomically_Request& rcl_interfaces::srv::SetParametersAtomically_Request::operator =(
        SetParametersAtomically_Request&& x) noexcept
{

    m_parameters = std::move(x.m_parameters);

    return *this;
}

bool rcl_interfaces::srv::SetParametersAtomically_Request::operator ==(
        const SetParametersAtomically_Request& x) const
{

    return (m_parameters == x.m_parameters);
}

bool rcl_interfaces::srv::SetParametersAtomically_Request::operator !=(
        const SetParametersAtomically_Request& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::srv::SetParametersAtomically_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::srv::SetParametersAtomically_Request::getCdrSerializedSize(
        const rcl_interfaces::srv::SetParametersAtomically_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getCdrSerializedSize(data.parameters().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void rcl_interfaces::srv::SetParametersAtomically_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_parameters;
}

void rcl_interfaces::srv::SetParametersAtomically_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_parameters;}

/*!
 * @brief This function copies the value in member parameters
 * @param _parameters New value to be copied in member parameters
 */
void rcl_interfaces::srv::SetParametersAtomically_Request::parameters(
        const std::vector<rcl_interfaces::msg::Parameter>& _parameters)
{
    m_parameters = _parameters;
}

/*!
 * @brief This function moves the value in member parameters
 * @param _parameters New value to be moved in member parameters
 */
void rcl_interfaces::srv::SetParametersAtomically_Request::parameters(
        std::vector<rcl_interfaces::msg::Parameter>&& _parameters)
{
    m_parameters = std::move(_parameters);
}

/*!
 * @brief This function returns a constant reference to member parameters
 * @return Constant reference to member parameters
 */
const std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::srv::SetParametersAtomically_Request::parameters() const
{
    return m_parameters;
}

/*!
 * @brief This function returns a reference to member parameters
 * @return Reference to member parameters
 */
std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::srv::SetParametersAtomically_Request::parameters()
{
    return m_parameters;
}

size_t rcl_interfaces::srv::SetParametersAtomically_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::srv::SetParametersAtomically_Request::isKeyDefined()
{
    return false;
}

void rcl_interfaces::srv::SetParametersAtomically_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

rcl_interfaces::srv::SetParametersAtomically_Response::SetParametersAtomically_Response()
{
    // m_result com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@756cf158


}

rcl_interfaces::srv::SetParametersAtomically_Response::~SetParametersAtomically_Response()
{
}

rcl_interfaces::srv::SetParametersAtomically_Response::SetParametersAtomically_Response(
        const SetParametersAtomically_Response& x)
{
    m_result = x.m_result;
}

rcl_interfaces::srv::SetParametersAtomically_Response::SetParametersAtomically_Response(
        SetParametersAtomically_Response&& x) noexcept 
{
    m_result = std::move(x.m_result);
}

rcl_interfaces::srv::SetParametersAtomically_Response& rcl_interfaces::srv::SetParametersAtomically_Response::operator =(
        const SetParametersAtomically_Response& x)
{

    m_result = x.m_result;

    return *this;
}

rcl_interfaces::srv::SetParametersAtomically_Response& rcl_interfaces::srv::SetParametersAtomically_Response::operator =(
        SetParametersAtomically_Response&& x) noexcept
{

    m_result = std::move(x.m_result);

    return *this;
}

bool rcl_interfaces::srv::SetParametersAtomically_Response::operator ==(
        const SetParametersAtomically_Response& x) const
{

    return (m_result == x.m_result);
}

bool rcl_interfaces::srv::SetParametersAtomically_Response::operator !=(
        const SetParametersAtomically_Response& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::srv::SetParametersAtomically_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += rcl_interfaces::msg::SetParametersResult::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::srv::SetParametersAtomically_Response::getCdrSerializedSize(
        const rcl_interfaces::srv::SetParametersAtomically_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += rcl_interfaces::msg::SetParametersResult::getCdrSerializedSize(data.result(), current_alignment);

    return current_alignment - initial_alignment;
}

void rcl_interfaces::srv::SetParametersAtomically_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_result;

}

void rcl_interfaces::srv::SetParametersAtomically_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_result;
}

/*!
 * @brief This function copies the value in member result
 * @param _result New value to be copied in member result
 */
void rcl_interfaces::srv::SetParametersAtomically_Response::result(
        const rcl_interfaces::msg::SetParametersResult& _result)
{
    m_result = _result;
}

/*!
 * @brief This function moves the value in member result
 * @param _result New value to be moved in member result
 */
void rcl_interfaces::srv::SetParametersAtomically_Response::result(
        rcl_interfaces::msg::SetParametersResult&& _result)
{
    m_result = std::move(_result);
}

/*!
 * @brief This function returns a constant reference to member result
 * @return Constant reference to member result
 */
const rcl_interfaces::msg::SetParametersResult& rcl_interfaces::srv::SetParametersAtomically_Response::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
rcl_interfaces::msg::SetParametersResult& rcl_interfaces::srv::SetParametersAtomically_Response::result()
{
    return m_result;
}

size_t rcl_interfaces::srv::SetParametersAtomically_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::srv::SetParametersAtomically_Response::isKeyDefined()
{
    return false;
}

void rcl_interfaces::srv::SetParametersAtomically_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


